<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adam8enの8log</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-05-11T14:45:55.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Adam Ben</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 Kitsune 模型</title>
    <link href="http://example.com/posts/8aa53a259f2b/"/>
    <id>http://example.com/posts/8aa53a259f2b/</id>
    <published>2025-05-11T14:45:55.000Z</published>
    <updated>2025-05-11T14:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Kitsune</span><span class='p center small'>An Ensemble of Autoencoders for Online Network Intrusion Detection</span><p>本文的创作初衷是为了完成学校布置的课程任务，要求介绍并复现一个网络入侵检测系统，于是我们选择了Kitsune进行讲解。总的来说，Kitsune是一个相对简单的模型，主打一个轻量级和无监督。如果你有关于<span class="bubble-content">Autoencoder</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">自动编码机</span></span>（AE）的相关知识，那么理解起来将会非常轻松。</p><p>如果你想要更深层次的理解Kitsune，那么你可以去阅读它的原始论文<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature"> "Kitsune: An Ensemble of Autoencoders for Online Network Intrusion Detection." *Network and Distributed System Security Symposium (NDSS)</span><span class="reference-title">参考资料</span></span></span>。此外，作者也在Github上开源了论文使用的代码<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Kitsune GitHub 源码仓库</span><span class="reference-title">参考资料</span></span></span>。</p><p>下面是对Kitsune的一个简要梳理。</p><h2 id="引言我们为什么需要流量异常检测"><a class="markdownIt-Anchor" href="#引言我们为什么需要流量异常检测"></a> 引言：我们为什么需要流量异常检测？</h2><p>当今，针对计算机网络进行的攻击越来越多。为了确保计算机系统的安全，一个常见的方法是使用<span class="bubble-content">NIDS</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Network Intrusion Detection System，网络入侵检测系统</span></span>。NIDS的工作原理是在战略点运行一个设备或者软件，用以监测所有通过的流量。假如发现了异常的流量，就发出预警告知管理员。通常情况下，我们都把NIDS部署在网关，用以单点监测。除了单点部署，也可以进行分布式部署来保障安全。</p><p>在过去几年，人们已经开始将机器学习算法运用于网络流量检测。其中使用<span class="bubble-content">ANN</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Artificial Neural Network</span></span>的方法最为流行。因为ANN善于学习数据中的非线性关系，这使得它相比于其他机器学习算法在网络流量检测方面占有更大的优势。一般来说，使用ANN来检测异常流量可以分为以下四个步骤：</p><ol><li>首先由专家收集并标注用以训练的正常流量和攻击流量数据集。</li><li>然后用强大的CPU或GPU在数据集上训练好ANN。</li><li>接着把训练好的ANN模型副本部署在NIDS上。</li><li>最后NIDS用已经训练好的模型来检测通过的流量。</li></ol><p>然而在实际情况下，直接使用ANN是不可行的，理由主要有以下三点：</p><ol><li><strong>离线处理</strong>：要训练一个有监督的模型，所有的标注实例都必须在本地可用，然而这在简单的网关设施上是不可行的。当然也可以把数据发送到远程服务进行训练，但这会产生巨大的网络开销。</li><li><strong>监督学习</strong>：标注流程成本高昂。另外，攻击随着时间的演变在不断变化，维护一个恶意攻击流量存储库是不现实的，而且为了进行识别分类将所有类别的攻击流量全部放入训练数据中本身就不合理。</li><li><strong>复杂度高</strong>：ANN的计算复杂度随着神经元数量的增加而指数增长，因此部署在简单的网关设备上会限制ANN的性能。</li></ol><p>为了解决这些问题，部署在基于ANN开发的NIDS应当遵循以下原则：</p><ol><li><strong>在线处理</strong>：使用实例训练或执行完毕后，该实例会立刻被丢弃。</li><li><strong>无监督学习</strong>：训练过程中不采用明确数据包是良性还是恶性的标签。只要不耽误处理进程，其他元信息也可以使用。</li><li><strong>低复杂度</strong>：数据包处理速率必须高于预期的数据包抵达速率，也就是说要保证没有任何数据包处于等待状态。</li></ol><p>基于以上原则，诞生了Kitsune模型，它的特点是：<strong>轻量、在线、无监督</strong>。</p><h2 id="kitsune-是什么"><a class="markdownIt-Anchor" href="#kitsune-是什么"></a> Kitsune 是什么？</h2><span class="bubble-content">Kitsune</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">基于人工神经网络的轻量级入侵检测系统</span></span>，是由以色列本古里安大学的 Yisroel Mirsky 博士等人提出，并于 2018 年发表在 NDSS（Network and Distributed System Security Symposium，网络与分布式系统安全会议）上的一项研究成果。该系统名字来源于日本神话中的“狐妖”，象征着多尾、善变、成长与进化的特性，恰好也暗示了 Kitsune 模型的结构与功能：由多个子神经网络构成，随着时间不断学习网络流量的特征，愈发强大。<img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/ChatGPT%20Image%202025%E5%B9%B45%E6%9C%8811%E6%97%A5%2018_57_15.png" alt="ChatGPT Image 2025年5月11日 18_57_15" style="zoom: 25%;" /><p>Kitsune 的总体功能是构建一个在线、无监督、低资源消耗的入侵检测系统。与传统离线训练的大模型不同，Kitsune 只需要看到一条流量就能立即进行训练和判断，不依赖攻击流量、不依赖标签，也不需要高性能服务器。它通过Autoencoder不断学习“正常流量”的表现形式，一旦出现偏离这种“正常模式”的行为，就通过重建误差高低将其标记为异常。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511201331980.png" alt="image-20250511201331980" style="zoom: 67%;" /><p>Kitsune 的设计目标非常明确：部署在现实中实际可用的设备上，尤其适用于物联网场景中的<span class="bubble-content">边缘设备</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">如家庭路由器、小型防火墙、工业控制器等</span></span>。在这些资源有限、无法运行大模型的环境中，Kitsune 可以提供基本且实时的网络入侵检测能力。</p><p>总而言之，Kitsune 不是为了“跑得更准”，而是为了“部署得出去”，它用巧妙的架构设计和神经网络的最小必要单元，做成了一个真正能用的流量检测系统。</p><h2 id="自编码器基础如何让神经网络自己学会什么是正常"><a class="markdownIt-Anchor" href="#自编码器基础如何让神经网络自己学会什么是正常"></a> 自编码器基础：如何让神经网络自己学会“什么是正常”？</h2><p>Autoencoder，是一个最经典的无监督神经网络结构。它不需要任何人工标签，只需要输入原始数据，就能训练出“对输入数据结构的理解”。换句话说，它的目标不是分类，不是预测，而是<strong>让网络自己理解输入数据长什么样子，并尽力还原它</strong>。</p><p>自编码器的结构一般分为两部分：</p><ol><li><strong>编码器（Encoder）</strong>：把输入压缩为一个低维的“潜在表示”</li><li><strong>解码器（Decoder）</strong>：再把这个压缩表示尽量还原成原始输入</li></ol><p>训练的目标很简单——最小化输入和输出之间的差距。差距越小，说明网络对输入理解得越好。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511201259173.png" alt="image-20250511201259173" /></p><p>以图像为例：如果你把一张猫的照片输入自编码器，它压缩再重建后还是一张猫，那说明它确实理解了“猫”的样子。可如果你给它一张它没见过的奇怪图，它就重建不出来，结果就会很模糊。</p><p>这就是自编码器能被用来<span class="bubble-content">异常检测</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Anomaly Detection</span></span>的原因：<strong>它只能还原它见过的“正常”，无法还原没见过的“异常”。</strong></p><div class="note info simple"><p><strong>Q</strong>：那 Kitsune 是怎么用 AE 做异常检测的呢？</p><p><strong>A</strong>：Kitsune 的每个小型神经网络（也就是小 AE）都是在“正常流量”上进行训练的。当模型看到新的流量包时，会尝试把它压缩再还原。如果这个包的特征和过去见过的正常流量一致，AE 就能重建得很好，误差很小；如果它属于攻击流量或某种从未见过的模式，那么重建就会失败，误差变大。</p></div><p>因此，在 Kitsune 的世界里，判断是否异常的关键标准非常直接：</p><blockquote><p><strong>重建误差 &gt; 阈值 = 异常</strong></p></blockquote><p>这是一个没有标签、也无需攻击预设的检测方式，它让模型自己决定什么是“正常”。</p><h2 id="kitsune-的架构解析"><a class="markdownIt-Anchor" href="#kitsune-的架构解析"></a> Kitsune 的架构解析</h2><h3 id="系统模块结构图"><a class="markdownIt-Anchor" href="#系统模块结构图"></a> 系统模块结构图</h3><p>为了理解 Kitsune 是如何工作的，我们不妨跟着一条网络数据包走一遭。</p><p>Kitsune 的整个检测流程可以用一句话概括：</p><blockquote><p><strong>Packet In → Feature Extractor → Feature Mapper → KitNET → 判断是否异常</strong></p><p>📦 网络包 → 🎛 特征提取器（Feature Extractor）→ 🧩 特征映射器（Feature Mapper） → 🧠 KitNET（多个小 AE + 输出层 AE） → ⚠️ 异常判断器（根据重建误差阈值）</p></blockquote><p>每一个环节都有它独特的功能。下面我们用一张图来表示 Kitsune 的结构：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511201242288.png" alt="image-20250511201242288" /></p><p>每来一个网络包，Kitsune 都会做以下几件事：</p><ol><li><strong>特征提取</strong>：从包头和连接上下文中提取 115 维统计特征（如包间时间、方向、大小等）</li><li><strong>特征分组</strong>：将这 115 个特征根据相关性自动分成多个组，每组送入一个小型 Autoencoder</li><li><strong>局部重建</strong>：每个小 AE 对自己的特征子集进行“压缩-还原”操作，输出一个局部重建误差</li><li><strong>整合判断</strong>：所有小 AE 的输出汇总到一个输出层 AE，由它综合给出最终的异常得分</li><li><strong>误差判定</strong>：若误差高于阈值，则该流量被判定为异常</li></ol><p>接下来我们将逐步拆解系统中每一个模块的细节。</p><h3 id="特征提取feature-extractor"><a class="markdownIt-Anchor" href="#特征提取feature-extractor"></a> 特征提取（Feature Extractor）</h3><p>在神经网络中，输入的质量决定了模型输出的上限。Kitsune 不直接用原始数据包的比特流，而是通过一个轻量的特征提取模块，把每个网络包转换为一个<strong>115维的特征向量</strong>的行为<strong>快照</strong>。这些信息捕捉了一个小的时间窗口:</p><ol><li>数据包发送方的总体情况</li><li>数据包发送方和接收方之间的流量。</li></ol><p>这个过程发生在系统的最前端，叫做 <span class="bubble-content">Feature Extractor</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">特征提取器</span></span>。</p><h4 id="为什么选这些特征"><a class="markdownIt-Anchor" href="#为什么选这些特征"></a> 为什么选这些特征？</h4><p>Kitsune 不仅关注这个包的内容，更关注是谁发的、发给谁、通信的上下文是否异常。因此，它会从四种不同粒度的“通信实体”中提取特征：</p><table><thead><tr><th>通信实体</th><th>表示的含义</th></tr></thead><tbody><tr><td><strong>SrcMAC-IP</strong></td><td>包的来源 MAC + IP（物理+逻辑）</td></tr><tr><td><strong>SrcIP</strong></td><td>来源 IP 地址（逻辑层行为）</td></tr><tr><td><strong>Channel</strong></td><td>来源 IP 与目的 IP 的组合（一个 IP 层的通路）</td></tr><tr><td><strong>Socket</strong></td><td>TCP/UDP 四元组（端口级的通信）</td></tr></tbody></table><p>这四种实体从不同维度反映当前包所处的“社交关系”，比如这个发包者是一个频繁通信的大 IP？还是一个端口刷屏的可疑客户端？从一个时间窗 λ 中总共可以提取 23 个特征（包括上述特征）。</p><p>Kitsune 不仅看当前行为，还会快速回顾过去一段时间内这个实体的通信习惯。具体来说，Kitsune 会使用 <strong>五种不同时间窗口 λ</strong> 来提取过去的行为统计：</p><ul><li>最近 100ms（λ = 0.01）</li><li>最近 500ms（λ = 0.1）</li><li>最近 1.5 秒（λ = 1）</li><li>最近 10 秒（λ = 3）</li><li>最近 1 分钟（λ = 5）</li></ul><p>这种做法让模型能同时看到“短期突发行为”和“长期趋势变化”，是检测攻击流量节奏的关键机制。</p><div class="note info simple"><p><strong>Q</strong>：Kitsune 是怎么得出 115 维特征的？</p><p><strong>A</strong>：Kitsune 从每个通信实体中提取一套共 <strong>23 个流量行为特征</strong>，然后将这 23 个特征，在 5 个时间窗口下各提取一遍：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>23</mn><mtext> 特征</mtext><mo>×</mo><mn>5</mn><mtext> 时间窗口</mtext><mo>=</mo><mn>115</mn><mtext> 维特征</mtext></mrow><annotation encoding="application/x-tex">23 \text{ 特征} \times 5 \text{ 时间窗口} = 115 \text{ 维特征}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">3</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">特征</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">时间窗口</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">5</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">维特征</span></span></span></span></span></span></p><p>每个网络包到来时都会提取这 115 维向量，作为后续 KitNET 模型的输入。即便某些实体（如 socket）在包中不存在，它们的对应特征也会自动填 0，保证特征维度统一。</p></div><h4 id="一个聪明的小细节阻尼递增统计damped-incremental-statistics"><a class="markdownIt-Anchor" href="#一个聪明的小细节阻尼递增统计damped-incremental-statistics"></a> 一个聪明的小细节：阻尼递增统计（Damped Incremental Statistics）</h4><p>为了实现在线处理，Kitsune 并不保留所有历史数据来计算统计特征，而是使用了一种叫做 <span class="bubble-content">Damped Incremental Statistics</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">阻尼递增统计</span></span> 的方法。</p><p>这是一种不保存历史样本的“在线统计”方法，它能对“最新数据”给更大权重，而让老数据的影响随时间自动衰减，<strong>非常适合流量这种时序敏感的数据与资源受限的嵌入式设备</strong>。</p><p>实际上，Kitsune 所用的“阻尼统计”在工程实现上考虑了很多实用问题，比如时间差异、异常流量抖动等。但从核心原理来看，它的机制就是一种指数加权平均（EWMA），用不断衰减的方式综合过去数据的影响。我们可以用简化公式来帮助理解这个机制。下面是一段用于计算阻尼平均值与标准差的伪代码：</p><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">initialize: mean = <span class="number">0</span>, variance = <span class="number">0</span></span><br><span class="line"><span class="keyword">set</span>: alpha = <span class="number">0.01</span>  # 阻尼因子（越大越关注当前）</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">new</span> value x:</span><br><span class="line">    delta = x - mean</span><br><span class="line">    mean += alpha * delta</span><br><span class="line">    variance = (<span class="number">1</span> - alpha) * (variance + alpha * delta^<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>mean</code> 是阻尼平均值</li><li><code>variance</code> 是阻尼方差（无偏估计）</li><li><code>alpha</code> 是阻尼因子：值越大，越“健忘”，越关注当前</li></ul><p>Kitsune 通过这个机制，在不牺牲速度和内存的前提下，<strong>准确提取了流量行为的最新状态</strong>，为后续的 AE 模型提供了足够信息密度的输入。</p><h3 id="特征映射feature-mapper"><a class="markdownIt-Anchor" href="#特征映射feature-mapper"></a> 特征映射（Feature Mapper）</h3><p>提取出 115 维的网络流量特征向量后，Kitsune 并不会直接将它们一股脑送进一个大模型。相反，它采用了一种<strong>模块化的神经网络结构</strong>，把特征按组划分、分别送入多个小型自编码器中，再将它们的结果汇总判断。</p><p>这个划分工作由 <span class="bubble-content">Feature Mapper</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">特征映射器</span></span> 模块完成。</p><h4 id="自动分组的动机小-ae-更快更稳"><a class="markdownIt-Anchor" href="#自动分组的动机小-ae-更快更稳"></a> 自动分组的动机：小 AE 更快更稳</h4><p>如果把 115 维的特征都塞进一个大的自编码器，会遇到几个严重问题：</p><ol><li><strong>计算量大，训练慢</strong>：AE 的参数量和输入维度成平方增长，资源消耗高。</li><li><strong>泛化能力差</strong>：大模型容易过拟合少数重要特征，而忽略其他微妙信号。</li><li><strong>不适合在线训练</strong>：Kitsune 要求每个包来就更新一次，速度必须快。</li><li><strong>难以解释</strong>：局部异常（比如某一个 Socket 行为异常）容易被大模型“稀释掉”。</li></ol><p>所以 Kitsune 的思路是：</p><blockquote><p>“与其一个大脑处理所有输入，不如分成多个小脑，各司其职，专注某一类特征。”</p></blockquote><p>那么我们怎么自动把特征分成组？</p><p>Kitsune 使用了一种简单但高效的策略：基于 Pearson 相关系数的贪心聚类算法。</p><h4 id="pearson-聚类的策略简述"><a class="markdownIt-Anchor" href="#pearson-聚类的策略简述"></a> Pearson 聚类的策略（简述）</h4><p>Kitsune 使用了一种基于 Pearson 相关性的<span class="bubble-content">层次聚类算法</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">agglomerative hierarchical clustering</span></span>，通过对 115 维特征构建相关距离矩阵，再生成一棵<span class="bubble-content">聚类树</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">dendrogram</span></span>。最终通过裁剪该树，将特征分成若干组，确保每组内高度相关、且组内维度不超过预设上限（如 m=10）。</p><p>其基本思路如下：</p><ol><li><strong>计算特征之间的 Pearson 相关性矩阵</strong><ul><li>两两计算特征间的线性相关程度，数值越接近 ±1 代表相关性越强</li></ul></li><li><strong>使用贪心策略分组</strong><ul><li>尽量将相关性高的特征放进同一个组</li><li>每组不超过一个预设的最大维度（默认是 10）</li></ul></li></ol><p>最终的结果是：</p><ul><li>将 115 维特征划分成多个组（如 12 组）</li><li>每组交给一个单独的小 AE 处理</li><li>每个小 AE 专注学习一个“特征子空间”的正常行为模式</li></ul><p>Feature Mapper 的输出是一个列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [x0, x1, x9],    <span class="comment"># 小AE1接收的特征</span></span><br><span class="line">  [x2, x3, x4, x5], <span class="comment"># 小AE2接收的特征</span></span><br><span class="line">  ...</span><br><span class="line">  [x99, x100, x114] <span class="comment"># 小AEk接收的特征</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>它是一个“特征索引列表”，表示哪组特征归哪个 AE 管。这个映射在 <strong>训练初期生成一次后就固定</strong>，不会在之后动态调整，确保训练稳定性。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511201147358.png" alt="image-20250511201147358" style="zoom: 67%;" /><p>总的来说，Kitsune 的 Feature Mapper 模块，让我们把高维输入“切块”，分发给多个小神经网络，从而实现了：</p><ul><li>更快的训练</li><li>更好的鲁棒性</li><li>更强的解释性</li><li>更适合嵌入式设备部署</li></ul><p>这种“分组 + 小 AE”架构也就是我们即将讲到的核心组件：<span class="bubble-content">KitNET</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Kit-sune NET-work，模块化自编码网络</span></span> 的基石。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511201028597.png" alt="image-20250511201028597" style="zoom: 80%;" /><h3 id="kitnet-架构详解"><a class="markdownIt-Anchor" href="#kitnet-架构详解"></a> KitNET 架构详解</h3><p>前面我们讲到，Kitsune 并不使用一个庞大的神经网络去处理全部特征，而是将特征按相关性分组，分发给多个 Autoencoder 模块，每个模块独立训练。这些模块构成了 Kitsune 检测引擎的核心结构：KitNET，包含在<span class="bubble-content">Anomaly Detector</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">异常检测器</span></span>部件中。</p><p>KitNET 的设计由两层组成：</p><h4 id="ensemble-layer子模型层"><a class="markdownIt-Anchor" href="#ensemble-layer子模型层"></a> Ensemble Layer（子模型层）</h4><p>这是多个<strong>小型自编码器</strong>组成的神经网络集合，每个小 AE 负责处理一组特征子集。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子 AE1：处理 [x₀, x₁, x₉]</span><br><span class="line">子 AE2：处理 [x₂, x₃, x₄, x₅]</span><br><span class="line">...</span><br><span class="line">子 AEk：处理 [x₉₉, x₁₀₀, x₁₁₄]</span><br></pre></td></tr></table></figure><p>每个小 AE 的输出是一个 <strong>局部重建误差值</strong>，表示该特征子空间当前的行为是否“正常”。</p><p>这就像每个小医生在检查某个局部器官，有的查血，有的查心跳，有的测体温。</p><h4 id="output-layer输出层-ae"><a class="markdownIt-Anchor" href="#output-layer输出层-ae"></a> Output Layer（输出层 AE）</h4><p>Ensemble Layer 的输出，是一组误差值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e₁, e₂, ..., eₖ</span><br></pre></td></tr></table></figure><p>这些误差值构成一个新的输入向量，送入一个<strong>额外的大型 AE</strong>，我们称之为“输出层 AE”或“meta AE”。</p><p>它的任务是：</p><ul><li>学会“正常的误差组合模式”</li><li>判断这些误差组合是否也偏离了常规</li></ul><p>最终我们得出一个<strong>整体重建误差 eₒ</strong>，用来判断当前整个输入是否异常。</p><p>Kitsune 作为一个无监督入侵检测系统，它并不会告诉你：“这是木马”或“这是DDoS”，也不会输出一个多分类结果。它的判断逻辑非常朴素而有效——<strong>能不能把输入“还原”出来？只要重建误差超过某个阈值，就报警！</strong></p><p>判断规则就是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>If </mtext><mi>e</mi><mtext>ₒ</mtext><mo>&gt;</mo><mi>τ</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mtext>Anomaly</mtext></mrow><annotation encoding="application/x-tex">\text{If } eₒ &gt; \tau \quad \Rightarrow \quad \text{Anomaly}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord text"><span class="mord">If </span></span><span class="mord mathnormal">e</span><span class="mord">ₒ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">Anomaly</span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> 是一个<strong>用户可调的阈值</strong>，可以根据你希望报警多还是少来设定。</p><div class="note info simple"><p><strong>Q</strong>：阈值是怎么来的呢？</p><p><strong>A</strong>：Kitsune 默认有一个静态阈值（如 0.1、1.0），但更推荐使用<strong>统计式自适应阈值</strong>，比如：</p><ul><li>根据 warm-up 阶段的平均重建误差 + N 倍标准差来设置</li><li>或者使用滑动窗口内的历史误差分布来实时调整</li></ul><p>这使得系统能更灵敏地适应环境变动，降低误报率。</p></div><p>Kitsune 不通过分类器判断“这是什么”，而是通过重建误差判断“这是不是我熟悉的”。只要重建失败，误差高于阈值，就被视为异常。这个机制简单、高效、不依赖攻击标签，是无监督流量检测最实用的一种方式。</p><p>这个结构就像是多个小科室医生检查完后，汇总给一个总诊断医生，由他拍板：这个人到底是不是“健康”。</p><h4 id="为什么这样设计比一个大-ae-更好"><a class="markdownIt-Anchor" href="#为什么这样设计比一个大-ae-更好"></a> 为什么这样设计比一个大 AE 更好？</h4><p>这个问题很值得问。确实，如果只从功能角度看，一个大 AE 也可以处理所有 115 维输入。那为什么 Kitsune 要“拆成小模块+一个输出层”这么麻烦？</p><p>答案是：</p><div class="note info simple"><ol><li>计算效率高：<ul><li>小 AE 参数少，训练和前向传播都快</li><li>更适合嵌入式设备和在线训练</li></ul></li><li>表达更稳定：<ul><li>高维 AE 更容易过拟合局部模式</li><li>小 AE 专注特定子空间，泛化能力强</li></ul></li><li>模型可解释性好：<ul><li>每个子 AE 的异常得分可单独追踪</li><li>有利于溯源（是哪部分出了问题？）</li></ul></li><li>支持模块替换：<ul><li>可以只重训某几个子 AE，而不用全模型更新</li><li>更灵活</li></ul></li></ol></div><p>通过小模型协作 + 层级汇总的机制，Kitsune 实现了：</p><ul><li>快速响应</li><li>在线训练</li><li>高效部署</li><li>适度可解释</li></ul><p>在下一节中，我们将看到 Kitsune 是如何在实时运行中结合这些结构进行训练与判断的。</p><h2 id="训练方式与在线学习机制"><a class="markdownIt-Anchor" href="#训练方式与在线学习机制"></a> 训练方式与在线学习机制</h2><p>大多数基于神经网络的模型都需要一个完整的数据集，经过长时间的训练之后，才能进行部署。但 Kitsune 的设计初衷在于部署到边缘设备上处理实时网络流量，所以它不能在训练上花费太多时间，它必须做到：<strong>一个数据包来，就能学一点东西；再来一个，就立刻用得上。</strong></p><p>这就决定了它采用的是一种完全不同的训练方式：<span class="bubble-content">Online Learning</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">在线学习</span></span>，搭配 <span class="bubble-content">SGD</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">随机梯度下降</span></span> 来即时更新参数。</p><h3 id="使用-sgd-的原因与优势"><a class="markdownIt-Anchor" href="#使用-sgd-的原因与优势"></a> 使用 SGD 的原因与优势</h3><p>SGD（Stochastic Gradient Descent）与传统的批量梯度下降（Batch Gradient Descent）不同，它<strong>每次只用一个样本来估计梯度并更新模型</strong>。批量梯度下降每次用全量数据更新，计算精确但开销大；而 SGD 每次用一个样本更新，虽然抖动大但非常快速，适合实时系统。Kitsune 使用 SGD 正是因为它支持在线训练，适合边缘设备高频流量处理。</p><p>相比之下：</p><table><thead><tr><th>方式</th><th>数据使用</th><th>更新频率</th><th>适合场景</th></tr></thead><tbody><tr><td>批量训练</td><td>一次用整个数据集</td><td>一轮才更新一次</td><td>离线、资源充足的场景</td></tr><tr><td>在线训练（SGD）</td><td>每次一个样本</td><td>每来一个包就更新</td><td>实时、边缘计算设备</td></tr></tbody></table><p>Kitsune 的设计目标就是<strong>实时低资源检测</strong>，所以 SGD 成为不二之选。</p><h3 id="在线学习机制"><a class="markdownIt-Anchor" href="#在线学习机制"></a> 在线学习机制</h3><p>每当一个网络包到来时，Kitsune 做三件事：</p><ol><li>提取特征向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mn>115</mn></msup></mrow><annotation encoding="application/x-tex">x \in \mathbb{R}^{115}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></li><li>用当前参数计算预测值（AE 重建）</li><li>计算误差，反向传播，<strong>立刻更新参数</strong></li></ol><p>每个自编码器都是<strong>局部独立的</strong>，每次都只用当前样本做一次训练更新，不会等到数据积累才统一训练。这种“边看边学”的方式，让 Kitsune 能够在没有完整训练集的情况下快速上线。</p><h3 id="warm-up-阶段为何重要避免乱报"><a class="markdownIt-Anchor" href="#warm-up-阶段为何重要避免乱报"></a> Warm-up 阶段为何重要（避免乱报）</h3><p>在系统刚启动的阶段，模型还什么都没学，会把一切流量都当成“异常”。为了避免这种误报，Kitsune 设置了一个<strong>训练热身期</strong>，也就是：</p><blockquote><p><strong>前 N 个数据包只用于训练，不进行异常检测</strong></p></blockquote><p>这个阶段叫 <span class="bubble-content">Warm-up</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">冷启动学习期</span></span>。只有当 KitNET 里的每个自编码器都训练了一定次数，模型才会切换为执行模式，开始根据重建误差判断是否异常。</p><h2 id="kitsune-的优势与局限"><a class="markdownIt-Anchor" href="#kitsune-的优势与局限"></a> Kitsune 的优势与局限</h2><p>在前面的章节中，我们已经详细分析了 Kitsune 的整体结构和工作机制。可以说，它不是一个“只存在于论文里的模型”，而是一个真正能够部署、能够落地的异常检测系统。</p><p>但与此同时，Kitsune 并非完美无缺。它所选择的设计方案，也带来了许多<strong>场景适配上的权衡</strong>。</p><h3 id="优势快-轻-够用"><a class="markdownIt-Anchor" href="#优势快-轻-够用"></a> 优势：快、轻、够用</h3><ul><li><p><strong>✅ 在线学习，训练快速，边看边学</strong></p><p>Kitsune 使用的是 SGD，每来一个样本就训练一次，不需要大数据、也不依赖集中式训练。这让它具备了<strong>快速收敛 + 持续学习</strong>的能力，非常适合部署在网络边缘位置，比如家庭网关、交换机、嵌入式防火墙等。</p></li><li><p><strong>✅ 不需要攻击样本，无需人工标注</strong></p><p>传统的机器学习 NIDS 系统需要先收集海量攻击流量，并打上标签。Kitsune 完全跳过了这一点，它只需要学习“正常流量长什么样”，当流量不再“正常”时就报警。这种 <span class="bubble-content">零正负学习</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Zero-Positive Learning</span></span> 思路使得它<strong>对未知攻击类型也有一定泛化能力</strong>。</p></li><li><p><strong>✅ 模型轻量，资源开销小</strong></p><p>每个小 AE 模型结构非常简单，特征维度也被控制在合理范围，整个系统甚至可以在树莓派等低功耗设备上运行。论文中实测，Kitsune 在 Raspberry Pi 上能处理超过 5000 个包/秒。</p></li></ul><h3 id="局限不是所有问题都能靠还原解决"><a class="markdownIt-Anchor" href="#局限不是所有问题都能靠还原解决"></a> 局限：不是所有问题都能靠“还原”解决</h3><ul><li><p><strong>⚠️ 冷启动阶段依赖“干净数据”</strong></p><p>Kitsune 的训练期默认所有接收到的流量都是“正常的”，如果部署环境中一开始就混入了攻击流量，那模型就会<strong>错误地学习到异常行为</strong>，以后再也不会把它当作异常。这种“概念污染”很难逆转。解决方式是：</p><ul><li>人工隔离训练阶段</li><li>在训练结束后冻结参数</li><li>或引入更复杂的漂移检测机制（Kitsune 本身不支持）</li></ul></li><li><p><strong>⚠️ 容易被攻击者“训练带偏”（概念漂移）</strong></p><p>由于模型一直在线更新，如果攻击者长期缓慢地注入恶意流量（比如每天一点点），就有可能把模型“带坏”，让它逐渐把恶意行为当成正常行为。这是在线无监督学习系统的天然缺陷。</p><p>BARS 所做的鲁棒性认证，就是在某种程度上检验 Kitsune 是否对扰动敏感。</p></li><li><p><strong>⚠️ 对参数设定敏感，特别是阈值</strong></p><p>Kitsune 的最终判断逻辑依赖于一个设定好的“重建误差阈值”。如果设得太低，可能正常行为也会被误报；如果设得太高，一些微妙的异常就会被忽略。虽然可以使用滑动窗口或均值+标准差来动态估计，但仍存在调整成本。</p></li></ul><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>Kitsune 不是完美的，但它是“能跑起来、能判断、能实时部署”的模型。在“标签稀缺、计算资源有限”的网络边缘环境里，Kitsune 的<strong>小模型 + 局部判断 + 快速上线</strong>方案，体现了极强的实用性。</p><p>但在高安全要求、高动态环境下，它仍需要配合更完整的安全策略使用，比如模型冻结机制、漂移监测、阈值自调、或配合有监督审计系统。</p><h2 id="bars我们是怎么对-kitsune-做鲁棒性检测的"><a class="markdownIt-Anchor" href="#bars我们是怎么对-kitsune-做鲁棒性检测的"></a> BARS：我们是怎么对 Kitsune 做鲁棒性检测的？</h2><p>在前面几节中，我们已经讲清楚 Kitsune 的整体原理与结构。但作为一个部署在真实网络环境中的系统，还有一个更关键的问题尚未解答：</p><blockquote><p><strong>Kitsune 稳不稳定？它面对数据扰动时还能维持判断一致吗？</strong></p></blockquote><p>为此，我们引入了一种新的评估框架：<span class="bubble-content">BARS</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Boundary-Adaptive Randomized Smoothing</span></span>，对 Kitsune 进行了一次鲁棒性检验。</p><h3 id="什么是-bars"><a class="markdownIt-Anchor" href="#什么是-bars"></a> 什么是 BARS？</h3><p>BARS 是一种基于<span class="bubble-content">随机平滑</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Randomized Smoothing</span></span>思想的鲁棒性认证方法，最早用于图像分类领域，我们在这里将其用于网络流量检测。具体可以参考这篇文章：<a href="https://cloud.tencent.com/developer/article/2376248?utm_source=chatgpt.com">【顶会论文分享】BARS：基于深度学习的流量分析系统的鲁棒性认证-腾讯云开发者社区-腾讯云</a>。</p><p>如果想要更进一步了解这项技术，可以去阅读它的原始论文<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">BARS: Local Robustness Certification for Deep Learning based Traffic Analysis Systems</span><span class="reference-title">参考资料</span></span></span>，由清华大学的王凯等人撰写，发表于 2023 年的 Network and Distributed System Security Symposium（NDSS）会议。同样的，作者也将复现代码<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">BARS 实验复现代码（包含 smoothed_kitsune 模块）</span><span class="reference-title">参考资料</span></span></span>托管在了Github。</p><p>它的基本思路是：</p><blockquote><p>对于同一个输入流量特征 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，向其添加一系列扰动噪声，生成多个扰动样本 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1, x_2, ..., x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别送入模型。<br />如果模型对这些扰动样本<strong>多数仍做出相同判断</strong>，说明这个输入点是“稳定”的。</p></blockquote><h3 id="我们怎么向-kitsune-加噪声"><a class="markdownIt-Anchor" href="#我们怎么向-kitsune-加噪声"></a> 我们怎么向 Kitsune 加噪声？</h3><p>在实践中，我们使用 BARS 框架向 Kitsune 的输入特征加入<strong>分布自适应的扰动噪声</strong>。具体来说：</p><ol><li>对输入特征 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 的每一维添加从特定分布（如 Gaussian、ISRU、Arctan）中采样的噪声 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span></li><li>同样的扰动的最大幅度（半径）为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></li><li>重复采样多次，输入到已训练好的 Kitsune 模型中</li><li>统计模型的输出判断是否一致，估算其“认证准确率”</li></ol><p>这种方法类似于“推一推模型，看它还站得稳不稳”。</p><h3 id="结果展示稳定性随着扰动增大而降低"><a class="markdownIt-Anchor" href="#结果展示稳定性随着扰动增大而降低"></a> 结果展示：稳定性随着扰动增大而降低</h3><p>我们对 Kitsune 模型在 Mirai 攻击数据集上的表现进行了评估，得到如下图所示的结果：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/certified_accuracy_robustness_radius_curve.png" alt="certified_accuracy_robustness_radius_curve" style="zoom:67%;" /><p>图中横轴是扰动半径（即加入的噪声强度），纵轴是模型对这些扰动样本仍然保持判断一致的比例（认证准确率）。</p><p>可以看到：</p><ul><li>在小扰动范围（半径 0.1～0.3）内，Kitsune 的判断非常稳定</li><li>随着扰动增大，模型预测开始出现波动</li><li>到半径 0.5 以上时，认证准确率大幅下降</li></ul><h3 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3><p>BARS 给我们提供了一个很直观的视角，帮助我们理解：</p><ul><li>Kitsune 对特征扰动的鲁棒性如何</li><li>哪些特征子空间容易引起误判</li><li>是否可以在未来增加防御机制来强化稳定性</li></ul><p>最终我们可以说，Kitsune 在轻量设计的前提下仍保持了<strong>可接受的判断稳定性</strong>，但在强扰动下确实存在脆弱区域。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>在这篇文章中，我们详细梳理了 Kitsune——一个基于自编码器的轻量级在线入侵检测系统。它不依赖攻击标签、不需要离线训练，也不追求复杂的大模型结构，而是用一套极具工程智慧的设计，将无监督学习方法真正部署到了实时网络环境中。</p><p>Kitsune 的设计遵循三个核心原则：</p><ul><li><strong>在线学习（Online）</strong>：每个数据包来就训练，模型随时更新</li><li><strong>无监督训练（Unsupervised）</strong>：只学习“正常”，无需预知“异常”</li><li><strong>轻量部署（Efficient）</strong>：特征提取、模型结构、更新方式全部为边缘设备量身打造</li></ul><p>它使用小型自编码器组成的 KitNET，结合多粒度时间窗口和相关性分组的特征输入，在不牺牲实用性的前提下，实现了对流量行为的敏感建模。</p><p>当然，我们也看到了它的局限：</p><ul><li>它假设训练初期是“干净环境”</li><li>它难以抵抗被训练带偏的风险</li><li>它依赖人为设定的参数阈值</li></ul><p>但正如论文标题隐喻的<psw>和Chatgpt总结的</psw>那样：Kitsune——这只日本神话中的“狐妖”——不是万能的神兽，但却拥有<strong>多尾协作、变化灵活、持续成长</strong>的能力。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%202018."> "Kitsune: An Ensemble of Autoencoders for Online Network Intrusion Detection." Network and Distributed System Security Symposium (NDSS)</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/ymirsky/Kitsune-py">Kitsune GitHub 源码仓库</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.ndss-symposium.org/wp-content/uploads/2023/02/ndss2023_f508_paper.pdf?utm_source=chatgpt.com">BARS: Local Robustness Certification for Deep Learning based Traffic Analysis Systems</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/KaiWangGitHub/BARS?utm_source=chatgpt.com">BARS 实验复现代码（包含 smoothed_kitsune 模块）</a></div><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20250511224410700.png" alt="image-20250511224410700" /></p>]]></content>
    
    
    <summary type="html">本文介绍了Kitsune，是一种用于在线网络入侵检测的自动编码器集合。</summary>
    
    
    
    <category term="课堂随笔" scheme="http://example.com/categories/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Machine Learning" scheme="http://example.com/tags/Machine-Learning/"/>
    
    <category term="Autoencoder" scheme="http://example.com/tags/Autoencoder/"/>
    
    <category term="Cybersecurity" scheme="http://example.com/tags/Cybersecurity/"/>
    
    <category term="NIDS" scheme="http://example.com/tags/NIDS/"/>
    
    <category term="论文复现" scheme="http://example.com/tags/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>2024年度总结</title>
    <link href="http://example.com/posts/709e8bfc712b/"/>
    <id>http://example.com/posts/709e8bfc712b/</id>
    <published>2024-12-31T13:29:35.000Z</published>
    <updated>2024-12-31T13:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024年度总结"><a class="markdownIt-Anchor" href="#2024年度总结"></a> 2024年度总结</h1><p>​今天是12月31日，是12月份也是2024年的最后一天。照例我应该要写一份12月份的月度总结，不过既然已经到了岁末，不妨直接写一篇年度总结吧。这次我打算一边听岸部真明《流れ行く云》一边倒序回忆一遍，毕竟，人对刚刚发生的事印象最深刻，我也好开封动笔。为什么要选《流れ行く云》呢？在一年的最后一天努力回忆前三百五十五天的事情，大概就和躺在草坪上看流行的云一样吧。不管怎么说，我动笔了，但愿打字也能够行云流水吧。</p><h2 id="12月"><a class="markdownIt-Anchor" href="#12月"></a> 12月</h2><p>​首先是十二月，以随笔为主。</p><p>​本以为十二月作为十一月的延续，应该会一而贯之的清闲。不想，在年末又遇到了许多不大不小的变故，因而我又不得不重新忙碌起来。</p><p>​在动笔开写年度总结之前，我刚刚结束了软件工程的课程设计，前前后后可能花了将近一个星期，一共写了56页，把我折腾的不轻。虽说有先前的软著项目兜底，但各种架构图、结构图、流程图、时序图、UML图、ER图等等繁文缛节还是极为繁琐，严重拖沓了项目进度。虽说任务量看着很大，但其中大部分都是重复性工作，一想到我的脖子要为此辛酸疼痛，就衷心的感到不值。更进一步的话，在我看来，复习周要干的事情都半斤八两，又岂止软工。各种埋怨啰嗦，就此省略。</p><p>​前天，我在参加项目小组的庆功会。历经各种变故，为了庆祝四月份计设比赛省一等奖的火锅小队，终于是在不断推迟了八个月后，赶在今年结束前的倒数第三天成功聚齐了，可以说是有惊无险。就算如此，命运还是要给我开一个小小的玩笑。在打车去火锅店的路上，给我们开车的师傅疲劳驾驶在座位上打鼾，不带任何减速地直奔前方一辆等红灯的轿车而去，吓得我们后座三个大汉失色惊呼把师傅叫清醒了，这才一脚急刹车下去避免了一场车祸。不过，虽然出师不利，火锅的口味却没有受到影响，大家都吃得很开心……只有一个人除外——我们的队长。他是江苏人吃不了辣，却替我们选了一家重庆火锅，结果中途被辣的手忙脚乱。我也好不到哪去，在边上笑的时候忘了嘴里还有东西，结果乐极生悲呛进了气管，差点把肺咳出来。果然，哪怕到了年末，我也交不上好运，还是得被暗戳戳地捶打几下。</p><p>​大前天傍晚，我在图书馆考深信服的SCSA-S证书。虽说我已经有小半年没有碰过网安的领域了，但对于这个考核来说还是游刃有余。平心而论，考核难度不大，形式也很水。但也有那么一瞬间，启动靶机的时候我还是有点恍惚。用魂游最喜欢调侃的话术来说，“觉醒了前世的记忆”。仿佛又回到了第一次打CTF新生赛时和队友一起熬夜不眠不休的时候，鏖战八个小时解不出来题目在电脑前抓狂的时候，距离入围决赛仅差一名和后来分道扬镳的队友苦笑着碰拳的时候，从长沙参加完线下赛返校时在高铁上写小作文的时候。雕栏玉砌应犹在，只是朱颜改。解出flag的瞬间还是会止不住的狂喜，但有些东西已经面目全非了。证书最后也是理所当然的拿下，不过，已经是后话了。</p><p>​大前天凌晨，或者说是大大前天深夜，我在用A4纸叠相思叶信封。听上去有点不像人，事实上也的确有点不像人，谁会在深更半夜爬起来挑灯夜战打开b站学怎么折信封呢？我的本意不过是安慰一下因不可抗力受挫的朋友，没想到身体不由自主的就爬下床铺开了一张纸，就连我自己也相当困惑。随笔写了几句，想着如何把安慰信交给别人，结果鬼使神差的打开了手机搜索折纸的教程，看着看着反而乐在其中，选了一个最为复杂也最为精巧的款式开始动手。现在想想，我会这么做的原因大概还是自己喜欢吧。就像人在森林中迷路，凭着自己的直觉向前直走，其实总是会不知不觉偏向右边一样，都是出于“惯性”。我不喜欢见到别人黯然神伤，再加上我小时候喜欢折纸，于是就水到渠成了。所以，与其说我为了安慰朋友而折纸，毋宁说是在自娱自乐吧。</p><p>​依然是大前天，我在听学校的跨年音乐会。最喜欢《青玉案·元夕》《克罗地亚狂想曲》《雨》与《一步之遥》。</p><p>​再之前就是圣诞节了。两个男大吭哧吭哧坐了一个多小时地铁，辗转无数到了光孝堂。结果在距离目的地只有几步路的地方累的实在走不动了，找了个馆子坐下来吃了碗面，吃完才发现目的地原来就在自己对面，而且人家刚刚关门。到头来计划彻底泡汤，奔袭千里只为了吃碗面条。</p><p>​十二月中旬遇到了一些极不愉快的事情，焦虑了两天两夜，最后在众多朋友的支持下慢慢缓了过来。</p><p>​十二月初，我又开始刷算法题了。没想到，在网安、绩点和实验室摸爬滚打这么久，兜兜转转最后还是开始刷上了算法题。我倒不排斥这个，有时候也会因为一道题目绞尽脑汁而废寝忘食，摸索出AC的代码也会欣喜若狂，感觉世界又明媚了一点。</p><h2 id="11月"><a class="markdownIt-Anchor" href="#11月"></a> 11月</h2><p>​十一月算是这一年最闲的一个月了，我推掉了很多工作，甚至有点无所适从。继续推进软著申请，还学了一些操作系统的实验作业，做得挺扎实的。参加了校内攻防演练，纯粹是为了好玩，顺便攻击学校出口恶气。看了几本书，譬如《鼠疫》。给自己安排了电影时间，每周看一部。虽然这个月没什么大进展，但也让我稍微放松了一下。</p><h2 id="10月"><a class="markdownIt-Anchor" href="#10月"></a> 10月</h2><p>​十月过得挺平淡的，我推掉了大部分比赛，想给自己多点时间沉淀。主要做了两篇软著的申报，一作那篇折腾得够呛，二作的项目倒是进展顺利，老师出钱走代理，省了很多麻烦。开始看吴恩达的机器学习课程，内容很基础，但后面有点吓人，说是要四到六个月学完。还试了试学校的琴房，没想到大三才发现，挺可惜，但总算开始了。这个月没做太多事情，但内心平静了一点。</p><h2 id="9月"><a class="markdownIt-Anchor" href="#9月"></a> 9月</h2><p>​暑假基本摸了，7月沉迷老头环，8月爆肝黑神话，9月才慢慢动起来。参加了全国大学生数学建模国赛，虽然不是特别亮眼的成绩，却也学到了些东西。Go语言总算啃完了基础部分，还写了个简陋的聊天室，算是小突破。这个月对未来有点迷茫，感觉做了很多事，却找不到真正的方向。不过整理博客的时候又找回了点信心，算是把颓废打散了一点。</p><h2 id="6月"><a class="markdownIt-Anchor" href="#6月"></a> 6月</h2><p>​6月说实话比较单调，复习周和期末周几乎占满了整个生活。不过也有小确幸，英语六级感觉发挥不错，应该没问题。终于把《罪与罚》看完了，书里前半部分对人性的批判很有意思，但宗教观念不太能接受。这个月还写了一些关于计组的博客，总算给自己的学习留下了一些痕迹。虽然这个学期结束了，但我总觉得回顾起来有点空落落的，忙碌了一整个月，却少了点成果感</p><h2 id="5月"><a class="markdownIt-Anchor" href="#5月"></a> 5月</h2><p>​这大概是我大学最忙的一个月了，真是身心俱疲。比赛接二连三，广东省信息安全省赛、CISCN国赛、粤港澳程序设计大赛……其中粤港澳赛区拿了一等奖，项目也被大创录了，还拿了软著一作，这算是这个月最大的亮点吧。Go语言学习卡在接口部分，进展有点慢。五月让我意识到分散精力的坏处，感觉做了很多事情，但深入的不多，结果也不够理想。中间还纠结未来规划问题，最后决定先不急，等再沉淀一段时间再做选择吧。</p><h2 id="4月"><a class="markdownIt-Anchor" href="#4月"></a> 4月</h2><p>​四月好像比三月好一点，至少有了一些成品成果。参加了广东省计算机设计大赛，这次终于实打实地做了一部分工作，结果也交上去了；但蓝桥杯裸考，果不其然就是省三垫底。我对CTF的热情还在，打了XYCTF，拿了个第五，不过说实话，我觉得这个方向的路有点窄，不知道值不值得继续深耕。学Go语言的进度慢慢推进，啃了四分之一，还是边学边记笔记的效率最高。还读了《罪与罚》，心理描写写得很棒，但俄国人的名字真的让我头大。总结下来，这个月算是从零到一的一个过程吧，感觉比三月稍微有点成就感。</p><h2 id="3月"><a class="markdownIt-Anchor" href="#3月"></a> 3月</h2><p>​三月过得挺忙，但说实话也有点乱，收获不算太多。大创项目参与了两个，一个是人脸识别系统，我主要做前端优化，基本就是划水挂名了；另一个是智慧医疗平台，这个投入多点，学到了Git协作和Flask框架，可惜项目黄了，挺遗憾的。还试了试高校大数据挑战赛和华为软件精英挑战赛，满脑子“面向GPT编程”，效率不高，最后也没什么成果。书看得很杂，《Go语言圣经》刚起步，《CSAPP》和《算法导论》啃得头昏脑胀。虽然感觉自己忙了很多，但回过头来看，没抓住什么重点。</p><h2 id="年末总结"><a class="markdownIt-Anchor" href="#年末总结"></a> 年末总结</h2><p>​总算进入正题了。写到这里我也有点头大，果然我还是不适合做什么年末总结啊，还是一如既往的随便写点吧。</p><p>​这几天一直在图书馆复习，作业写到心烦时，我就会去四楼书架旁边溜达，随便抽出一本来一把抓住顷刻炼化，饮毛茹血似的把书啃完，权且当作是一种发泄。比如基辛格的《论中国》，六百页左右，大概两天的时间就翻完了。先不说是不是囫囵吞枣，起码对于转移注意力来说，确实是一种挺有性价比的手段。</p><p>​前天复习信息论时突然想起在高一时同学借给我看的《醉步男》，不由得又起身去四楼溜达了一圈。当我在55列B排取书时，斜眼间目光偶然瞥到了太宰治的《人间失格》。《人间失格》大概是国内最出名的日本小说之一了吧。在高中的时候，我还一度特别想买来这本书一睹奥妙，其实大概也是为了跟风一下当时的黑残深。不过由于语文老师认为这本书过于“消极”，导致我一直未能如愿。现在想想，当时的我和在网易云评论区下刷Emo的人大概没有什么区别。</p><p>​不过现在倒是个好好审视的机会，于是我把《醉步男》和《人间失格》一起拿走了。</p><p>​《醉步男》看的照样很快，这本书我在高中时看过，再加上本身篇幅不长，大概半天不到就看完了。《人间失格》的话，事实上直到我写下这些话时，我还没有看完这本书，只看完了前两个手记。毕竟我还在复习，看的时间委实不多，已经看的两篇手记，都是在我吃饭的时候看的。</p><p>​如果是从我已经读过的两篇手记来谈的话，我觉得太宰治其实不难理解。我也有时感到黯然神伤，就像是一条鱼游过整个北极冰川，或者是一丝不挂在土坑里睡觉。但太宰治went too far，他在这条路上走了太远，最后的结局便如同星星越过洛希极限一样被绝望的引力扯得粉碎。</p><p>​不过，引起我兴趣的是太宰治的另一面。他在《奔跑吧，梅勒斯》里写道：“我一心只想着自己的苦恼，却完全没意识到其他人也在努力的活着。有人正静静等待着我，没有一丝怀疑，对我绝对信任。我一条命算得什么。岂能总说那种以死谢罪的废话？我必须回报这份信任才行，只剩下这一件事了！”</p><p>​我很惊讶，啊，就连那位写下“生而为人，我很抱歉”的那么丧丧的太宰治，竟然也曾经一度找到了“人间值得”的信念。尽管这份信念最终还是没能支撑起他“充满耻辱的人生”，最后还是随着太宰治一起沉入玉川上水消失无踪。</p><p>​不过这份残缺的信念点醒了我。“我一心只想着自己的苦恼，却完全没意识到其他人也在努力的活着。“</p><p>​我曾经在别的地方引用过《鼠疫》里的话：“倘若我们当中哪一位，偶尔想与人交交心或谈谈自己的感受，对方无论怎样回应，十有八九都会使他不快。因为他发现与他对话的人在顾左右而言他，他自己表达的，确实是他在日复一日的思虑和苦痛中凝结起来的东西，他想传达给对方的，也是长期经受等待和苦恋煎熬的景象。对方却相反，认为他那些感情都是俗套，他的痛苦俯仰皆是，他的惆怅人皆有之。”以此来小小的自怨自艾。现在想想，确有些傲慢之嫌。不止只有我在烦恼，其他人也会烦恼，人们都在努力的活着。我并不特殊，只不过是芸芸众生中的一份子罢了。既然如此，又有什么资格顾影自怜固步自封呢？</p><p>​岂能总说那种以死谢罪的废话？</p><p>​想通了这一点，就算是太宰治也要竭尽全力的活下去。只不过，太宰治把这份希望交付给了他的妻子石原美知子，我只能把这一点紧紧攥在自己手里。人这一生，应当只为自己而活。我能做的，就是在碎骨磨肉鲜血淋漓的日子里，咬紧牙关铆足全力向前奔跑吧。</p><p>​我也不知道自己为什么要写这些，岸部真明《流れ行く云》也已经要把我的耳朵磨烂了，那么就到此为止吧，希望我在图书馆跨年夜无聊瞎想的这点小小灵光，能够给下一年的我带来一点小小的启迪。</p><p>​祝大家所愿皆所成，多喜乐、长安宁。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/58183995_p12.jpg" alt="58183995_p12" /></p>]]></content>
    
    
    <summary type="html">12月份暨2024年度总结</summary>
    
    
    
    <category term="月度总结" scheme="http://example.com/categories/%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Rolling Hashes：滚动哈希详解</title>
    <link href="http://example.com/posts/c5de366d06a7/"/>
    <id>http://example.com/posts/c5de366d06a7/</id>
    <published>2024-12-11T12:22:13.000Z</published>
    <updated>2024-12-11T12:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滚动哈希算法"><a class="markdownIt-Anchor" href="#滚动哈希算法"></a> 滚动哈希算法</h1><h2 id="哈希函数"><a class="markdownIt-Anchor" href="#哈希函数"></a> 哈希函数</h2><p>什么是哈希函数？</p><blockquote><p>哈希函数是将输入映射到固定大小输出的函数。它可以将一个字符串映射成一个整数，这个整数称为哈希值。</p><p>通常我们使用的哈希函数具有以下两个特点：</p><ul><li>均匀性：对于任意两个不同的输入，哈希值相等的概率很小。</li><li>稳定性：对于同一个输入，哈希值相同。</li></ul></blockquote><p>了解了哈希函数的定义，就可以学习滚动哈希算法了。</p><h2 id="滚动哈希"><a class="markdownIt-Anchor" href="#滚动哈希"></a> 滚动哈希</h2><p>滚动哈希，即 Rolling Hashes 是一种快速计算字符串哈希值的方法。它利用字符串前后子串的关系，只需要 O(1) 的时间就可以计算新的哈希值。</p><p>滚动哈希的计算公式如下所示：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>hash</mtext><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn><mo>…</mo><mi>i</mi><mo>+</mo><mi>m</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mtext>hash</mtext><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>…</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>s</mi><mi>i</mi></msub><mo>×</mo><msup><mi>d</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>+</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mi>m</mi></mrow></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{hash}(s_{i+1\dots i+m})=(d(\text{hash}(s_{i\dots i+m-1})-s_i\times d^{m-1})+s_{i+m})\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">hash</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="minner mtight">…</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord text"><span class="mord">hash</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="minner mtight">…</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>hash</mtext><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>…</mo><mi>i</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{hash}(s_{i\dots i+m-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">hash</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="minner mtight">…</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>代表从第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>个字符开始，长为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>的子串的哈希值</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>代表一个常数，叫做<strong>进制数</strong>，通常取一个较大的质数，比如31、131、13331等</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mi>m</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{i+m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>代表字符串中的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>个字符和第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">i+m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>个字符</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>代表一个大的模数，用来控制哈希数的范围并减少哈希冲突</li></ul><p>这个式子的含义是：<strong>新的子串的哈希值，等于旧的子串的哈希值减去最左边元素的贡献再加上新的字符</strong></p><h3 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h3><h4 id="字符串匹配问题"><a class="markdownIt-Anchor" href="#字符串匹配问题"></a> 字符串匹配问题</h4><p>滚动哈希是经典的 <strong>Rabin-Karp 字符串匹配算法</strong> 的核心思想，用于在一个长字符串中查找特定模式的所有出现位置。</p><p>Rolling Hashes 可以通过计算文本串和模式串的哈希值来解决字符串匹配问题。具体来说，我们可以先计算出模式串的哈希值，然后依次对文本串中的每个长度为模式串长度的子串计算哈希值，并将其与模式串的哈希值进行比较。如果匹配成功，则返回位置。</p><h4 id="最长公共子串"><a class="markdownIt-Anchor" href="#最长公共子串"></a> 最长公共子串</h4><p>给定两个字符串 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">s1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">s2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span></span></span></span> ，找到它们的最长公共子串。例如，对于字符串 “abcde” 和 “ababcde”，它们的最长公共子串为 “abcde”。</p><p>Rolling Hashes 可以通过计算两个字符串的哈希值来解决最长公共子串问题。可以先计算第一个字符串的所有长度小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的子串的哈希值，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>是字符串长度。然后再一一计算第二个字符串的所有子串哈希值，检测是否发生哈希碰撞。如果发生碰撞，就说明出现了相等的字符串。</p><p>还有一种可选的做法是先将两个字符串拼接起来，然后对于所有长度小于等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的子串计算哈希值，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是字符串长度。最后，我们在两个字符串中分别查找哈希值相等的最长子串，即可找到它们的最长公共子串。</p><p>将字符串拼接后的好处是我们不必再在两个字符串中进行检索，只需要在一个拼接后的字符串中查找是否有相同的子串就好，更加直观了。</p><h4 id="最长回文子串"><a class="markdownIt-Anchor" href="#最长回文子串"></a> 最长回文子串</h4><p>最长回文子串问题是指，给定一个字符串 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>，找到它的最长回文子串。例如，对于字符串 “babad”，它的最长回文子串为 “bab” 或 “aba”。</p><p>它实际上是最长公共子串的变种，我们只需要把给定的字符串逆序然后拼接在原字符串上，就转化为了最长公共子串问题。</p><h2 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h2><p>让我们做一道题：<a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">718. 最长重复子数组 - 力扣（LeetCode）</a></p><blockquote><p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>两个数组中 <strong>公共的</strong> 、长度最长的子数组的长度</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]</span><br><span class="line">输出：3</span><br><span class="line">解释：长度最长的公共子数组是 [3,2,1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure></blockquote><p>我们可以代入最长公共子串问题的做法：</p><ol><li>用二分法快速定位最长子串的长度<code>length</code></li><li>用滑动窗口计算<code>length</code>下，所有<code>nums1</code>子串的哈希值，记录在哈希表中</li><li>继续用滑动窗口计算<code>length</code>下，所有<code>nums2</code>子串的哈希值，检测是否发生碰撞</li></ol><p>这里要求的是最长子数组，所以我们可以省去用哈希函数处理字符的过程，直接代入数字去计算它们的哈希值。此时，哈希值的计算公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>hash</mtext><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>⋅</mo><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>L</mi></msub><mo>⋅</mo><msup><mi>b</mi><mn>0</mn></msup><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{hash}=(a_1 \cdot b^{L-1}+a_2\cdot b^{L-2}+\cdots+a_L\cdot b^0)\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord">hash</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.974661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.974661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>对应的代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算长度为length的数组字串哈希值</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++&#123;</span><br><span class="line">    hash = (hash*base + nums1[i]) % mod</span><br><span class="line">    power = (power * base) % mod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于这个<code>power</code>有什么用我们待会再说，现在你只要知道这是<strong>权重</strong>的意思。</p><p>当我们完成了长度为<code>length</code>的窗口哈希值计算，我们就可以开始移动窗口了。现在，我们要移除最左边的元素，添加窗口右边的一个元素，也就是把窗口向右边移动一位，并计算新的子串的哈希值。</p><p>显然，继续套用哈希值计算公式，我们要做大量的重复计算，代价十分高昂，所以是不可取的。我们之前提到过计算新的子串哈希值的做法：：<strong>新的子串的哈希值，等于旧的子串的哈希值减去最左边元素的贡献再加上新的字符</strong>。</p><p>也就是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>new_hash_intermediate</mtext><mo>=</mo><mo stretchy="false">(</mo><mtext>hash</mtext><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>⋅</mo><mi>b</mi><mspace linebreak="newline"></mspace><mtext>new_hash</mtext><mo>=</mo><mo stretchy="false">(</mo><mtext>new_hash_intermediate</mtext><mo>+</mo><msub><mi>a</mi><mrow><mi>L</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{new\_hash\_intermediate}=(\text{hash}-a_1\cdot b^{L-1})\cdot b \\\text{new\_hash}=(\text{new\_hash\_intermediate}+a_{L+1})\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord text"><span class="mord">new_hash_intermediate</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">hash</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.141331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord text"><span class="mord">new_hash</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">new_hash_intermediate</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>代入整理一下即可得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>new_hash</mtext><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mtext>hash</mtext><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>⋅</mo><mi>b</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>L</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{new\_hash}=((\text{hash}-a_1\cdot b^{L-1})\cdot b+a_{L+1})\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00444em;vertical-align:-0.31em;"></span><span class="mord text"><span class="mord">new_hash</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord text"><span class="mord">hash</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.141331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p><p>通俗解释一下，我们要减去最左边的元素对哈希值的贡献并加上新的元素的哈希值。加上新元素的哈希值不难理解，问题在于怎么去除最左边的元素对哈希值的贡献？</p><p>最左边的元素其实也就是第一个元素，在计算第一个窗口的过程中，它被不断的乘上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>base</mtext></mrow><annotation encoding="application/x-tex">\text{base}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord">base</span></span></span></span></span>并重复<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span>次，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span>是窗口长度，<code>base</code>是哈希的基数。每次滑动窗口，最左边的元素需要移除，这就意味着它的贡献（包括权重）也需要被移除。所以我们需要减去<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a_1\cdot b^{L-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">b^{L-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>就是权重，也就是我们代码中的<code>power</code>。</p><p>那你可能会问了：可不可以临时计算<code>power</code>？比如直接用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>power</mtext><mo>=</mo><msup><mtext>base</mtext><mtext>length-1</mtext></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{power}=\text{base}^{\text{length-1}}\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">power</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9334479999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord text"><span class="mord">base</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9334479999999998em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">length-1</span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>得到，这样做比逐步计算<code>power</code>是否更好？</p><p>这种方式是可行的，每次计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>power</mtext><mo>=</mo><msup><mtext>base</mtext><mtext>length-1</mtext></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>M</mi></mrow><annotation encoding="application/x-tex">\text{power}=\text{base}^{\text{length-1}}\mod M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">power</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9334479999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord text"><span class="mord">base</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9334479999999998em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">length-1</span></span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>时，可以使用<strong>快速幂算法</strong>，时间复杂度仅为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mtext>log</mtext><mo stretchy="false">(</mo><mtext>length</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\text{log}(\text{length}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord text"><span class="mord">log</span></span><span class="mopen">(</span><span class="mord text"><span class="mord">length</span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，而逐次迭代计算<code>power</code>的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mtext>length</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\text{length})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord text"><span class="mord">length</span></span><span class="mclose">)</span></span></span></span>。实际运用中也推荐这么做，但我懒得搓快速幂算法，就图省事了……</p><p>故而我们滑动窗口的代码可以写作：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// m是nums1的长度</span></span><br><span class="line"><span class="keyword">for</span> i := length; i &lt; m; i++&#123;</span><br><span class="line">    hash = (hash*base - nums1[i-length]*power + nums1[i]) % mod</span><br><span class="line">    <span class="keyword">if</span> hash &lt; <span class="number">0</span>&#123;</span><br><span class="line">        hash += mod</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是滚动哈希的全部内容了。但是要解开这道题还不够，我们需要做一些善后工作。</p><p>假定我们校验哈希值的函数为<code>check(length int) bool</code>，我们需要用二分法确定合适的<code>length</code>值。这部分相比滚动哈希就要简单很多了，代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运用二分法确定最大公共子串长度；m，n分别为nums1和nums2的长度</span></span><br><span class="line">left, right := <span class="number">0</span>, min(m,n)</span><br><span class="line">maxLength := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> left &lt;= right&#123;</span><br><span class="line">    mid := (left + right) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> check(mid)&#123;</span><br><span class="line">        <span class="keyword">if</span> mid &gt; maxLength&#123;</span><br><span class="line">            maxLength = mid</span><br><span class="line">        &#125;</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right = mid - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maxLength</span><br></pre></td></tr></table></figure><p>至此我们的代码主体就撰写完毕了。完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLength</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用二分法+滚动哈希来解决</span></span><br><span class="line"><span class="comment">    滚动哈希的逻辑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    m := <span class="built_in">len</span>(nums1)</span><br><span class="line">    n := <span class="built_in">len</span>(nums2)</span><br><span class="line">    mod := <span class="type">int</span>(<span class="number">1e9</span> - <span class="number">7</span>)</span><br><span class="line">    base := <span class="number">101</span></span><br><span class="line"></span><br><span class="line">    check := <span class="function"><span class="keyword">func</span> <span class="params">(length <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        hashSet := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">        <span class="comment">// 计算nums1的初始哈希值</span></span><br><span class="line">        power := <span class="number">1</span></span><br><span class="line">        hash := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++&#123;</span><br><span class="line">            hash = (hash*base + nums1[i]) % mod</span><br><span class="line">            power = power*base % mod</span><br><span class="line">        &#125;</span><br><span class="line">        hashSet[hash] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 记录原始哈希</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算滑动窗口的每个哈希值</span></span><br><span class="line">        <span class="keyword">for</span> i := length; i &lt; m; i++&#123;</span><br><span class="line">            hash = (hash*base - nums1[i-length]*power + nums1[i]) % mod</span><br><span class="line">            <span class="keyword">if</span> hash &lt; <span class="number">0</span>&#123;</span><br><span class="line">                hash += mod</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet[hash] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算nums2的初始哈希值</span></span><br><span class="line">        hash = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++&#123;</span><br><span class="line">            hash = (hash*base + nums2[i]) % mod</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果发生碰撞，则返回真</span></span><br><span class="line">        <span class="keyword">if</span> _,exist := hashSet[hash]; exist&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算滑动窗口的每个哈希值</span></span><br><span class="line">        <span class="keyword">for</span> i := length; i &lt; n; i++&#123;</span><br><span class="line">            hash = (hash*base - nums2[i-length]*power + nums2[i]) % mod</span><br><span class="line">            <span class="keyword">if</span> hash &lt; <span class="number">0</span>&#123;</span><br><span class="line">                hash += mod</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> _,exist := hashSet[hash]; exist&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//走到这里说明没发生碰撞</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运用二分法确定最大公共子串长度</span></span><br><span class="line">    left, right := <span class="number">0</span>, min(m,n)</span><br><span class="line">    maxLength := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> left &lt;= right&#123;</span><br><span class="line">        mid := (left + right) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> check(mid)&#123;</span><br><span class="line">            <span class="keyword">if</span> mid &gt; maxLength&#123;</span><br><span class="line">                maxLength = mid</span><br><span class="line">            &#125;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(m <span class="type">int</span>, n <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> m &gt; n&#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>小贴一手用时情况🔥</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/fb526ed9340e525e85a88458840344a.png" alt="fb526ed9340e525e85a88458840344a" style="zoom:50%;" /><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>滚动哈希是一种高效处理字符串和数组子段问题的算法，通过将子段转化为哈希值，可以快速比较或匹配子段。它的核心在于利用滑动窗口，通过递推公式在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 时间内更新哈希值，避免重新计算整个子段的哈希。</p><p>滚动哈希常用于字符串匹配（如 Rabin-Karp 算法）、检测重复子串、最长公共子串等问题。它尤其适合固定长度的子段处理。通过合理选择基数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span> 和模数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，可以有效减少哈希冲突，提高算法准确性和效率。</p><p>在需要寻找最长满足某条件的子段问题中，滚动哈希通常与<strong>二分查找</strong>结合使用。二分查找确定子段长度，滚动哈希验证是否存在符合条件的子段，这种组合将时间复杂度优化为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2404CBF21EC9ECF50FF185A745A075DE.jpg" alt="2404CBF21EC9ECF50FF185A745A075DE" /></p>]]></content>
    
    
    <summary type="html">关于滚动哈希算法的原理介绍，以及实战运用。</summary>
    
    
    
    <category term="算法笔记" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rolling Hashes" scheme="http://example.com/tags/Rolling-Hashes/"/>
    
    <category term="Rabin-Karp" scheme="http://example.com/tags/Rabin-Karp/"/>
    
  </entry>
  
  <entry>
    <title>11月总结·2024</title>
    <link href="http://example.com/posts/15adc5743338/"/>
    <id>http://example.com/posts/15adc5743338/</id>
    <published>2024-11-30T12:40:37.000Z</published>
    <updated>2024-11-30T12:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>11月总结·2024</span><p>这里是11月份的总结。</p><p>不知道该说些什么好，姑且就这样吧。</p><h2 id="壹"><a class="markdownIt-Anchor" href="#壹"></a> 壹</h2><p>概述一下这个月的行程：这是一个相对宽松的月份，是我写博客以来最无所事事的一个月份了吧，大概。在决心推掉所有学生工作和比赛项目之后，我突然间有了大量时间，顿时有种无所适从的茫然感。一方面想要尽可能的利用好精力，另一方面却不知何去何从，颇有种拔剑四顾心茫然的无力感。</p><p>前半个月我姑且还在推进机器学习的笔记整理，直至中旬的校运会放了半个星期的小长假。之后便开始了解一些▇▇，顿觉路长而道远，不得不放缓了脚步慢慢思索。毕竟一旦确定了一个目标，与之所有不相干的事情都瞬时索然无味，断没有继续做下去的动力与沉着了。</p><p>剪不断，理还乱。</p><h2 id="贰"><a class="markdownIt-Anchor" href="#贰"></a> 贰</h2><p>老生常谈，来归纳一下我在十一月份的工作。</p><h3 id="软著"><a class="markdownIt-Anchor" href="#软著"></a> 软著</h3><p>本来都不想继续写这个玩意了，毕竟这东西含水量挺高，实在是没什么谈的必要。不过为了充实版面，姑且还是给交个底吧。</p><h4 id="面向深度伪造检测的攻击与防御技术v10"><a class="markdownIt-Anchor" href="#面向深度伪造检测的攻击与防御技术v10"></a> 面向深度伪造检测的攻击与防御技术V1.0</h4><p>一项拖了相当久的软著申请，还在推进中……现在的问题是预先准备的软件源代码文件代码行数少了，大概还差约300行，需要补足。然而项目源代码并不在我的本地环境，而放在了实验室的服务器上。一旦涉及到服务器，各种麻烦便接踵而至：SSH连接不上、网速太差、项目结构变动、代码运行环境……总之是很令人无语的麻烦。我现在也佛了，尽人事听天命，慢慢折腾吧就。</p><h4 id="lawclassifier-法律数据分级分类一体化平台-v10"><a class="markdownIt-Anchor" href="#lawclassifier-法律数据分级分类一体化平台-v10"></a> LawClassifier-法律数据分级分类一体化平台 V1.0</h4><p>这项软著姑且还走的比较顺利，毕竟也是实打实的付出了心血，走的也是老师公费报销的代理，所以我不用操多少心。目前已经提交了各种文档给代理，只需要静待结果就好。</p><p>这个项目完成度意外的不错，虽然说老师一毛不拔纯把学生当牛马用，但好歹项目都保存在本地，我对其拥有绝对的支配权。刚好软件工程这门课需要做一个系统进行期末汇报，这个项目就可以顺水推舟作为我这门课的期末项目了，可以说是一举两得。</p><p>值得一提的是，申请做这个项目的同学不止我一个，他们也和我想法一致，想要用这个项目作为软工的期末报告。这就会带来一个无可避免的问题：撞题——题目方向相同，在期末评分中就不可避免的存在对比和给分差异。对此，我是毫不在意的，甚至有一点骄傲。虽然我的编程技术还远达不到数一数二的水平，不过在我们专业中应该也挑不出几个开发水平更高的人了。果不其然，在确定选题后，和我撞题的同学要么默默换了方向，要么主动找我私聊想和我错开。我的评价是：你自找的😊</p><h4 id="高效能强安全的jpeg图像加密系统"><a class="markdownIt-Anchor" href="#高效能强安全的jpeg图像加密系统"></a> 高效能强安全的JPEG图像加密系统</h4><p>这是这个月闲来无事新接的一个项目，要求很简单，用学长给定的后端算法实现一个可视化图片加密系统。正好我之前有过类似的项目经验，一天之内就给他用Flask搭建好了一个简单的小网站，自己手搓的Python后端代码可能还不到200行。</p><p>不过真正的麻烦在后面，这个学长给的算法简直是字面意义上的屎山。健壮性是没有的，标准数据集是会运行出bug的，还有各种各样令人无语的地方值得吐槽，我就不一一列举了。学长也是充分发扬了提携后进的高贵情操，表示要相信后人的智慧，于是乎把所有的bug都列成了任务需求交由我们解决。我们自然是不干的，后学造旨不深，无力承此大任。于是你侬我侬，最后还是等学长慢腾腾把后端改了点参数用TXT文件发出来交由我们修改。在施行CV大法期间，我不禁感慨：这就是你JNU研究生的水平吗？着实令人一言难尽。</p><p>不过好就好在这个项目竟然真给劳务费，打了800块钱。这样一看，呕心沥血反而无人问津，草草了事却换得真金白银，实在是不知道该让人说什么好。</p><h3 id="coursera-andrew-ng"><a class="markdownIt-Anchor" href="#coursera-andrew-ng"></a> Coursera, Andrew Ng</h3><p>出于兴趣自刷的机器学习基础课程，内容通俗易懂深入浅出，我感觉很不错。我从十月底开始看，一直到十一月中旬，差不多半个月的时间看了总课时一半的内容，并且整理出了对应的笔记。不过，在神经网络的内容结束之后，我逐渐意识到我面对的是个什么样的庞然大物，再加上▇▇的影响，最终决定还是先轻轻放下缓一段时间。</p><p>我看的这些内容，现在想想，充其量也就叫做自娱自乐。如果真的想要深入去学习ML，直接上手做项目永远是学习一门工科的不二法门。<strong>Get your hands dirty</strong>，缺乏实践的学习只会是空中楼阁，而我现在的条件也实在不允许我投入大量精力去开荒一个优质项目了。</p><h3 id="os-experiment"><a class="markdownIt-Anchor" href="#os-experiment"></a> OS Experiment</h3><p>除了上面这些课程之外的内容，我还投入了部分精力去写操作系统的实验作业。不得不说比起抽象的密码学、信息论，我更喜欢很擅长看得见摸得着的东西，比如代码。所以尽管作为一门一学分的水课，我还是很认真的去做了。这门课并不难，虽说OS也是CS的四大专业课之一，但不同学校开设的OS课程水平不一。比起NKU的OS实验课设最后要求实现一个简单的操作系统，JNU只要求实现几个经典的算法，只能算是开胃的小菜。</p><p>最后也是满分拿下（）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241130162845440.png" alt="image-20241130162845440" /></p><p>贴个原文链接：<a href="https://adamben.top/posts/30b9345756ad/">OS Lab | Adam8enの8log</a></p><h3 id="攻防演练"><a class="markdownIt-Anchor" href="#攻防演练"></a> 攻防演练</h3><p>参加了校内的一个攻防演练，并不是想重拾渗透学习，只是兴致大发想要狠狠攻击学校来一吐不快:)</p><p>没什么出彩的地方，真个就是WAF套WAF，连攻击流量都过不去，还时不时有被封IP的操作，大大降低了渗透进度。当然也有可能是我技术不精导致的，姑且吐槽一下。</p><h2 id="叁"><a class="markdownIt-Anchor" href="#叁"></a> 叁</h2><p>这部分说说一些课外的书本和电影吧。</p><h3 id="书籍"><a class="markdownIt-Anchor" href="#书籍"></a> 书籍</h3><ul><li><p>《陈寅恪的最后20年》</p><p>从大语老师留下来的书单上扒拉下来的。先前去广州图书馆时，这本书陈列于顶层柜首，印象深刻，恰逢书荒就一口气读完了。</p><p>“风俗之良劣，在乎人心之厚薄”。</p></li><li><p>《鼠疫》</p><p>“加缪既是一个哲学家，也是一个作家。作为作家的身份是加缪的优势，比起不会写小说的哲学家，他的思想更易于传播。”</p><p>正是这句话勾起了我阅读的兴趣。我对加缪以及他的理念知之甚少，阅读这本书也只是一念而起。只看了一部分，还没有读完，暂且按下不表。</p></li></ul><h3 id="电影"><a class="markdownIt-Anchor" href="#电影"></a> 电影</h3><p>由于无所事事，每周五晚都会给自己放一部电影。</p><ul><li><p>《海边的曼彻斯特》</p><p>看不懂。由于缺乏生活阅历，无法与导演感同身受。这种类型的片子就像是导演的一场赛博求偶，若你能与导演两情相悦，这部电影便对你敞开大门；倘若无法言中，那么欣赏不来也是情理之中。</p><p>哀莫大于心死。</p></li><li><p>《绿皮书》</p><p>倒是很容易理解的一部电影。</p><p>“Adhere to dignity to win, self-esteem can always make you accountable”</p></li><li><p>《海上钢琴师》</p><p>看不懂*2。的确是个好故事，但主题千人千面，难以捉摸，或许是导演刻意为之吧。</p></li></ul><h2 id="肆"><a class="markdownIt-Anchor" href="#肆"></a> 肆</h2><p>吐槽一些和学习无关的事情。</p><h3 id="答辩"><a class="markdownIt-Anchor" href="#答辩"></a> 答辩</h3><p>本来接到了正式答辩的通知，十二进五，诚惶诚恐，一门心思地继续完善材料和背稿子。结果在答辩前两天，我差点下单租赁正装时接到了辅导员的电话通知我的答辩资格被取消了，原因是她看错了学院名额……当时我人在珠海瞎逛正打算去看航展，临时这么一出搞得兴趣全无。不过反应倒也没有那么大，果然比起成功，失败对我来说才是家常便饭，也早就习以为常了。相较于失败，成功会更让我感到无所适从，确实挺伤人的。</p><p>仔细反思一下，今年的答辩名额大减，几乎降至往年的一半水平，可以说是腰斩。在入选的三个人里，两位是今年的国奖，还有一位是班级团支书兼学院团总支，而我顺位第四。虽说距离入线仅差一名，但差距是一目了然的，两者之间的沟壑绝非一时能够填平。所以我被刷下来也是理所当然的，也没有多少怨言，可以说是输的心服口服。至于为什么今年学院的名额突然大砍？我不知道，也许只是运气不好。我好像从未与好运交缘，坏运气与我早已经是如影随形的存在，真是一对难兄难弟了。</p><p>不论如何，但行好事，莫问前程。事已至此，也只能继续一路狂奔了。</p><h3 id="就诊"><a class="markdownIt-Anchor" href="#就诊"></a> 就诊</h3><p>中旬时候和同学熬夜聊天，一不小心动了肝火，第二天就感到左眼剧痛，顺带又爆了几个痘。我的左眼不知何时长出来一块黄色斑点，大概已经有一年了。这次左眼疼痛复发又去照了照镜子，果不其然颜色加深了，于是只好抽了段时间去趟医院。</p><p>校医最开始给的诊断结果是结膜下出血，建议转诊，给我吓得不行。想着我才这么年轻眼睛就要爆炸了吗，不由得苦笑了几声。不过后续去了中山大学眼科医院挂号，医生说只是结膜色素痣，不是什么大事，这才放下心来。回学校的路上顺便去广州动物园逛了一圈，反正顺路，学生票才十块钱，可让我好好放松了会。</p><p>本来想说一些让人难受的话，但是想了想影响不好就删了。在这里只想说各位一定要好好保重身体。</p><p>但愿人长久，千里共婵娟。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>在老地方欣赏晚霞的时候偶然听到了公园广播在放《Don’t Know Why》，了解到了Norah Jones，自此便一发不可收拾入坑了她的歌。后来了解到这首歌的专辑《Come Away With Me》已经是2002年的产物，比我年岁更长，不免得蛐蛐自己真是无可救药，总是落后时代半拍。</p><p>我钟爱着歌中慵懒的氛围，就像生活突然放慢了脚步，伸手便能触到安逸。走在通往教室的路上，我一边听着音乐，一边让自己的思绪飘向未来。或许在某个傍晚，我可以在厨房里伴随着Norah Jones的歌声，为自己烹饪一顿温暖的晚餐；又或许，在夕阳将尽的路上放着音乐开着车，追逐着将尽未尽的暮色驱车归家。这样的生活，感觉也挺不赖。</p><p>幸福美好的彼端似乎触手可及，然而再仔细凝视当下和彼岸之间，又隔着一道深不见底的沟壑，谁也不知道下一步会不会一脚踩空。每每此时，竟奇怪的开始怀念中学。就像海上钢琴师里的那句台词：</p><blockquote><p>在琴键上，我能用有限的音符创造无限的乐章，</p><p>而在这诺大的一座城市里，什么都有，却唯独没有尽头</p></blockquote><p>在中学我可以通过有限的东西去演绎我对未来的憧憬，然而到了大学，我要学习高等数学数学分析线性代数离散数学概率论计组计网操作系统数据结构，我就像是刚刚踏入城市的1900，要做的东西太多而失去了去深究一小部分知识的耐心和勇气，最后什么都做不出来，只好怔怔地立在原地。</p><p>留给我慢慢思考的时间不多了，今后也许不会再有。就此为止吧，与其继续站在舷梯上踌躇不决，不如义无反顾地迈出下一步，至于尽头是陆地还是海洋都不重要。</p><p>朝闻道，夕死可矣。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/6b65aa1528d546543f3cd19e50aceb09.jpeg" alt="6b65aa1528d546543f3cd19e50aceb09" /></p>]]></content>
    
    
    <summary type="html">11月份的个人总结</summary>
    
    
    
    <category term="月度总结" scheme="http://example.com/categories/%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-ML-AndrewNg-Notes-Week5</title>
    <link href="http://example.com/posts/282cf3400e09/"/>
    <id>http://example.com/posts/282cf3400e09/</id>
    <published>2024-11-14T07:31:56.000Z</published>
    <updated>2024-11-14T07:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Coursera-ML-AndrewNg-Notes-Week5</span><span class='p center small'>My machine learning notes</span><p>这里是吴恩达机器学习第五周💮</p><p>这周我们继续进行神经网络的学习。</p><p>上周我们学习了神经网络的基本架构，算是一个小小的入门。这周将从在Python中部署神经网络开始，了解代码底层的细节原理。之后，我们将学习如何在神经网络中选择恰当的激活函数。最后，我们将快速的过一遍对神经网络的高级优化，以及了解额外的层类型。</p><p>视频链接在下方：</p><a class="btn-beautify block center larger" href="https://www.bilibili.com/video/BV1Bq421A74G?spm_id_from=333.788.videopod.episodes&vd_source=5e421b52b9103cce8e012430aa932553"   title="Machine Learning Specialization"><i class="far fa-hand-point-right"></i><span>Machine Learning Specialization</span></a><h2 id="neural-network-training"><a class="markdownIt-Anchor" href="#neural-network-training"></a> Neural Network Training</h2><h3 id="tensorflow-implementation"><a class="markdownIt-Anchor" href="#tensorflow-implementation"></a> TensorFlow Implementation</h3><p>我们从一个情景假设导入学习的内容。</p><blockquote><p>假如我们现在要识别一个手写数字是0还是1，搭建神经网络来完成目标。</p></blockquote><p>我们把包含数字的灰度图作为输入数据，并搭建一个神经网络模型，它大概长的如下图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241113134408233.png" alt="image-20241113134408233" style="zoom:50%;" /><p>可以看到，我们的模型包含三个层。第一个隐藏层有25个激活单元，第二个隐藏层有15个激活单元，第三个输出层只有一个激活单元，最后输出一个预测结果。那么，我们该如何把这个模型部署到代码中呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units=<span class="number">25</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">1</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">]) <span class="comment"># 指定模型</span></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=BinaryCrossentropy()) <span class="comment"># 编译模型，指定损失函数为二元交叉熵损失函数</span></span><br><span class="line"></span><br><span class="line">model.fit(X,Y,epochs=<span class="number">100</span>) <span class="comment"># 训练模型，epochs代表模型迭代训练轮数</span></span><br></pre></td></tr></table></figure><p>接下来我们来详细介绍这段代码背后的奥秘所在。</p><p>回顾一下我们之前提到过的训练模型三步走：</p><ul><li>定义模型，给出模型应该如何处理输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>与参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>。</li><li>给出损失函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LOSS</mtext></mrow><annotation encoding="application/x-tex">\text{LOSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text"><span class="mord">LOSS</span></span></span></span></span>与代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span>。</li><li>训练模型，计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J_{min}(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>时的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>。</li></ul><p>在逻辑回归中，我们是这么实现的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># define model</span></span><br><span class="line">z = np.dot(w,x) + b</span><br><span class="line">f_x = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify loss and cost</span></span><br><span class="line">loss = -y * np.log(f_x) - (<span class="number">1</span>-y) * np.log(<span class="number">1</span>-f_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train on data to minimize J</span></span><br><span class="line">w = w - alpha * dj_dw</span><br><span class="line">b = b - alpha * dj_db</span><br></pre></td></tr></table></figure><p>这些代码是对逻辑回归的数学公式最简单的实现逻辑，所幸TensorFlow已经帮我们把这些都处理好了，这使得我们可以不必花时间去编写底层代码，而只需要调用现成的函数就好了。回到之前给出的代码，我们来逐一解释代码的细节。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units=<span class="number">25</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">1</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">]) <span class="comment"># 指定模型</span></span><br></pre></td></tr></table></figure><p>这一段代码定义了模型为一个具有三层的神经网络。在每一层的定义中，只需要给出激活单元的个数与激活函数就好。在这里，我们仍然用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数作为激活函数，其实这里还有其他的激活函数可供选择来帮助我们进一步优化模型，这里留到后文细说。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(loss=BinaryCrossentropy()) <span class="comment"># 编译模型，指定损失函数为二元交叉熵损失函数</span></span><br></pre></td></tr></table></figure><p>这一步我们定义了模型的损失函数，之后模型将按照这个损失函数来定义代价函数，从而去运用梯度下降法去求得最小参数值来优化模型拟合数据集。这里我们指定损失函数为<code>BinaryCrossentropy()</code>，BinaryCrossentropy是二元交叉熵损失函数，其实就是逻辑回归的损失函数的别名。</p><p>当然还有其他损失函数。比如如果你想要搭建一个线性回归模型，那么损失函数就得采用均方误差函数，即<code>MeanSquaredError()</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.fit(X,Y,epochs=<span class="number">100</span>) <span class="comment"># 训练模型，epochs代表模型迭代训练轮数</span></span><br></pre></td></tr></table></figure><p>这行代码即指示计算机训练模型，并给定了训练的轮数<code>epochs</code>。这个<code>epochs</code>是机器学习的专有名词，也可以理解为训练时间，或者是梯度下降中的下降步数。TensorFlow会帮我们完成所有梯度下降中的细节，并且比我们自己用循环处理时运算地更快。这是因为在<code>model.fit()</code>中会自动调用<strong>反向传播算法</strong>来帮助我们更快的计算。</p><div class="note info simple"><p>什么是反向传播算法？参见：<a href="https://zhuanlan.zhihu.com/p/395323930">通俗易懂举栗子–怎么理解反向传播算法？ - 知乎</a></p></div><h2 id="activation-functions"><a class="markdownIt-Anchor" href="#activation-functions"></a> Activation Functions</h2><p>话不多说，我们直接引入三个神经网络最常用的激活函数，分别是：</p><ul><li>Linear Activation function，线性激活函数</li><li>Sigmoid，S型函数</li><li>ReLU，修正线性单元激活函数（名字很拗口，也不用特地去记）</li></ul><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241113153416154.png" alt="image-20241113153416154" style="zoom:50%;" /><p>Linear Activation function是最简单的激活函数，如果你的输出层预测结果可正可负，那么就可以采用这个激活函数作为输出层的激活函数。对于隐藏层，当有很多人说他们“没有采用任何激活函数”时，实际上就是说采用了线性激活函数。因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">g(z)=z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>，可以视为函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>根本不存在。可以证明，<span class='p red'>在神经网络的隐藏层中运用线性激活函数，将完全无法发挥神经网络的作用，效果等同于运用线性回归模型</span>。道理也很简单：线性函数的复合结果仍然是线性函数。所以一般不建议在神经网络的隐藏层中运用线性激活函数。</p><p>Sigmoid函数，也就是我们目前在所有神经元中采用的函数。如果你的输出层预测结果要求具备二元分类的性质，那么就可以采用这个函数。对于隐藏层来说，我们一般也并不采用这个函数作为隐藏层函数，绝大部分情况下，我们都是采用ReLU函数作为神经网络隐藏层的激活函数。</p><p>ReLU函数，其实就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(z)=max(0,z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>，它对于正值部分保持线性，而对小于0的部分截断为0。所以，它的输出值永远大于0，并且在隐藏层中运用ReLU函数要比Sigmoid函数的效果更好。那么紧接着问题来了，为什么ReLU函数的效果更好呢？原因有以下几点：</p><ul><li><strong>非线性行为：</strong> 由于 ReLU 会将负值截断为零，这就引入了非线性特性，使得网络能够捕捉到复杂的非线性关系。这样，通过堆叠多层使用 ReLU 的神经网络，网络能够学习到更复杂的映射。</li><li><strong>稀疏激活：</strong> 由于 ReLU 将负数部分的输出置为 0，只有正值部分的神经元会被激活。这导致了“稀疏激活”的现象——不是每个神经元都会在每次输入中都被激活，这有助于避免过拟合，同时减少计算量。</li><li><strong>梯度传递：</strong> ReLU 在正数区间的梯度为 1，这意味着在反向传播时梯度能够较好地传递。这解决了传统 sigmoid 或 tanh 激活函数中可能遇到的 <strong>梯度消失问题</strong>，使得网络能够更有效地训练。</li><li><strong>速度更快</strong>：ReLU仅仅在函数左侧有“平坦”部分，而Sigmoid函数在函数两端都含有“平坦部分”。这导致Sigmoid函数在反向传播中梯度会趋于0，而ReLU 能有效地缓解梯度消失问题（虽然在负区间有死区，但不会像 sigmoid 那样在整个区间都消失）。且ReLU函数在正数区间的导数恒为1，在梯度下降方面要比Sigmoid函数更快。</li></ul><p>所以总结：<span class='p blue'>一般情况下，神经网络的隐藏层都推荐使用ReLU函数，而输出层使用什么激活函数，取决于模型的用途</span>。当然，也有其他函数，在某些情况下使用时，性能提升会比使用ReLU函数更好一点点，但是绝大部分情况下用ReLU就够了。</p><h2 id="multiclass-classification"><a class="markdownIt-Anchor" href="#multiclass-classification"></a> Multiclass Classification</h2><p>回到手写数字识别的情景假设，现在我们对其继续拓展：</p><blockquote><p>假如我们现在要识别一个手写数字从0~9，搭建神经网络来完成目标。</p></blockquote><p>很明显，这是多分类问题。我们先前在逻辑回归的学习中已经介绍过一种方法来处理这种问题，那就是构建多个分类器对数据集进行处理，最后选择预测可能性最高的那个预测结果作为输出。</p><p>然而，这本质上是建立了多个模型对同一批数据集进行训练，这是十分低效的。我们如何在神经网络里实现一步到位呢？这就是我们接下来要引入的一个新的专门用于处理多分类问题的激活函数——Softmax函数。</p><h3 id="softmax"><a class="markdownIt-Anchor" href="#softmax"></a> Softmax</h3><p>Softmax函数是逻辑回归函数的泛化。</p><p>为了更好的理解Softmax函数，我们先给出逻辑回归函数的定义以供参考：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mi>w</mi><mo>×</mo><mi>x</mi><mo>+</mo><mi>b</mi><mspace linebreak="newline"></mspace><msub><mi>a</mi><mn>1</mn></msub><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>−</mo><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>0</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z=w\times x+b\\a_1=g(z)=\frac{1}{1+e^{-z}}=P(y=1|x)\\a_2=1-g(z)=p(y=0|x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><p>对于二元分类问题，Sigmoid函数将输出输入预测结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时的概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时的概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可以通过用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">1-a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>得到。</p><p>现在加入我们的输出结果有四个类别<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,a_3,a_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，Softmax函数要怎么处理呢？公式如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>z</mi><mn>1</mn></msub></msup><mrow><msup><mi>e</mi><msub><mi>z</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>2</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>3</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>4</mn></msub></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mtext> </mtext><mspace linebreak="newline"></mspace><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>z</mi><mn>2</mn></msub></msup><mrow><msup><mi>e</mi><msub><mi>z</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>2</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>3</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>4</mn></msub></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>2</mn><mi mathvariant="normal">∣</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mtext> </mtext><mspace linebreak="newline"></mspace><msub><mi>a</mi><mn>3</mn></msub><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>z</mi><mn>3</mn></msub></msup><mrow><msup><mi>e</mi><msub><mi>z</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>2</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>3</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>4</mn></msub></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>3</mn><mi mathvariant="normal">∣</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mtext> </mtext><mspace linebreak="newline"></mspace><msub><mi>a</mi><mn>4</mn></msub><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>z</mi><mn>4</mn></msub></msup><mrow><msup><mi>e</mi><msub><mi>z</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>2</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>3</mn></msub></msup><mo>+</mo><msup><mi>e</mi><msub><mi>z</mi><mn>4</mn></msub></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>4</mn><mi mathvariant="normal">∣</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">a_1 = \frac{e^{z_1}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}} = P(y = 1|\vec{x})\  \\a_2 = \frac{e^{z_2}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}} = P(y = 2|\vec{x})\  \\a_3 = \frac{e^{z_3}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}} = P(y = 3|\vec{x})\  \\a_4 = \frac{e^{z_4}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}} = P(y = 4|\vec{x})\ </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.110722em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.110722em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.110722em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.110722em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span></span></span></span></span></p><p>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>个可能的输出，归纳公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>z</mi><mi>j</mi></msub><mo>=</mo><msub><mover accent="true"><mi>w</mi><mo>⃗</mo></mover><mi>j</mi></msub><mo>⋅</mo><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>b</mi><mi>j</mi></msub><mspace width="1em"/><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi><mspace linebreak="newline"></mspace><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>z</mi><mi>j</mi></msub></msup><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><msub><mi>z</mi><mi>k</mi></msub></msup></mrow></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mi>j</mi><mo>∣</mo><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z_j = \vec{w}_j \cdot \vec{x} + b_j\quad j = 1, \ldots, N\\a_j = \frac{e^{z_j}}{\sum_{k=1}^{N} e^{z_k}} = P(y = j \mid \vec{x})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.000108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.512333em;vertical-align:-1.170941em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.170941em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>如果只有二分类，那么Softmax会简化为逻辑回归模型，这就是为什么说Softmax函数是逻辑回归函数的泛化。</p><p>对于Softmax的损失函数，我们定义如下。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>loss</mtext><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><msub><mi>a</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><msub><mi>a</mi><mi>n</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mi>N</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text{loss}(a_1, \ldots, a_n, y) = \begin{cases} -\log a_1 &amp; \text{if } y = 1 \\-\log a_2 &amp; \text{if } y = 2 \\\vdots \\-\log a_n &amp; \text{if } y = N \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">loss</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.252000000000001em;vertical-align:-2.876em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500200000000006em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2949899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.58999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8849900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.17999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.205010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3760000000000003em;"><span style="top:-6.0555em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.615500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.6835000000000004em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.2435em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.876em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3760000000000003em;"><span style="top:-5.376000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-3.9360000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span></span></span><span style="top:-0.5640000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.876em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其实，这就是逻辑函数的损失函数的泛化版本。对于简化前的二元交叉熵损失函数，有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\operatorname{L}(h_{\theta}(x), y) = \begin{cases}-\log(h_{\theta}(x)) &amp; \text{if } y=1 \\-\log(1-h_{\theta}(x)) &amp; \text{if } y=0\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>可以看到这两个函数的展开其实形式完全一致，原理也与逻辑回归函数相同。</p><h3 id="neural-network-with-softmax-output"><a class="markdownIt-Anchor" href="#neural-network-with-softmax-output"></a> Neural Network with Softmax Output</h3><p>如果要在神经网络中引入Softmax作为输出层的激活函数，我们需要稍微修改一下我们的模型：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241113163726678.png" alt="image-20241113163726678" style="zoom:50%;" /><p>因为最终Softmax输出的激活向量将包含10个激活值，所以输出层中要有10个激活单元。</p><p>那么，在代码中如何实现呢？按照模型三步走的策略：建立模型、指定损失函数与代价函数、训练模型匹配数据集，即可。实际上只需要稍微改动一下之前代码就行，阅读以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units=<span class="number">25</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>) <span class="comment"># 这里改动了激活单元和激活函数</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=SparseCategoricalCrossentropy()) <span class="comment"># 改动损失函数为稀疏分类交叉熵</span></span><br><span class="line"></span><br><span class="line">model.fit(X,Y,epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这段代码能够正常工作，但是<strong>Don’t use the version.</strong> 一会儿我们就会给出它的优化版本。</p><p>我们都知道计算机中储存数据的位数是有限的，所以计算时有时候会出现浮点数误差。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="number">1</span>+<span class="number">2</span>/<span class="number">10000</span></span><br><span class="line"><span class="number">1</span>.<span class="number">0002</span></span><br><span class="line">&gt;&gt;&gt; <span class="number">1</span>+(<span class="number">1</span>/<span class="number">10000</span>)-(<span class="number">1</span>-<span class="number">1</span>/<span class="number">10000</span>)</span><br><span class="line"><span class="number">0</span>.<span class="number">00019999999999997797</span></span><br></pre></td></tr></table></figure><p>回到之前的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units=<span class="number">25</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>,activation=<span class="string">&#x27;softmax&#x27;</span>) </span><br><span class="line">])</span><br><span class="line">model.<span class="built_in">compile</span>(loss=SparseCategoricalCrossentropy()) </span><br><span class="line">model.fit(X,Y,epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这里代码的处理流程实际上是先将输入经过神经网络处理，输出一个中间值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后再对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代入损失函数计算损失。这一步过程中会损失精度，我们要做的，就是去除掉这个中间值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241113165619027.png" alt="image-20241113165619027" style="zoom:50%;" /><p>比起直接传递<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>给损失函数，不如直接把激活函数代入损失函数的计算中。TensorFlow会自动排列计算项，从而使得损失计算更精确。这个损失平时很小，如果输出层的激活函数是Sigmoid倒也无所谓，但如果采用Softmax，这个损失就有点无法忽略了。</p><p>所以我们要对代码进行修改：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units=<span class="number">25</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">15</span>,activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">    Dense(units=<span class="number">10</span>,activation=<span class="string">&#x27;linear&#x27;</span>) <span class="comment"># 这里选择linear作为激活函数</span></span><br><span class="line">])</span><br><span class="line">model.<span class="built_in">compile</span>(loss=SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>)) <span class="comment"># 这里引入了新的参数 </span></span><br><span class="line">model.fit(X,Y,epochs=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这段代码的作用在于，修改输出层的激活函数为线性激活函数，这样最终输出的结果就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>z</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">z_1,z_2\cdots z_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，而非<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>a</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">a_1,a_2\cdots a_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<code>from_logits=True</code>这个参数指定模型的输出（logits）是未经softmax激活函数处理的原始分数（也称为logits）。在这种情况下，<code>SparseCategoricalCrossentropy</code> 损失函数内部会应用Softmax函数，将logits转换为概率分布，然后再计算交叉熵损失。这样优化后的代码，结果将更为可靠。</p><h2 id="optional-multi-label-classification"><a class="markdownIt-Anchor" href="#optional-multi-label-classification"></a> Optional: Multi-label Classification</h2><p>一个很容易混淆的问题就是人们往往会区分不开多分类问题与多标签分类问题。</p><p>多分类问题和多标签分类问题在任务性质和输出要求上有显著区别。多分类问题是指一个样本只能被分到一个类别中，也就是说每个样本在分类后只会有一个标签。例如，在图像分类中，如果图片内容是猫、狗或鸟，每张图片只能被归入其中一个类别，因此属于单一标签的分类。这类问题通常采用交叉熵损失函数，通过最大化正确类别的概率来训练模型。</p><p>相比之下，多标签分类问题允许一个样本同时属于多个类别，也就是说每个样本可以有多个标签。比如在文本分类中，一篇文章可能既属于&quot;体育&quot;类别，也属于&quot;科技&quot;类别。因此，模型的输出不是单一类别的概率，而是多个类别的概率值，每个类别的预测结果独立存在。多标签分类通常采用二元交叉熵损失函数，因为每个类别都是独立的二分类任务，目标是分别预测每个类别的概率。</p><p>对于神经网络来说，主要体现在最后一层的输出层的差别。多分类问题使用Softmax作为激活函数，而多标签分类问题用Sigmoid作为激活函数。当然，其对应的损失函数也需要被修改。</p><h2 id="additional-neural-network-concepts"><a class="markdownIt-Anchor" href="#additional-neural-network-concepts"></a> Additional Neural Network Concepts</h2><h3 id="advanced-optimization"><a class="markdownIt-Anchor" href="#advanced-optimization"></a> Advanced Optimization</h3><p>我们来介绍一种运用在神经网络中的高级优化算法：<span class="bubble-content">Adam算法</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Adaptive Moment Estimation，自适应矩估计</span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241114131359896.png" alt="image-20241114131359896" style="zoom:50%;" /><p>简而言之，Adam算法的作用就是<strong>自适应学习率</strong>。在传统的机器学习算法中，如果学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>过小，那么梯度下降的速度将变得缓慢；如果学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>过大，又容易出现“反复横跳”的情况。Adam算法，能够对每个参数动态的调整它们的学习率从而一定程度上优化模型。</p><p>如果要从直觉上理解Adam算法，它做的就是在上图中：</p><ul><li>如果一个参数一直在向一个方向移动，那么就增大学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，使其更快的前进。</li><li>如果一个参数出现“反复横跳”的情况，就减小学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，从而使其梯度正常下降。</li></ul><p>Adam算法在数学上的实现比较复杂，这里不做讨论。</p><div class="note danger simple"><p>Q：有了Adam算法根据各个参数自动调整其学习率，我们是否就不需要进行<strong>特征缩放</strong>了呢？</p><p>A：的确，在很多情况下，Adam 算法已经比传统的梯度下降方法更能够适应特征尺度的不同。特征缩放对于Adam算法在某种程度上来说并不是必要的。然而，<strong>特征缩放仍然是推荐的预处理步骤</strong>，对数据进行标准化或者归一化，仍然可以加速收敛，且提高系统稳定性。</p><p>所以，虽然特征缩放的效果不如在没有运用Adam算法的情况时那么显著，对数据集进行特征缩放预处理仍然是推荐的。</p></div><h3 id="additional-layer-types"><a class="markdownIt-Anchor" href="#additional-layer-types"></a> Additional Layer Types</h3><p>在之前的学习中，对于神经网络的架构，我们都默认神经网络的某一层可以访问前一层的所有数据，这种连接方式叫做<strong>全连接层</strong>。然而神经网络也不仅仅局限于全连接层，事实上还存在着其他形式的神经网络层，比如我们接下来将介绍的<strong>卷积层</strong>。</p><p>卷积层，即Convolutional Layer，和全连接层的区别在于：卷积层对于前一层的数据是部分可见的。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241114134257634.png" alt="image-20241114134257634" style="zoom:50%;" /><p>为什么采用卷积层呢？主要有两个优点：</p><ul><li>更快的运算速度。因为卷积层相比全连接层来说可见数据更为有限，所以它的计算量更小，运算速度也就更快。</li><li>只需要更少的训练数据，可以有效防止过拟合。</li></ul><p>使用卷积层时，人们又更多的架构选择。比如神经元应该查看多大的输入窗口？每层应该有多少个神经元等。这无疑给模型带来了更多复杂性，更好地模拟人脑对数据进行拟合。</p><p>除了卷积层，还有Transformer、LSTM、注意力模型等其他架构的高级神经层，可以课后搜索了解。</p><p>Coursera的这门课并没有对卷积神经网络及其他架构的神经层展开过多介绍，毕竟这门课只是一门作为入门的基础课。如果想要了解更多神经网络的内容，可以看看吴恩达开的另外一门专门 focus on CNN 的课，不过笔者截止到本文编撰的当前也还没有看过就是了。</p><p>以上就是第五周的全部学习内容！下周见~</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/D2C62FCE46B76B7B3305529FD6BBCE3D.jpg" alt="D2C62FCE46B76B7B3305529FD6BBCE3D" /></p>]]></content>
    
    
    <summary type="html">Learn more about neural network, introducing how to choose proper activation function and advanced optimization.</summary>
    
    
    
    <category term="Machine-Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    
    <category term="Neural Network" scheme="http://example.com/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-ML-AndrewNg-Notes-Week4</title>
    <link href="http://example.com/posts/e2f9bda92c94/"/>
    <id>http://example.com/posts/e2f9bda92c94/</id>
    <published>2024-11-12T13:18:13.000Z</published>
    <updated>2024-11-12T13:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Coursera-ML-AndrewNg-Notes-Week4</span><span class='p center small'>My machine learning notes</span><p>欢迎来到吴恩达机器学习课程第四周~</p><p>本周的主题是神经网络。我们要花四周的时间在这个知识点上，所以这一周我们的任务就是入门神经网络，以及对模型有一个基本的架构认知。</p><p>视频链接在下方：</p><a class="btn-beautify block center larger" href="https://www.bilibili.com/video/BV1Bq421A74G?spm_id_from=333.788.videopod.episodes&vd_source=5e421b52b9103cce8e012430aa932553"   title="Machine Learning Specialization"><i class="far fa-hand-point-right"></i><span>Machine Learning Specialization</span></a><h2 id="neural-networks"><a class="markdownIt-Anchor" href="#neural-networks"></a> Neural Networks</h2><h3 id="neurons-and-the-brain"><a class="markdownIt-Anchor" href="#neurons-and-the-brain"></a> Neurons and the Brain</h3><p>神经网络是一种很古老的算法，它最初产生的目的是制造能模拟大脑的机器。神经网络逐渐兴起于二十世纪八九十年代，应用得非常广泛。但由于各种原因，在90年代的后期应用减少了。但是最近，神经网络又东山再起了。原因有二：</p><ul><li>神经网络是一个需要大量算力的算法。随着近些年计算机硬件的不断发展，人们已经能够逐渐负担得起搭建大规模神经网络的开销。</li><li>随着计算机技术的不断普及，各行各业都开始引入计算机，产生了大量的数据。而神经网络能够最大程度的利用庞大的数据集为自己训练，以达到最好的学习效果。</li></ul><p>要理解神经网络模型的原理，我们得先讲讲大脑——毕竟，神经网络一开始就是为了模拟大脑而诞生的算法。大脑的神经元如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110192627351.png" alt="image-20241110192627351" style="zoom:67%;" /><p>相信学过初中生物的人都不会对此感到陌生。神经元由树突接收信息，然后产生神经冲动，通过轴突传递给下一个神经元，这就是一个大大简化的神经元模型。让我们再来看看神经网络：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110193136096.png" alt="image-20241110193136096" style="zoom:67%;" /><p>同样的，神经网络的工作原理也是接收一个输入，然后由多个神经元（学习模型）对输入进行计算，产生一个或多个特征值，作为下一个神经元（学习模型）的输入，这样经过迭代计算后得到的结果就是神经网络的输出。同样的，这也是一个经过大大简化的神经网络模型。</p><h3 id="neural-network-model"><a class="markdownIt-Anchor" href="#neural-network-model"></a> Neural Network Model</h3><p>让我们用一个例子对神经网络的工作方式进行具体说明。</p><blockquote><p>假如我们有一件衬衫，我们的任务是预测这件衬衫是否能够成为畅销品，于是我们搜集大量衬衫的信息尝试对其进行建模。假如我们有两个信息：衬衫的价格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>与是否畅销<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p></blockquote><p>绘制出训练集的二维图像如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110194035621.png" style="zoom:67%;" /><p>对于是否畅销这种输出明显带有0/1特征的二元分类问题，一般使用逻辑回归中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数进行拟合。此时，我们有：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>e</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mi>θ</mi><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">x=price\\a=f(x)=\frac{1}{1+e^{\theta x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>在神经网络中有一个专门的名称，叫做<strong>activation</strong>激活值，代表一个神经元向下游的其他神经元发送高输出的程度，在这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110194925174.png" alt="image-20241110194925174" style="zoom:50%;" /><p>这里，输入价格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>进入神经元中，使得神经元输出一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>，代表该成品为畅销品的概率。这里的神经元可以视为一个学习模型，或者一台微型计算机，它的工作内容就是对输入运行逻辑回归然后给出输出。真正的大脑神经元要完成的事情要复杂得多，这就是为什么神经网络是对人脑的极大简化模型。</p><p>然而人脑中并不只有一个神经元，往往是多个神经元在一起进行工作。对应到本例题中，我们假设拥有四个特征：价格、运费、该类衬衫的营销量与材料质量，并依赖这四个特征来输出最终我们认为该产品是畅销品的概率。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110200224478.png" alt="image-20241110200224478" style="zoom: 50%;" /><p>为此，我们为四个输入组合成为三个新的特征：购买负担力、商品认识与感知质量，并用三个神经元（学习模型）来模拟计算这三个新的组合特征。最后，再根据这三个特征，计算出最终的输出概率。</p><p>用神经网络的术语进行描述，即我们将特征向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>作为输入，在input layer<span class="bubble-content">输入层</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">输入数据的layer定义为输入层</span></span>中将数据输出到<span class="bubble-content">隐藏层</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">在输入层和输出层之间的layer称为隐藏层</span></span>，得到激活值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mn>1</mn><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[2]}_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mn>2</mn><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[2]}_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mn>3</mn><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[2]}_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>。这三个激活度又作为output layer<span class="bubble-content">输出层</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">输出结果的layer定义为输出层</span></span>的输入进行计算，最终输出结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mn>1</mn><mrow><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[3]}_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">3</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>。</p><div class="note info simple"><p>约定：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[i]}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.4129719999999999em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span></span>代表神经网络第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>层的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>个输出值。</p></div><p>但是在实际运用中，用人工选择组合特征实在是过于繁琐，事实上神经网络也根本不知道自己在隐藏层在计算的是购买负担力、商品认识与感知质量。现实情况下，<span class='p green'>我们根本不需要手动为神经网络指定计算的组合特征，神经网络会自己学习自己的特征，从而输出一个更为可靠的结果</span>，这就是为什么神经网络是当今世界上最强的算法之一。为了让神经网络自己去学习数据集的特征，它需要访问到上一层的所有数据，这就是为什么我们要将图片修改如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110203207729.png" alt="image-20241110203207729" style="zoom:50%;" /><p>这就是一个运用神经网络的例子。你也可以选择加入更多的隐藏层，或者在隐藏层中加入更多神经元来提升神经网络的效果。在后文会介绍如何选择神经网络架构来优化算法性能的方法。</p><h3 id="neural-network-layers"><a class="markdownIt-Anchor" href="#neural-network-layers"></a> Neural Network Layers</h3><p>让我们展开一层分析神经网络是怎么运行的。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241110205837460.png" alt="image-20241110205837460" style="zoom:50%;" /><p>将输入层记为layer0，把输入向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>输入到layer1中，并将其展开。layer1中一共有三个神经元，也就是三个学习模型，我们将其统一称为<strong>激活单元</strong>。</p><p>可以看到，每个激活单元的任务就是对输入向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>应用逻辑回归算法，由于<strong>权重</strong>和<strong>偏置</strong>不同，各个激活单元输出的激活值也各不相同。按照图中的展开图来说，可以总结式子如下，对于第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>层第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>个激活值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>a</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">a^{[i]}_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.4129719999999999em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span></span>来说：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>a</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo>⋅</mo><mi>x</mi><mo>+</mo><msubsup><mi>b</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{[i]}_j=g(w^{[i]}_j\cdot x+b^{[i]}_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>将第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>层的所有激活值用向量的形式表达出来，可以得到激活值向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">{\vec a}^{[i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9919em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9919em;"><span style="top:-3.1669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>，将作为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>层的输入向量进行运算：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>a</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup><mo>⋅</mo><msup><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msup><mo>+</mo><msubsup><mi>b</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{[i+1]}_j=g(w^{[i+1]}_j\cdot {\vec a}^{[i]}+b^{[i+1]}_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.07523em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9919em;"><span style="top:-3.1669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>有了这个公式，就可以根据前一层的数据计算任意一层的激活值。</p><p>我们可以知道：每一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑎</mi></mrow><annotation encoding="application/x-tex">𝑎</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>都是由上一层所有的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑥</mi></mrow><annotation encoding="application/x-tex">𝑥</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>和每一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑥</mi></mrow><annotation encoding="application/x-tex">𝑥</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>所对应的权重与偏置决定的。我们把这样从左到右的算法称为<strong>前向传播算法</strong>( FORWARD PROPAGATION )</p><div class="note info simple"><p>权重和偏置是什么？其实就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>，前者为参数的系数，后者为常数项。</p></div><p>总结一下，神经网络的工作方式就是：</p><blockquote><p>每一层输入一个数字向量并应用一堆逻辑回归单元，然后计算另一个数字向量，这个向量然后从一层传递到另一层，直到你得到最终输出层的计算，这就是一个神经网络的预测。</p></blockquote><h3 id="tensorflow-implication"><a class="markdownIt-Anchor" href="#tensorflow-implication"></a> TensorFlow Implication</h3><p>从神经网络开始将逐渐增多代码的分量，我们来学习如何利用TensorFlow简单的部署神经网络模型。</p><blockquote><p>假如我想用神经网络预测一杯咖啡是否好喝（0/1），并且拥有两个特征：咖啡温度与打磨咖啡的持续时间。</p></blockquote><p>输入以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>,<span class="number">17.0</span>]])  <span class="comment"># 将输入向量x表示为一个一维矩阵</span></span><br><span class="line">layer_1 = Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>) <span class="comment"># 指定生成一个包含3个激活单元的神经层</span></span><br><span class="line">a1 = layer_1(x) <span class="comment"># 计算x得到激活值a1,a1将包含三个元素</span></span><br></pre></td></tr></table></figure><p>代码中的<code>Dense</code>代表“密集层”，是神经网络层的别名。<code>Dense</code>函数接收参数后，返回值也为一个函数，即<code>layer_1</code>。将特征向量<code>x</code>作为<code>layer_1</code>的参数，即可计算出该层的激活值<code>a1</code>。</p><p>假设我们要在<code>layer_2</code>中输出结果，即作为输出层，则可以仿制编写代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layer_2 = Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>) <span class="comment"># layer_2只有一个激活单元，所以最后的结果向量只包含一个元素</span></span><br><span class="line">a2 = layer_2(a1) <span class="comment"># 得到结果，为咖啡好喝的概率</span></span><br></pre></td></tr></table></figure><p>最后得到的<code>a2</code>是咖啡是否好喝的概率值，但我们要求输出二元的结果好喝 or not，所以需要给<code>a2</code>设置一个阈值，来决定最后输出0还是1。这个阈值可以随意取，不过一般都取0.5，当然你想取0.7什么的也行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ax &gt;=<span class="number">0.5</span>:</span><br><span class="line">    yhat=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">yhat=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>还有必要提一嘴，由于历史遗留原因，TensorFlow和Numpy各自用来表示数据的方式不同。在神经网络中，特征向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>是一个向量，但是在Numpy中必须要用<code>numpy([[200.0,17.0]])</code>来表示，而这其实是一个一维矩阵的表示方法。理论和实践中运用总会有偏差，要记住在Python代码中应该用正确的形式表达特征向量。</p><p>除此之外，经过<code>layer_1</code>函数计算后得到的激活值<code>a1</code>的形式也发生了改变，如果你在代码中打印出<code>a1</code>，你将会得到一个张量。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">&gt;&gt;&gt;tf.Tensor([[<span class="number">0.000000e+00</span> <span class="number">1.836337e-15</span> <span class="number">8.152347e-09</span>]], shape=(<span class="number">1</span>, <span class="number">3</span>), dtype=float32)</span><br></pre></td></tr></table></figure><p>不难发现，张量的第一个参数代表其计算得到的一维矩阵，第二个参数描述了矩阵的特征（即一行三列），第三个参数表示矩阵中元素的数据是32位的浮点数。从技术上来说，张量要比矩阵更为通用，但是在本课程范围内，可以将张量视为表示矩阵的一种形式。</p><p>你也可以将张量转换为Numpy数组的表示形式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a1.numpy())</span><br><span class="line">&gt;&gt;&gt;[[<span class="number">0.000000e+00</span> <span class="number">1.836337e-15</span> <span class="number">8.152347e-09</span>]]</span><br></pre></td></tr></table></figure><p>且对于<code>Dense()</code>函数来说，其传入参数是张量抑或是Numpy形式的矩阵都是可以的。</p><p>你可以自己尝试运行下面的测试代码查看结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x=np.array([[<span class="number">200.0</span>,<span class="number">17.0</span>]])</span><br><span class="line">layer_1=tensorflow.keras.layers.Dense(units=<span class="number">3</span>,activation=<span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a1=layer_1(x)</span><br><span class="line"></span><br><span class="line">layer_2=tensorflow.keras.layers.Dense(units=<span class="number">1</span>,activation=<span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a2=layer_2(a1)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"><span class="built_in">print</span>(a1.numpy())</span><br><span class="line"><span class="built_in">print</span>(a2.numpy())</span><br></pre></td></tr></table></figure><p>现在我们来使用TensorFlow搭建一个神经网络架构。假设我们有数据集如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241111205452242.png" alt="image-20241111205452242" style="zoom:50%;" /><p>按照机器学习训练的基本流程，首先我们导入训练数据集来训练模型，然后输入待预测的输入得到预测值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>。故编写代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">layer_1 = Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>) </span><br><span class="line">layer_2 = Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)</span><br><span class="line">model = Sequential([layer_1,layer_2]) <span class="comment"># 将两个密集层连接在一起</span></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">200.0</span>,<span class="number">17.0</span>],</span><br><span class="line">              [<span class="number">120.0</span>,<span class="number">5.0</span>],</span><br><span class="line">              [<span class="number">425.0</span>,<span class="number">20.0</span>],</span><br><span class="line">              [<span class="number">212.0</span>,<span class="number">18.0</span>]])</span><br><span class="line">y = np.array([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(...) <span class="comment"># 编译模型，这部分先省略</span></span><br><span class="line">model.fit(x,y) <span class="comment"># 拟合数据</span></span><br><span class="line"></span><br><span class="line">model.predict(x_new) <span class="comment"># 将输出预测值yhat</span></span><br></pre></td></tr></table></figure><p>对于代码的前三行，还可以进行进一步简化。<code>layer_1</code>与<code>layer_2</code>并不一定需要显式表达，可以直接嵌入<code>Sequential()</code>中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Sequential([Dense(units=<span class="number">3</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>),</span><br><span class="line">                   Dense(units=<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)])</span><br></pre></td></tr></table></figure><h3 id="neural-network-implementation-in-python"><a class="markdownIt-Anchor" href="#neural-network-implementation-in-python"></a> Neural Network Implementation  in Python</h3><p>这一小节主要来介绍TensorFlow中的Dense层的底层实现，来帮助你理解<strong>向前传播算法</strong>是怎么工作的。这一小节是本周内容中最后一节有关代码的部分，掌握这部分内容有助于训练模型时调试代码，不过如果暂时不想涉及底层实现的话，也可以直接跳过这一小节。</p><p>观察下面这幅图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241112195619167.png" alt="image-20241112195619167" style="zoom:50%;" /><p>在得到最终的结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec{a}^{[2]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>前，代码都做了些什么呢？</p><p>回顾我们之前提到过的公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>a</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo>⋅</mo><mi>x</mi><mo>+</mo><msubsup><mi>b</mi><mi>j</mi><mrow><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{[i]}_j=g(w^{[i]}_j\cdot x+b^{[i]}_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.412972em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其实只要按照这个公式实现代码就可以了，阅读下面的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w1_1 = np.array([<span class="number">1</span>,<span class="number">2</span>]) <span class="comment"># 注意，这里w1_1的表现形式是一个一维数组</span></span><br><span class="line">b1_1 = np.array([-<span class="number">1</span>])</span><br><span class="line">z1_1 = np.dot(w1_1,x)+b1_1 <span class="comment"># 对w1_1和x运用点乘，并加上b1_1</span></span><br><span class="line">a1_1 = sigmoid(z1_1) <span class="comment"># 结果代入sigmoid函数计算激活值</span></span><br></pre></td></tr></table></figure><p>可以说代码实现与公式分毫不差，上面只展示了计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><msub><mi>a</mi><mn>1</mn></msub><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec {a_1}^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1419em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9919em;"><span style="top:-3.1669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>的部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><msub><mi>a</mi><mn>2</mn></msub><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec {a_2}^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1419em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9919em;"><span style="top:-3.1669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><msub><mi>a</mi><mn>3</mn></msub><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec {a_3}^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1419em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9919em;"><span style="top:-3.1669em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>计算同理。要计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec {a}^{[2]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>的话也很简单，只需要把输入参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>替换成前一层计算出的激活值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\vec {a}^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span></span></span></span></span>就可以了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w2_1 = np.array([-<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment"># 这里的w有三个参数，对应第一层有三个激活单元</span></span><br><span class="line">b2_1 = np.array([<span class="number">3</span>])</span><br><span class="line">z2_1 = np.dot(w2_1,a1)+b2_1 </span><br><span class="line">a2_1 = sigmoid(z2_1)</span><br></pre></td></tr></table></figure><p>这就是我们由数学公式推断出的底层代码写法，可以看到代码中有很多重复的部分，所以在Python中，我们可以继续对其写法进行优化。这就是为什么我们引入了<code>Dense()</code>函数和<code>Sequential()</code>函数。来看看这两个函数的底层是个怎么个事。</p><p>在实际中，我们把三个权重向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mn>1</mn><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">w_1^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mn>2</mn><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">w_2^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mn>3</mn><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">w_3^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>整合在一起得到一个权重矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">W^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>，同理偏置也可以进行整合为一个偏置向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">b^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241112201234647.png" alt="image-20241112201234647" style="zoom:50%;" /><div class="note danger simple"><p>W权重矩阵中，是列向量而非行向量代表原先的权重向量。比如对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>w</mi><mn>1</mn><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">w_1^{[1]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span></span>来说，应该取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">]</span></span></span></span>而不是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,-3,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">]</span></span></span></span>。</p></div><p>有了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">W^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">b^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>，我们就可以给出<code>Dense()</code>与<code>Sequantial()</code>函数的定义，阅读下面的代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in,W,b</span>):</span><br><span class="line">    units = W.shape[<span class="number">1</span>] <span class="comment"># 取列的数量，代表激活单元的数量</span></span><br><span class="line">    a_out = np.zero(units) <span class="comment"># 将输出的激活值初始化为元素个数为units的向量</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(units):</span><br><span class="line">        w = W[:,j] <span class="comment"># 切片操作，代表取出W矩阵的第j列</span></span><br><span class="line">        z = np.dot(w,a_in) + b[j]</span><br><span class="line">        a_out[j] = g(z) <span class="comment"># 激活函数g在dense函数外部被定义，可以是sigmoid或其他函数</span></span><br><span class="line">    <span class="keyword">return</span> a_out</span><br></pre></td></tr></table></figure><p>对于<code>Sequantial()</code>函数，有：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sequential</span>(<span class="params">x</span>):</span><br><span class="line">    a1 = dense(x,W1,b1)</span><br><span class="line">    a2 = dense(a1,W2,b2)</span><br><span class="line">    a2 = dense(a2,W3,b3)</span><br><span class="line">    a2 = dense(a3,W4,b4)</span><br><span class="line">    f_x = a4</span><br><span class="line">    <span class="keyword">return</span> f_x</span><br></pre></td></tr></table></figure><p>这就是Python中的底层实现逻辑，其实对于资深的Pythoner来说，看到代码就应该能对底层实现架构猜的八九不离十。不过为了清晰起见，这里还是把底层的代码明确地给了出来，方便理解。</p><div class="note info simple"><p>事实上，对于<code>Dense()</code>函数，还有进一步的优化方法。之所以我们约定在W权重矩阵中，是列向量而非行向量代表原先的权重向量，就是为了这一刻——用向量化计算代替循环。如果你有线性代数基础，知道矩阵的乘法，那么你可以对下方的代码感到十分的心领神会：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in,W,b</span>):</span><br><span class="line">    z = np.matmul(a_in,W) + b <span class="comment"># a_in与W进行矩阵乘法</span></span><br><span class="line">    a_out = g(z)</span><br><span class="line">    <span class="keyword">return</span> a_out</span><br></pre></td></tr></table></figure></div><h3 id="is-there-a-path-to-agi"><a class="markdownIt-Anchor" href="#is-there-a-path-to-agi"></a> Is There a Path to AGI?</h3><p>在本周学习的最后一部分，我们来谈一谈AGI，即<span class="bubble-content">广义人工智能</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">artificial general intelligence</span></span>。</p><p>在说AGI之前，我们先来说说AI。大部分人对于AI这个词来说都不陌生，但是现在，社会上对于AI的炒作已经到了一个不恰当的地步，麻烦的是，AI这个词其实包含有两个意思差别很大的概念，所以分清楚它们是有必要的。这两个词就是：</p><ul><li>ANI，artificial narrow intelligence，狭义人工智能。</li><li>AGI，artificial general intelligence，广义人工智能。</li></ul><p>ANI即用于专门处理某一个特定问题的AI，比如自动驾驶、智能语音、人脸识别、工厂加工等。不可否认的是ANI在近几年的确取得了长足的进步，他们中的很多算法已经在现实世界中开始发挥巨大的作用。但是，这往往给人们带来一种错觉，那就是相比于ANI，AGI也同样取得了巨大的进展，事实却并非如此。</p><p>AGI，是指广义的人工智能，它可以完成一切泛人类的活动，比如推理、情感理解、自我意识以及在不确定或新的情境下迅速学习的能力，被誉为人工智能研究中的“圣杯”。在很多文学作品中出现的人工智能往往都是指AGI，像是《底特律：变人》。这类AI别说现实中取得多大进步了，就连能否被实现现在都饱受争议。</p><p>毕竟，正如一开始所提到的，神经网络算法的初衷是模拟大脑中的神经元来达到模拟人类大脑的目的。在这篇文章中，我们为每个“神经元”选用了逻辑回归函数作为其“思考方式”，然而大脑的神经元所要处理的事情远远比简单的逻辑回归复杂的多。况且，迄今为止我们对于人类大脑到底是如何思考的原理还几乎一无所知，这对于AGI来说无疑是雪上加霜。换句话说，用现在的算法去模拟大脑思考几乎不可能。强如ChatGPT，也不过是一款功能强大的，语言模拟方面的ANI。</p><p>不过，AndrewNg仍然对此持有希望，它给出了以下事实：</p><blockquote><ol><li>研究证明，将动物中用于处理听觉的大脑皮层和听觉神经切断，转而接入视觉神经，最后动物的听觉皮层将学会“看”；同样的，将用于处理触觉的大脑皮层区域对接视觉神经，那么触觉皮层也会学会“看”东西。</li><li>研究人员将摄像头绑在人的额头上，摄像头将输出前方的低灰度图像到一块电板上，电板将根据图像像素的灰度大小输出高低电压。将电板置于盲人的舌头上，能让盲人通过舌头来恢复部分对环境的感知。</li><li>盲人通过训练，可以像蝙蝠和海豚一样，学会用弹舌来一定程度上回声辨位。</li><li>将一块只会由处于北方的电极发电的电圈系在腰上，人类可以像鸽子一样通过磁极来确认方向。</li><li>在青蛙的头顶移植第三只眼，青蛙可以学会使用额外的眼睛。</li></ol></blockquote><p>这些证据似乎在暗示一个事实：大脑似乎可以实现任意的功能，而这只取决于输入大脑的数据为何。也就是说，大脑是否存在一个<strong>单一学习算法</strong>，只要给定特定的数据，大脑就能够自动学习这些数据从而输出想要的结果呢？如果我们找到了这个<strong>单一学习算法</strong>，再将其运用于神经网络中，是否就可以实现AGI了呢？</p><p>当然这些都是猜测，大脑中也有可能存在少数或者更多其他的算法。不过，这至少给了我们希望，也许有一天，人类真的可以实现AGI。到了那时，想必又是一个人与机器人共存的崭新新世界。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/123363067_p0.jpg" alt="123363067_p0" /></p>]]></content>
    
    
    <summary type="html">Starting to learn about neural network of its architecture, with implementation in Python.</summary>
    
    
    
    <category term="Machine-Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    
    <category term="Neural Network" scheme="http://example.com/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-ML-AndrewNg-Notes-Week3</title>
    <link href="http://example.com/posts/3da985e4d47b/"/>
    <id>http://example.com/posts/3da985e4d47b/</id>
    <published>2024-11-07T02:54:12.000Z</published>
    <updated>2024-11-07T02:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Coursera-ML-AndrewNg-Notes-Week3</span><span class='p center small'>My machine learning notes</span><p>这里是吴恩达机器学习视频的Week3部分，笔记如下。</p><p>这周的主题是逻辑回归。</p><p>在要求输出二元的离散预测结果时，线性回归的拟合效果很差。所以我们引入了逻辑回归，是目前最为流行的一种广泛应用于统计学和机器学习的预测分析方法。尽管它的名字中有“回归”二字，但它实际上是一种分类算法，特别是用于二分类问题。此外，还介绍了机器学习中欠拟合和过拟合的问题，以及用于解决过拟合问题的正则化方法。</p><p>视频链接在下方：</p><a class="btn-beautify block center larger" href="https://www.bilibili.com/video/BV1Bq421A74G?spm_id_from=333.788.videopod.episodes&vd_source=5e421b52b9103cce8e012430aa932553"   title="Machine Learning Specialization"><i class="far fa-hand-point-right"></i><span>Machine Learning Specialization</span></a><h2 id="logistic-regression"><a class="markdownIt-Anchor" href="#logistic-regression"></a> Logistic Regression</h2><h3 id="classification"><a class="markdownIt-Anchor" href="#classification"></a> Classification</h3><p>在前两周，我们学习了线性回归的方法来预测数据，比如房价预测模型。但如果应用场景要求给出二元离散结果的预测值（即二元分类问题），线性回归方程得到的结果较差。</p><p>让我们假设有以下场景：区别一个肿瘤是恶性的还是良性的。</p><p>给定数据集包含肿瘤的大小与检测结果键值对，检测结果作为因变量。因变量可能属于两个类：正向类或负向类。为了表示方便起见，我们用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>表示负向类，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>表示正向类，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y\in 0,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span>。如果使用线性回归方程进行模拟，得到的图像可能如下所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241104111149863.png" alt="image-20241104111149863" style="zoom:50%;" /><p>我们的输出只要求出现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>两种情况，但线性回归方程是连续的，它可能会输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.7</mn></mrow><annotation encoding="application/x-tex">0.7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span></span></span></span>，这时该怎么解释结果呢？也许我们可以通过设置一个决策边界来解决：定义模型输出大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn></mrow><annotation encoding="application/x-tex">0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>的结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，而输出小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn></mrow><annotation encoding="application/x-tex">0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>的结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>但是，这又会出现新的问题：假如此时出现了一个远远偏离于原回归直线方程的数据点。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241104113514713.png" alt="image-20241104113514713" style="zoom: 33%;" /><p>那么，此时的回归直线方程将发生改变，导致决策边界产生<strong>偏移</strong>。在原来的情况，纵轴<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn></mrow><annotation encoding="application/x-tex">0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>可能对应于决策边界横轴的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>cm，但加入一个新的数据点后，新的决策边界可能变为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">x+a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>cm。可以看到原来的恶性数据点在新的情况中将被模型错误地预测为良性，这是不可接受的。</p><p>为了解决二分类问题，我们引入逻辑回归算法，这可能是世界上应用最广泛的分类算法。</p><div class="note info simple"><p>你可能会问：为什么不用非线性回归方程呢？</p><p>的确，非线性回归方程比线性回归方程更加灵活，在某种程度上也能取得比线性回归方程更好的效果。然而非线性回归方程仍然面临输出范围与模型选择的问题，需要更多的参数调整，也更为复杂。所以，仍然不如使用逻辑回归。</p></div><h3 id="hypothesis-representation"><a class="markdownIt-Anchor" href="#hypothesis-representation"></a> Hypothesis Representation</h3><p>引入逻辑回归，模型假设是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = g(\theta^T X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>。其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>代表特征向量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>代表逻辑函数。一般<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数，公式为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi mathvariant="normal">e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">g=\frac{1}{1+\mathrm{e}^{-z}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">e</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><p>该函数的图像如下所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241104115444634.png" alt="image-20241104115444634" /></p><p>不难发现，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>是一个很大的数时，输出将无限趋近于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>是一个很小的数时，结果相反。</p><p>将逻辑函数代入模型中，得完整的模型为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi mathvariant="normal">e</mi><mrow><mo>−</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">h_{\theta}(x)=\frac{1}{1+\mathrm{e}^{-\theta^T X}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.125635em;vertical-align:-0.804195em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.279135em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">e</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.830865em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7740928571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.804195em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>回到肿瘤预测的情形下。在参数确定的情况下，这个模型的输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>是肿瘤的大小，模型的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>是预测该肿瘤为恶性或良性的概率。比如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0.7</mn></mrow><annotation encoding="application/x-tex">h_{\theta}(x)=0.7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span></span></span></span>，说明输入有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">70\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">7</span><span class="mord">0</span><span class="mord">%</span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi mathvariant="normal">%</mi><mn>70</mn><mo>=</mo><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">1-\%70=30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">%</span><span class="mord">7</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">%</span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>一般，我们约定用如下式子来表示“模型预测”：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>X</mi><mo separator="true">;</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(X)=P(y=1|X;\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></span></p><p>即该模型输出：给定输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>与参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的概率。</p><h3 id="decision-boundary"><a class="markdownIt-Anchor" href="#decision-boundary"></a> Decision Boundary</h3><p>在前面我们提了一嘴决策边界，现在我们来详细的讲讲这一点，来理解逻辑回归到底是在干什么。</p><p>在逻辑回归中，我们预测如下：</p><ul><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">h_{\theta}(x)≥0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>时，预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>＜</mtext><mn>0.5</mn></mrow><annotation encoding="application/x-tex">h_{\theta}(x)＜0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">＜</span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>时，预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li></ul><p>代入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>中，可得：</p><ul><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">z≥0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">g(z)≥0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>,，此时预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">z&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">g(z)&lt;0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>,，此时预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li></ul><p>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>展开，以得到关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的一个不等式。即：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta X≥0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta X&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li></ul><p>为便于展示，我们假设有一个模型，它具有两个特征。此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>θ</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(\theta X)=(\theta_0+\theta_1x_1+\theta_2x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\theta=[-3,1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，则当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi><mo>=</mo><mo>−</mo><mn>3</mn><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta X=-3+x_1+x_2≥0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106102132463.png" alt="image-20241106102132463" style="zoom:67%;" /><p>做出方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>3</mn><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">-3+x_1+x_2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>所对应的直线，该直线就是决策边界。可以看到，决策边界划分了数据集，在直线上方（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi><mo>=</mo><mo>−</mo><mn>3</mn><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta X=-3+x_1+x_2≥0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>）的数据被预测为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，而在直线下方（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi><mo>=</mo><mo>−</mo><mn>3</mn><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta X=-3+x_1+x_2&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>）的数据则被预测为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>需要注意的是，逻辑回归模型的决策边界通常是直线的，因为它通过一个线性函数（即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mi>X</mi></mrow><annotation encoding="application/x-tex">\theta X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>）来进行分类。但如果数据集分类长的像下图所示呢？</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106102958257.png" alt="image-20241106102958257" style="zoom:67%;" /><p>可以通过特征变换引入二次项特征来拟合更复杂的模型边界。比如可以引入特征向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">X=[x_1,x_2,x_1^2,x_2^2,x_1x_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，设置模型参数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\theta=[-1,0,0,1,1,0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">]</span></span></span></span>。此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>θ</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(\theta X)=(x_1^2+x_2^2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，决策边界为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_1^2+x_2^2=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，是一个半径为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的圆。</p><p>如果需要适应更加复杂的决策边界，可以引入更复杂的模型。</p><h3 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss Function</h3><p>在线性回归中，我们是通过梯度下降法计算代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>的最小值情况来优化参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>。但是在逻辑回归中，不能够直接套用线性回归的优化方法。</p><p>对于线性回归，其代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>定义为所有模型误差的平方和。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{2m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>从理论上来说，我们可以继续在逻辑回归中套用这个代价函数。但是当我们将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数带入到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>中时，得到的代价函数将是一个非凸函数，且图像将出现“震荡”。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106104123798.png" alt="image-20241106104123798" style="zoom:67%;" /><p>这意味着此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>将出现多个局部最小值，梯度下降函数将很难找到全局最小值来得到最优的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>。这是因为由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数输出的非线性性质，即使是输入小的变化，也可能导致输出较大的变化，从而使得误差的平方波动幅度增大。</p><div class="note info simple"><p>sigmoid 函数的性质使得：</p><ul><li>当输出接近 0 或 1 时，导数趋近于 0，导致误差对参数的敏感性降低。</li><li>当输出接近 0.5 时，导数达到最大，导致误差对参数变化的敏感性增强。</li></ul></div><p>于是，我们重新定义逻辑回归的代价函数为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{m} \sum_{i=1}^{m} \operatorname{L}(h_{\theta}(x^{(i)}), y^{(i)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>y</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\operatorname{L}(h_{\theta}(x), y) = \begin{cases}-\log(h_{\theta}(x)) &amp; \text{if } y=1 \\-\log(1-h_{\theta}(x)) &amp; \text{if } y=0\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">L</span></span></span></span></span>代表损失函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">LOSS</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{LOSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">L</span><span class="mord mathrm">O</span><span class="mord mathrm">S</span><span class="mord mathrm">S</span></span></span></span></span>。</p><div class="note info simple"><p>你可以能会好奇，这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">LOSS</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{LOSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mop"><span class="mord mathrm">L</span><span class="mord mathrm">O</span><span class="mord mathrm">S</span><span class="mord mathrm">S</span></span></span></span></span>函数是怎么得到的呢？答案是运用了统计学中的最大似然法，读者可以自行前往了解。</p></div><p>这个函数很有意思，我们观察一下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\operatorname{L}(h_{\theta}(x), y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的图像。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106105525489.png" alt="image-20241106105525489" /></p><p>可以看到，新的代价函数意义在于：</p><ul><li>当实际的结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的增大，损失将无限趋近于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；反之，则损失无限接近于无穷大。</li><li>当实际的结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>是，随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的减小，损失将无限趋近于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；反之，则损失无限接近于无穷大。</li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>即模型预测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的概率，所以新的代价函数能够很好的描绘出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数的损失情况。将构建的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\operatorname{L}(h_{\theta}(x), y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>函数简化如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">L</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>y</mi><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\operatorname{L}(h_{\theta}(x), y) = -y \log(h_{\theta}(x)) - (1 - y) \log(1 - h_{\theta}(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>代入到代价函数中，得到逻辑回归的代价函数为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">[</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">J(\theta) = -\frac{1}{m} \sum_{i=1}^{m} \left[ y^{(i)} \log(h_{\theta}(x^{(i)})) + (1 - y^{(i)}) \log(1 - h_{\theta}(x^{(i)})) \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span></span></span></span></span></p><p>更重要的是，该函数是一个凸函数。如果计算该函数的二阶导数，可以证明其恒大于0。这意味着在优化过程中，任何局部最小值也是全局最小值，提供了更好的收敛性和稳定性。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106110510462.png" alt="image-20241106110510462" style="zoom: 67%;" /><h3 id="gradient-descent"><a class="markdownIt-Anchor" href="#gradient-descent"></a> Gradient Descent</h3><p>既然我们现在有了新的代价函数，我们就可以对其运用梯度下降法来求解最小参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>。新的代价函数是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">[</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">J(\theta) = -\frac{1}{m} \sum_{i=1}^{m} \left[ y^{(i)} \log(h_{\theta}(x^{(i)})) + (1 - y^{(i)}) \log(1 - h_{\theta}(x^{(i)})) \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span></span></span></span></span></p><p>对其运用梯度下降法，即特征向量的每个元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\theta_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>减去学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\theta_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>微分项的乘积。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>α</mi><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_j = \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.343548em;vertical-align:-0.972108em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p><p>对其求导后得到：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\theta_{j} = \theta_{j} - \alpha \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{j}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span></span></p><div class="note danger simple"><p>你可能会发现一个事实：逻辑回归的梯度下降系数计算法在形式上和线性回归中是一样的。但是要注意这两个并不是同一个算法，因为彼此对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的定义不一样。</p><p>在线性回归中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = \theta^{T} X = \theta_{0} x_{0} + \theta_{1} x_{1} + \theta_{2} x_{2} + \cdots + \theta_{n} x_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>在逻辑回归中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">h_\theta(x) = \frac{1}{1 + e^{-\theta^T x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.402304em;vertical-align:-0.557196em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5011349999999997em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9840928571428572em;"><span style="top:-2.984092857142857em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.698092857142857em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.97733em;"><span style="top:-2.97733em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.557196em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></div><p>这就是逻辑回归算法的全部内容：代价函数与其优化策略。需要注意的是，逻辑回归仍然通用线性回归的一些优化技巧，比如监测梯度下降、提倡向量化计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>与特征缩放。</p><h3 id="multiclass-classification_-one-vs-all"><a class="markdownIt-Anchor" href="#multiclass-classification_-one-vs-all"></a> Multiclass Classification_ One-vs-all</h3><p>我在b站看的视频资源里没有包含这一节的内容，但是GitHub上的笔记却有。所以这一节可以算作拓展，有兴趣的读者可以了解一下，我个人也觉得这一节的内容很有用。</p><p>我们先前已经学习了如何通过逻辑回归解决二分类问题，但如果我们需要进行多分类呢？比如一个病人因为鼻塞来到你的诊所，他可能并没有生病，用𝑦=1这个类别来代表；或者患了感冒，用𝑦=2来代表；或者得了流感用𝑦=3来代表。</p><p>显而易见继续沿用二分类模型将无法解决问题，因为逻辑回归只存在正负（或者是0 1）两种预测状态。比较直观的理解是当你有两个特征时，决策边界是一条直线——它只能将数据集划分为两片区域，而多分类时你的数据集看起来将像这样。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106225506944.png" alt="image-20241106225506944" /></p><p>如何处理多分类问题？其实要处理起来也很简单，简单到用一句话就能概括：<span class='p red'>运用多次二元分类</span>。更具体的说，当我们在处理三角形数据时，可以把叉叉元素和矩形元素视为同一种结果，即非三角形元素。同理，对剩下两个元素也可以进行类似的处理，<span class='p yellow'>最终得到的效果等同于在数据集上画出三条决策边界</span>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241106230159172.png" alt="image-20241106230159172" /></p><p>所以，我们的处理方法是：</p><ul><li>依次建立多个分类器<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>h</mi><mi>θ</mi><mi>i</mi></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}^i(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1077719999999998em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，将得到的一系列模型标记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>h</mi><mi>θ</mi><mi>i</mi></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mi>i</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">;</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}^i(x)=p(y=i|x;\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1077719999999998em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>⋯</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i=(1,2,3\cdots k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></li><li>在需要进行预测时，将所有分类机都运行一遍，然后对每一个输入变量，选择可能性最大的输出变量，即变量的最终预测结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>max</mi><mo>⁡</mo></mo><mi>i</mi></msub><msubsup><mi>h</mi><mi>θ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max_i h_\theta^{(i)}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3461079999999999em;vertical-align:-0.30130799999999996em;"></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.398692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.2197999999999998em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30130799999999996em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></li></ul><p>这就是多类别分类问题，以及一对多的方法，通过这个小方法，你现在也可以将逻辑回归分类器用在多类分类的问题上。</p><h2 id="regularization"><a class="markdownIt-Anchor" href="#regularization"></a> Regularization</h2><h3 id="the-problem-of-overfitting"><a class="markdownIt-Anchor" href="#the-problem-of-overfitting"></a> The Problem of Overfitting</h3><p>现在我们来讨论过拟合（Overfitting）的问题，来看以下三幅图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241107092519177.png" alt="image-20241107092519177" style="zoom: 50%;" /><p>第一幅图采取线性回归模型去拟合数据，可以看出来拟合效果并不是很好。有一些数据点距离回归直线的距离较远，意味着此时的代价函数仍然是比较大的。这种情况我们称之为<span class='p yellow'>欠拟合（Underfit）</span>，也就是说此时我们的模型不能很好的拟合训练集。</p><p>第二幅图采取非线性回归模型去拟合数据，此时的拟合效果刚刚好。可以看到二次函数曲线差不多刚好经过了每个数据点，此时的代价函数相对欠拟合较小。这种情况没有特定的称呼，但我们可以叫它<span class='p green'>刚刚好（Just right）</span>。</p><p>第三幅图就很耐人寻味了。它使用了大量高维的特征去拟合数据，甚至可以使得拟合曲线恰好经过每一个数据点。也就是说，在引入大量特征后，我们甚至可以把代价函数降为0。不过从图像上来看，这个模型显然太准确了，它过于强调拟合原始数据，而丢失了算法的本质，导致其在预测新数据时会表现的很差。这种情况，我们就称之为<span class='p red'>过拟合（Overfit）</span>。</p><p>分类问题中也存在过拟合的问题，观察以下三幅图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241107093441097.png" alt="image-20241107093441097" style="zoom:50%;" /><p>从多项式的角度来说可以总结如下：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>的次数越高，拟合效果越好，但相应的可预测能力就会变差。问题在于，我们如何处理过拟合现象呢？这就是我们下半篇要讨论的问题，一般来说有三种办法：</p><ul><li>收集更多数据，增加原始训练集的数量，但在大部分情况下，我们往往无法收集到更多数据。</li><li>丢弃一些特征，减少特征数量。我们可以手工凭经验丢弃一些不重要的特征，或者是借助一些算法来帮助我们自动丢弃掉一些特征。</li><li>运用正则化处理模型。正则化不会减少特征数量，但是会减小参数大小（仅限L2正则化，后续会补充）。</li></ul><h3 id="cost-function-with-regularization"><a class="markdownIt-Anchor" href="#cost-function-with-regularization"></a> Cost Function With Regularization</h3><p>在上面我们过拟合的线性回归采用的模型是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msubsup><mi>x</mi><mn>3</mn><mn>3</mn></msubsup><mo>+</mo><msub><mi>θ</mi><mn>4</mn></msub><msubsup><mi>x</mi><mn>4</mn><mn>4</mn></msubsup></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = \theta_{0} + \theta_{1} x_{1} + \theta_{2} x_{2}^{2} + \theta_{3} x_{3}^{3} + \theta_{4} x_{4}^{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>从过拟合与正常情况的对比可以看出，正式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mn>3</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">x_3^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mn>4</mn><mn>4</mn></msubsup></mrow><annotation encoding="application/x-tex">x_4^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>这两个高次项导致了过拟合的产生。如果我们能够让这些高次项的系数接近<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的话，就可以很好的避免高次项的影响。当然我们也可以直接对参数取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，此时该模型将退化至二次项的刚刚好模型。直接丢弃这些高维特征固然是一个不错的选择，但我们如果要保留这些特征呢？那就需要用到正则化了。</p><p>要减少<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\theta_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\theta_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的值，我们要做的就是对这两个参数设置一点惩罚。具体来说，就是在代价函数中可以做些手脚：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mo stretchy="false">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mn>1000</mn><msubsup><mi>θ</mi><mn>3</mn><mn>2</mn></msubsup><mo>+</mo><mn>1000</mn><msubsup><mi>θ</mi><mn>4</mn><mn>2</mn></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">J(\theta)=\frac{1}{2m}[\sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right)^2 + 1000 \theta_{3}^2 + 1000 \theta_{4}^2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>我们在代价函数中手动加上了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><msubsup><mi>θ</mi><mn>3</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">1000\theta_3^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><msubsup><mi>θ</mi><mn>4</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">1000\theta_4^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>，这样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\theta_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\theta_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>只要增加一点点就会引起代价函数的剧烈变化。从而达到要使得代价函数最小，必须要压制这两个参数的效果。这样通过代价函数选择出来的参数，对预测结果的影响就会比之前小很多。这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>并没有具体要求，它代表是一个很大的数，使用时根据具体情况具体选择。</p><p>但现实情况往往是我们并不知道该选择哪个参数进行惩罚，于是我们可以采取<strong>对所有参数进行惩罚</strong>的方式，实践证明对所有参数进行惩罚最后得到的拟合曲线往往更加平滑，预测效果也更好。我们对上面的代价函数进行拓展，得到一个带惩罚参数的代价函数。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>θ</mi><mi>j</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{2m} \left[ \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right)^2 + \lambda \sum_{j=1}^{n} \theta_{j}^2 \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span></span></span></span>代表正则化参数。依照惯例，不对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>进行惩罚，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>恒为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。经过正则化处理的模型图像可能如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241107100350929.png" alt="image-20241107100350929" style="zoom:67%;" /><p>蓝色的曲线很显然是一个过拟合的图像，应该对其使用正则化处理。然而，如果你的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span></span></span></span>选择不当，可能会导致图像变成图中粉红色的直线。这是因为你的正则化参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span></span></span></span>太大了，代价函数最终对所有的系数惩罚力度太大，以至于几乎所有的系数都为0，最后的图像只剩下一个常数项。所以，要正确的选择正则化参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span></span></span></span>，才能得到较好的拟合效果。</p><h3 id="expanding-l1-and-l2-reularization"><a class="markdownIt-Anchor" href="#expanding-l1-and-l2-reularization"></a> Expanding: L1 and L2 Reularization</h3><p>如果你有留意前面的内容，你可能会好奇：为什么对惩罚参数的引入是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>θ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\theta^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>呢？</p><p>你会发现我提到过一个东西叫做<strong>L2正则化</strong>。什么是L2正则化呢？其实就是在对代价函数进行惩罚时，用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>θ</mi><mi>j</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\lambda \sum_{j=1}^{n} \theta_{j}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2499259999999999em;vertical-align:-0.43581800000000004em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>的形式，即对惩罚参数的平方引入对参数的惩罚。事实上也的确有<strong>L1正则化</strong>，它是通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi mathvariant="normal">∣</mi><msub><mi>θ</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\lambda \sum_{j=1}^{n} |\theta_{j}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span>，对惩罚参数的绝对值形式引入的惩罚。问题在于，这两种正则化方式有什么异同吗？</p><p>先说结论：</p><ul><li>L1正则化，也叫Lasso回归。它可以产生稀疏权重矩阵，让一些权重可以完全为零，从而实现自动特征选择；并且，它的运用通常是非凸的，会导致优化算法的收敛速度较慢；在多重共线性问题上，L1正则化处理不稳定。</li><li>L2正则化，也叫Ridge回归。它不会让权重压缩到0，所以它不进行特征选择；相反，它倾向于均匀地收缩权重，让它们变小并保持非零，这有助于处理共线性问题。且L2正则化问题总是凸的，这意味着只有一个最小值。这使得优化过程更简单、更稳定。</li></ul><p>之所以会导致这种差异，要从数学上做出解释。</p><p>L1 正则化引入了绝对值惩罚，这种惩罚在数值上是线性的。由于绝对值函数在零点处不光滑，L1 正则化会导致许多特征系数被强制减小到零。这个特性使得 L1 正则化有助于特征选择，因为它会产生稀疏解，即许多特征的系数为零，从而简化模型。</p><p>L2 正则化引入了平方惩罚，这使得惩罚的效果在特征系数较大时更为显著。L2 正则化不会将系数缩减到零，而是会使得所有特征系数变得更小。这个特性促使模型使用所有特征，但抑制了较大的特征系数，从而平滑模型。</p><p>由于上述的几何特性和对特征系数的不同影响，L1 和 L2 正则化在实际应用中的效果有显著差异。L1 更适合需要特征选择的场景，而 L2 更适合需要稳定模型的场景。许多实际问题可能会结合两者使用，形成 Elastic Net 正则化，以便同时享有 L1 和 L2 的优点。</p><h3 id="regularized-linear-regression-and-logistic-regression"><a class="markdownIt-Anchor" href="#regularized-linear-regression-and-logistic-regression"></a> Regularized Linear Regression and Logistic Regression</h3><p>在学习了怎么对代价函数进行处理来运用正则化后，我们把正则化技术引入线性回归和逻辑回归中。经过正则化处理的<strong>线性回归</strong>代价函数为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>+</mo><mi>λ</mi><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>θ</mi><mi>j</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{2m} \left[ \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right)^2 + \lambda \sum_{j=1}^{n} \theta_{j}^2 \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1637769999999996em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></span></p><p>经过正则化处理的<strong>逻辑回归</strong>代价函数为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">[</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true">]</mo></mrow><mo>+</mo><mfrac><mi>λ</mi><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>θ</mi><mi>j</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">J(\theta) = -\frac{1}{m} \sum_{i=1}^{m} \left[ y^{(i)} \log(h_{\theta}(x^{(i)})) + (1 - y^{(i)}) \log(1 - h_{\theta}(x^{(i)})) \right] + \frac{\lambda}{2m} \sum_{j=1}^{n} \theta_{j}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0651740000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对两个代价函数分别运用梯度下降法，得到参数的更新公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>−</mo><mi>a</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mspace linebreak="newline"></mspace><msub><mi>θ</mi><mi>j</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>a</mi><mrow><mo fence="true">(</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><mfrac><mi>λ</mi><mi>m</mi></mfrac><msub><mi>θ</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\theta_{0} = \theta_{0} - a \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{0}^{(i)}\\\theta_{j} = \theta_{j} - a \left( \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{j}^{(i)} + \frac{\lambda}{m} \theta_{j} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.027669em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span></span></span></span></span></p><p>对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\theta_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的更新公式进行重排，可以得到如下公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mfrac><mi>λ</mi><mi>m</mi></mfrac><mo fence="true">)</mo></mrow><mo>−</mo><mi>a</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\theta_{j} = \theta_{j} \left(1 - a \frac{\lambda}{m}\right) - a \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{j}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对比正常的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>参数迭代更新，可以看到，正则化的奥秘就在于每次更新参数时，都会额外的给参数再减少一个额外的值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mi>a</mi><mfrac><mi>λ</mi><mi>m</mi></mfrac><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(1 - a \frac{\lambda}{m}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2301179999999998em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">λ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>。</p><p>线性回归和逻辑回归的参数更新形式是相同的，所以我把它们安排在了一起。但是我们知道，这两个回归模型的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>不同，所以它们的参数更新规则并不相同。在使用时留意使用正确的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_{\theta}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>就好。</p><p>以上就是我们对监督学习的全部内容，主要就介绍了线性回归与逻辑回归，我们也算是在机器学习中一脚迈入了大门。下一周我们将学习神经网络，开始入门深度学习。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/110028263_p0.jpg" alt="110028263_p0" /></p>]]></content>
    
    
    <summary type="html">Learning logical regression and explaining how to use reularization to solve the problem of overfitting.</summary>
    
    
    
    <category term="Machine-Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    
    <category term="Logical Regression" scheme="http://example.com/tags/Logical-Regression/"/>
    
    <category term="Regularization" scheme="http://example.com/tags/Regularization/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-ML-AndrewNg-Notes-Week2</title>
    <link href="http://example.com/posts/f7b3fcaf7ab2/"/>
    <id>http://example.com/posts/f7b3fcaf7ab2/</id>
    <published>2024-11-02T08:02:14.000Z</published>
    <updated>2024-11-02T08:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Coursera-ML-AndrewNg-Notes-Week2</span><span class='p center small'>My machine learning notes</span><p>这里是吴恩达机器学习视频的Week2部分，笔记如下。</p><p>本周的内容依然是继续介绍线性回归方程，只不过在Week1的背景下继续向外延伸。Week2中我们将学习处理多变量、多维特征的线性回归方程，梯度下降法的优化策略以及多项式回归方程，最后还将浅谈正规方程的使用。</p><p>视频链接在下方：</p><a class="btn-beautify block center larger" href="https://www.bilibili.com/video/BV1Bq421A74G?spm_id_from=333.788.videopod.episodes&vd_source=5e421b52b9103cce8e012430aa932553"   title="Machine Learning Specialization"><i class="far fa-hand-point-right"></i><span>Machine Learning Specialization</span></a><h2 id="linear-regression-with-multiple-variable"><a class="markdownIt-Anchor" href="#linear-regression-with-multiple-variable"></a> Linear Regression with Multiple Variable</h2><h3 id="multiple-features"><a class="markdownIt-Anchor" href="#multiple-features"></a> Multiple Features</h3><p>先前我们预测房价的模型只考虑了单变量的回归模型，假如我们对房价模型加入更多的特征，比如房屋层数等，将构成一个多变量的回归模型。此时特征为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,x_2,...x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>让我们回到Week1中计算损失函数的核心公式上：</p><blockquote><p>一个以参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>为特征函数的<strong>代价函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{2m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_\theta(x) = \hat{y} = \theta^T X = \theta_0 x_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><p>可以看到Week1中的公式完美支持对多特征模型的运算。此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>代表特征向量矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>θ</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">{\theta }^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span>即为参数矩阵的转置。当然参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>都可以用向量本身来表示，然后用向量点积的乘法方式也能得到相同的结果。</p><div class="note info simple"><p>你可能会发现，按照这个公式计算代价函数的话，在Week1中出现的常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>怎么不见了呢？这是因为为了简洁起见，我们约定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_0=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，也就是说此时参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>即代表回归方程中的标量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></div><p>比如有模型如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102140152298.png" alt="image-20241102140152298" /></p><p>那么此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1416</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>40</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">x^{(2)} = \begin{pmatrix}1416 \\3 \\2 \\40\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">4</span><span class="mord">1</span><span class="mord">6</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.8000000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.39501em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.41001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>无论用向量还是矩阵表示都是正确的，只要后续采取对应的运算方法就好。</p><div class="note info simple"><p>在Week1中我们约定：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><msup><mi>s</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>w</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;s^{(i)},w^{(i)}&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>的指数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>并不是幂运算的意思，而是代表数据集中第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>条对应的信息。</p><p>引入多变量后我们追加约定：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_j^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.4129719999999999em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span></span>代表特征矩阵中第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>行第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>个特征，也就是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>个训练实例的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>个特征。如上图中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x_3^{(2)}=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</p></div><h3 id="gradient-descent-for-multiple-variables"><a class="markdownIt-Anchor" href="#gradient-descent-for-multiple-variables"></a> Gradient Descent For Multiple Variables</h3><p>引入多变量后，梯度下降的规则仍然不变：对每个参数求偏导，并选择合适的学习率根据梯度迭代递减参数。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mtext>new</mtext></msub><mo>=</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_{\text{new}} = \theta_{\text{old}} - \alpha \nabla_{\theta} J(\theta_{\text{old}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>我们将这条公式拓展到多变量上：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>−</mo><mi>a</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\theta_{0} := \theta_{0} - a \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{0}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>1</mn></msub><mo>−</mo><mi>a</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\theta_{1} := \theta_{1} - a \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{1}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>2</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>2</mn></msub><mo>−</mo><mi>a</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msubsup><mi>x</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">\theta_{2} := \theta_{2} - a \frac{1}{m} \sum_{i=1}^{m} \left( h_{\theta}(x^{(i)}) - y^{(i)} \right) x_{2}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></span></p><p>对应的Python代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    inner = np.power (((X *theta.T) -y), <span class="number">2</span>)</span><br><span class="line">    returnnp.<span class="built_in">sum</span>(inner) /(<span class="number">2</span>*<span class="built_in">len</span>(X))</span><br></pre></td></tr></table></figure><h3 id="gradient-descent-in-practice"><a class="markdownIt-Anchor" href="#gradient-descent-in-practice"></a> Gradient Descent in Practice</h3><h4 id="feature-scaling"><a class="markdownIt-Anchor" href="#feature-scaling"></a> Feature Scaling</h4><p>引入多个特征时，往往会出现一个问题，就是特征之间的尺度不一致：比如房屋的面积可能在100（m<sup>2</sup>）左右浮动，而房屋的层数可能只有2、3（层）。如果此时绘制出特征之间的图像，大概会长这样：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102142659666.png" alt="image-20241102142659666" style="zoom:67%;" /><p>再看看代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>的图像，我们会发现图像会很“扁”。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102142439837.png" alt="image-20241102142439837" /></p><p>这是理所当然的。当多特征方程中一个特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的变化量显著大于其他变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>时，意味着沿着它下降的梯度会非常“陡峭”。然而我们的学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>是唯一的，这就导致学习率相对于这个变量对应的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来说可能过于大，而相对于其他参数来说又过于小。于是就会出现“反复横跳”的问题——梯度下降需要的迭代次数变多了。</p><p>要解决这个问题，我们需要对特征进行缩放。一个常见的方法是对特征进行归一化处理：即将所有的特征尺度缩放到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的区间内。缩放方法有两种：</p><ol><li>均值归一化：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><msub><mi>μ</mi><mi>n</mi></msub></mrow><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_n = \frac{x_n - \mu_n}{x_{max}-x_{min}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2995389999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，即实例值减去均值，再除以数据集中最大项与最小项的差。</li><li>标准差归一化：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><msub><mi>μ</mi><mi>n</mi></msub></mrow><msub><mi>s</mi><mi>n</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">x_n = \frac{x_n - \mu_n}{s_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2995389999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">u_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是平均值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">s_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是标准差，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>n</mi></msub><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mi>N</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">s_n = \sqrt{\frac{1}{N} \sum_{i=1}^{N} (x_i - \mu)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5368845em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3031155em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2631154999999996em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5368845em;"><span></span></span></span></span></span></span></span></span>。</li></ol><p>经过特征缩放处理后的代价函数图像将看起来更加圆润：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102143846751.png" alt="image-20241102143846751" style="zoom:50%;" /><h4 id="learning-rate"><a class="markdownIt-Anchor" href="#learning-rate"></a> Learning Rate</h4><p>在Week1中我们提到学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>的取值比较随意。实际上采取技巧对学习率取值，也能够加快模型训练的速度。</p><p>梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们可以绘制迭代次数和代价函数的图表来观测算法在何时趋于收敛。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102144043735.png" alt="image-20241102144043735" /></p><p>也有一些自动测试代价函数是否收敛的方法：比如设置一个阈值，当梯度下降的幅度小于这个阈值，我们就认为代价函数已经收敛完毕。但是通常，直接观察图表的方法更好。</p><p>学习率的取值可以逐渐增加，让模型的训练速度加快的同时保证最后结果不过于粗糙。可以采取以下取值：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>α</mi><mo>=</mo><mn>0.01</mn><mo separator="true">,</mo><mn>0.03</mn><mo separator="true">,</mo><mn>0.1</mn><mo separator="true">,</mo><mn>0.3</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>10...</mn></mrow><annotation encoding="application/x-tex">\alpha=0.01,0.03,0.1,0.3,1,3,10...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></span></p><p>即每次将学习率扩大三倍，再观察代价函数查看收敛情况即可。</p><h3 id="features-and-polynomial-regression"><a class="markdownIt-Anchor" href="#features-and-polynomial-regression"></a> Features and Polynomial Regression</h3><p>对于房屋预测模型来说，我们先前引入的变量大多都是单次项的，所以用线性回归方程即可以满足我们的需求。但是我们发现，比起房屋的长度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和宽度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mord">2</span></span></span></span>，也许房屋的面积对于价格的预测来说影响更大。所以我们决定引入新的特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>×</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_3=x_1\times x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，用于代表面积。</p><p>这个引入新特征的过程即为<strong>特征工程</strong>。它的定义如下：</p><div class="note info simple"><p>Feature engineering:</p><p>Using intuition to design new features, by transforming or combining original features.</p></div><p>我们可以通过知识或直觉来设计新特征，它通常是通过转换和组合问题的原始特征来得到的，以便让学习算法得出更为准确的预测。通过定义新的特征，可能会得到更好的模型。</p><p>这个时候再度绘制关于面积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的样本点数据图，我们假定它大概长这样：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102145307638.png" alt="image-20241102145307638" style="zoom:50%;" /><p>很明显，此时线性回归将不再适用于我们的模型。为了更好的拟合图像，我们应该引入非线性回归方程，比如一个二次函数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msubsup><mi>x</mi><mn>3</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = \theta_{0} + \theta_{1} x_{1} + \theta_{2} x_{2} + + \theta_{3} x_{3}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>由图可知，要引入二次函数拟合图像，很显然这个二次函数应该开口向下，那么就会出现房屋面积增加而价格下跌的图像，这显然是不符合现实的。所以，也许我们应该引入三次函数：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msubsup><mi>x</mi><mn>3</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = \theta_{0} + \theta_{1} x_{1} + \theta_{2} x_{2}^2 + + \theta_{3} x_{3}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>如果不希望三次函数后期上升的过于陡峭，采用平方根函数也是个不错的选择：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msqrt><msub><mi>x</mi><mn>3</mn></msub></msqrt></mrow><annotation encoding="application/x-tex">h_{\theta}(x) = \theta_{0} + \theta_{1} x_{1} + \theta_{2} x_{2} + \theta_{3} \sqrt{x_{3}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.265845em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.774155em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.734155em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.265845em;"><span></span></span></span></span></span></span></span></span></span></p><p>此外，也可以令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x_2=x_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>3</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">x_3=x_3^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>等换元操作把模型转化为线性回归。</p><p>总之，我们应该先观察数据然后再决定准备尝试怎样的模型，而不是采用单一的线性回归。大多数更复杂的情况下，非线性回归模型会取得比线性回归模型更好的预测效果。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241102151636564.png" alt="image-20241102151636564" /></p><span class='p yellow'>注：如果我们采用多项式回归模型，在运行梯度下降算法前，特征缩放非常有必要。</span><div class="note danger simple"><p>“很明显，此时线性回归将不再适用于我们的模型，<s>因为我们引入的特征是根据长度和宽度这两个特征组合得到的</s>。”</p><p>请注意，并没有规定<strong>面积是通过长度和宽度两个特征相乘得到与面积与价格的函数是曲线之间有因果关系</strong>。我一开始这里也理解错误了，其实最终函数图像如何只取决于数据集的数据，当然也可以是直线关系，只不过我们这里便于引入曲线回归方程而设定了一个曲线图像图。</p></div><h3 id="normal-equation"><a class="markdownIt-Anchor" href="#normal-equation"></a> Normal Equation</h3><p>Normal Equation，即正规方程。可以利用正规方程来一次计算出使得代价函数最小的参数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial}{\partial \theta_j} J(\theta_j) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，而无需选择学习率来多次迭代。</p><blockquote><p>假设我们的训练集特征矩阵为 X（包含了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{x_0}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）并且我们的训练集结果为向量 y，则利用正规方程解出向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>X</mi><mi>T</mi></msup><mi>y</mi></mrow><annotation encoding="application/x-tex">\theta = (X^T X)^{-1} X^T y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 。</p><p>上标T代表矩阵转置，上标-1 代表矩阵的逆。设矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding="application/x-tex">A={X^T}X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，则：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(X^T X)^{-1} = A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p>然而这个方法仅适用于线性回归方程，几乎不能用在后续所有模型的优化。而且因为涉及到对矩阵的多次运算，所以时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，在特征数量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>特别大时（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">n&gt;10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>）时间开销将无法接受。所以在大部分情况下人们还是使用线性回归，这个方法仅供了解即可。</p><div class="note warning simple"><p>至于正规方程是如何得出来的，我不知道。我查了一下原理，涉及到矩阵微积分运算，并不在基础的线性代数知识范围之内，<s>所以笔者也看不懂</s>。</p><p>有兴趣的话可以自己去了解。</p></div><p>梯度下降与正规方程比较如下：</p><table><thead><tr><th>梯度下降</th><th>正规方程</th></tr></thead><tbody><tr><td>需要学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></td><td>不需要</td></tr><tr><td>需要多次迭代</td><td>只需要一次计算</td></tr><tr><td>特征数量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>很大时也较好适用</td><td>特征数量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>过大时将无法接受</td></tr><tr><td>适用于各类模型</td><td>仅适用于线性模型</td></tr></tbody></table><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/50140585_p0.jpg" alt="50140585_p0" /></p>]]></content>
    
    
    <summary type="html">My notes of Coursera-ML-AndrewNg-Week2, introducing Linear Regression with Multiple Variable and Nonlinear Regression.</summary>
    
    
    
    <category term="Machine-Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="http://example.com/tags/Machine-Learning/"/>
    
    <category term="Linear Regression with Multiple Variable" scheme="http://example.com/tags/Linear-Regression-with-Multiple-Variable/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-ML-AndrewNg-Notes-Week1</title>
    <link href="http://example.com/posts/532f8b38d531/"/>
    <id>http://example.com/posts/532f8b38d531/</id>
    <published>2024-10-30T04:50:11.000Z</published>
    <updated>2024-10-30T04:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Coursera-ML-AndrewNg-Notes-Week1</span><span class='p center small'>My machine learning notes</span><p>文章主要整理一下吴恩达机器学习教学视频的笔记，这里是Week1部分，链接放在下方：</p><a class="btn-beautify block center larger" href="https://www.bilibili.com/video/BV1Bq421A74G?spm_id_from=333.788.videopod.episodes&vd_source=5e421b52b9103cce8e012430aa932553"   title="Machine Learning Specialization"><i class="far fa-hand-point-right"></i><span>Machine Learning Specialization</span></a><div class="note warning flat"><p>不保证能该系列更新完毕，<s>因为笔者太菜</s>。</p></div><h2 id="what-is-machine-learning"><a class="markdownIt-Anchor" href="#what-is-machine-learning"></a> What is Machine Learning?</h2><blockquote><p>“Field of study that gives computers the ability to learn without being explicitly programmed.”</p><p>Arthur Samuel (1959)</p></blockquote><p>机器学习是一种利用算法和统计模型来使计算机系统从数据中自动改进其表现的人工智能方法，而不依赖于显式的编程。其核心思想是通过从数据中学习经验或模式，使得计算机能够在没有人为干预的情况下对新数据进行预测或分类。</p><p>机器学习主要分为以下几类：</p><ul><li><p><strong>Supervised Learning</strong>：即监督学习，基于标注数据训练模型，预测或分类新数据，如回归和分类任务。如今大部分机器学习采用的都是监督学习，也是这门课的重点介绍部分。</p></li><li><p><strong>Unsupervised Learning</strong>：即无监督学习在没有标注的数据上寻找数据的潜在结构，如聚类和降维。</p></li><li><p><strong>Reinforcement learning</strong>：即强化学习，通过与环境的交互、基于奖励和惩罚机制来优化策略，如游戏中的智能体训练。这门课程中介绍的部分较少，实际上可以作为一个单独的类别深入研究。</p></li></ul><h3 id="supervised-learning"><a class="markdownIt-Anchor" href="#supervised-learning"></a> Supervised Learning</h3><p>监督学习是一种事先给定训练集（Training Set）和标注结果集（Target Set），让机器学习数据集中由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>的映射关系<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>，从而实现预测新的数据的目标。</p><p>比如房屋价格预测，给定一组数据对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><msup><mi>s</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>w</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;s^{(i)},w^{(i)}&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">s^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>代表房屋面积，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>w</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">w^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>代表房屋价格。机器通过学习面积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>与价格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>的映射关系，找到一个最优拟合的函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>。这样，当给定一个房屋面积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>时，模型可以提供一个相对合理的预测价格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>。</p><div class="note info simple"><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><msup><mi>s</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>w</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;s^{(i)},w^{(i)}&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>的指数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>并不是幂运算的意思，而是代表数据集中第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>条对应的信息。</p></div><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241030105108665.png" alt="image-20241030105108665" style="zoom: 33%;" /><p>在实际中，训练数据集可以包含多个特征维度，这有助于提高模型的预测精度。例如，在利用机器学习诊断肿瘤良恶性的场景中，训练数据可以包括年龄、性别、肿瘤大小、厚度等多维度指标，模型最终输出良性或恶性预测。随着维度增加，模型学习的逻辑也会更加复杂。</p><p>至于机器学习是如何进行学习这个步骤的，下文将介绍一种用于监督学习的简单方法——线性回归（Linear Regression）。此外，非线性回归（Nonlinear Regression）也可以被采用，如利用抛物线或曲线来替代线性函数，以获得更好的拟合效果，但相应的计算复杂度也会增加。</p><h3 id="unsupervised-learning"><a class="markdownIt-Anchor" href="#unsupervised-learning"></a> Unsupervised Learning</h3><p>非监督学习，即只给定Training Set而不给订标注结果的Target Set。在这种情况下机器将无法给出预测，而只能根据数据本身的特征给出数据的结构信息。一般运用场景为聚类或者降维。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241030105244154.png" alt="image-20241030105244154" style="zoom: 33%;" /><p>例如，在一个推荐场景中，当你阅读一篇关于熊猫在日本动物园成功繁育的新闻时，系统可能推荐相关的熊猫或动物园新闻。然而我相信并没有程序员会专门编写程序去推荐熊猫相关的新闻，而是通过机器的无监督学习，根据你当前阅读的新闻自动聚类相关内容，以生成个性化推荐。</p><p>非监督学习主要用于数据分类或结构发现，而不用于具体的预测任务。</p><h2 id="linear-regression"><a class="markdownIt-Anchor" href="#linear-regression"></a> Linear Regression</h2><p>在第一周，课程主要介绍了相对简单的线性回归来简述机器学习（监督学习）是怎么做到“学习”找到映射关系<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>，进而进行预测的。这本质上是个回归的统计学问题。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241030105542110.png" alt="image-20241030105542110" style="zoom:33%;" /><p>对于给定的一组数据，我们的目标是找到一个直线，使得它的拟合效果最好。定义回归直线方程为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mi>w</mi><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\hat{y}^{(i)}=wx^{(i)}+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0213299999999998em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>对于给定数据的标注结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>和回归方程的预测结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\hat{y}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>，定义误差为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mo>=</mo><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">error=\hat{y}^{(i)}-y^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>为了避免符号带来的计算困难，我们对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">error</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>进行平方处理，并依次相加求和，即计算回归曲线中各个数据点到线性回归直线的距离之和的平方：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^{m} \left( \hat{y}^{(i)} - y^{(i)} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>然而这个误差只会越来越大，为了避免误差随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>的增大而增大，我们选择对平方误差取均值，即乘以系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\frac{1}{2m}\sum\limits_{i=1}^{m} \left( \hat{y}^{(i)} - y^{(i)} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>仅仅是为了最后得出的结果更加美观，实际上要不要这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>最后得到的结果意义都是正确的，后文会介绍这个“美观”的意义何在。</p><p>最后我们得到一个以参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>为特征函数的<strong>代价函数</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J(\theta) = \frac{1}{2m} \sum_{i=1}^{m} \left( h_\theta(x^{(i)}) - y^{(i)} \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3540079999999999em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>X</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_\theta(x) = \hat{y} = \theta^T X = \theta_0 x_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>即为输入的变量，是一个矩阵。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>θ</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">{\theta }^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span>即为矩阵的转置。在单变量时linear regression时参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>为一个一维变量，也就是一个标量。</p><div class="note info simple"><p>在机器学习中，代价函数、损失函数、成本函数指的是同一个东西。</p></div><p>我们的目的是求得使代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>最小时的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\theta_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，意味着此时的拟合效果最好。如何求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\theta_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>呢？在机器学习中一个广泛运用的算法是<strong>梯度下降法</strong>，该方法能够高效地找到函数的局部最小值。</p><h3 id="gradient-descent"><a class="markdownIt-Anchor" href="#gradient-descent"></a> Gradient Descent</h3><p>梯度下降法（Gradient Descent）是一种用于寻找函数局部最小值的迭代优化算法。该方法的核心思想是从一个初始点开始，沿着目标函数的梯度（即最陡上升方向的反方向）迭代更新参数，直到找到函数的最小值。每次迭代更新参数的公式如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mtext>new</mtext></msub><mo>=</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_{\text{new}} = \theta_{\text{old}} - \alpha \nabla_{\theta} J(\theta_{\text{old}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mtext>new</mtext></msub></mrow><annotation encoding="application/x-tex">\theta_{\text{new}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是更新后的参数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mtext>old</mtext></msub></mrow><annotation encoding="application/x-tex">\theta_{\text{old}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是更新前的参数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>是学习率（一个正的常数，控制步长大小），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\nabla_{\theta} J(\theta_{\text{old}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span>在当前参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mtext>old</mtext></msub></mrow><annotation encoding="application/x-tex">\theta_{\text{old}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处的梯度。梯度的计算方法如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>f</mi><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mn>2</mn></msub></mrow></mfrac><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>x</mi><mi>n</mi></msub></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\nabla f = \left( \frac{\partial f}{\partial x_1}, \frac{\partial f}{\partial x_2}, \ldots, \frac{\partial f}{\partial x_n} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>即对各个变量求偏导，详见：<a href="https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6/13014729?fr=ge_ala">梯度（数学名词）</a>。由于代价函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span>总是带有一个平方多项式，所以对其求偏导的过程永远会下来一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>，恰好与之前为了美观而强行加入的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>相约分，这就是美观的意义所在。</p><div class="note danger simple"><p>梯度下降法只能只能找到<strong>局部最小值</strong>而不是<strong>全局最小值</strong>。对于一个凸函数而言，它的局部最小值总是全局最小值，然而如果函数为非凸函数（如深度学习中的神经网络）就不一定了。事实上，对于不同的变量值，运用梯度下降法所陷入的局部最小值并不一定相同，所以梯度下降法无法保证在非凸函数中一定会找到全局最小值。</p><p>如何找到全局最小值呢？我们可以用多起点梯度下降，或者采取模拟退火、遗传算法、粒子群算法等全局优化算法求解。然而这些全局优化算法需要大量的迭代和计算，尤其是当参数空间大或模型复杂时，计算成本会显著增加。对于非凸问题，尽管存在多个局部最小值，但研究发现这些局部最小值的性能相差不大，甚至有些局部解在泛化性能上更优。</p><p>所以我们还是常常使用梯度下降法来求解最小值。</p></div><p>回顾梯度下降法的计算公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mtext>new</mtext></msub><mo>=</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_{\text{new}} = \theta_{\text{old}} - \alpha \nabla_{\theta} J(\theta_{\text{old}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。这里的学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>如何取值？答案是<strong>适当</strong>就好。</p><ul><li>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>取值太小，那么梯度下降的过程将非常缓慢，相应的计算成本就越高，但是下降过程更平滑，最后得到的拟合效果更好。</li><li>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>取值太大，那么将会出现由于步长太大而“左右横跳”的情况（想象代价函数是一个二次函数，而你的步长太大将导致参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>的取值在对称轴两侧跳来跳去）。极端的情况甚至会导致梯度下降函数无法收敛，变成发散函数。</li></ul><p>所以学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>的取值完全就是凭感觉（比如取个0.01），<s>这也是机器学习为什么好水论文的一个缩影吧</s>。</p><p>即便你正确的选择了学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，梯度下降过程中也会不可避免的出现<em>学习率衰退</em>。因为梯度下降法的本质就是沿着函数在当前该点的切线（导数方向/梯度向量）移动一个很小的距离（学习率），而随着变量不断趋于局部最小，导数会逐渐平缓趋于0，所以下降的过程也会更为缓慢。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241030115344324.png" alt="代价降低速率逐渐减缓，但总是在降低。" style="width:400px;"/></div><span class="image-caption">代价降低速率逐渐减缓，但总是在降低。</span></div><h3 id="batch-gradient-decent"><a class="markdownIt-Anchor" href="#batch-gradient-decent"></a> Batch Gradient Decent</h3><p>批量梯度下降（batch gradient decent）和梯度下降原理相同，只不过每次计算梯度时都会用到所有的数据进行计算，在更新参数时基于所有数据点的误差进行调整，所以称为batch。这种方法对收敛效果较为稳定，但在数据集非常大的情况下，计算代价较高，且内存占用大。有些算法中计算梯度并不会计算所有数据，而是取数据的子集进行计算。比如随机梯度下降和小批量梯度下降。</p><h3 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h3><p>要运用梯度下降法求解线性回归问题，我们主要运用到三条公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msup><mrow><mo fence="true">(</mo><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msub><mi>f</mi><mrow><mi>w</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>w</mi><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>θ</mi><mtext>new</mtext></msub><mo>=</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><msub><mi mathvariant="normal">∇</mi><mi>θ</mi></msub><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mtext>old</mtext></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}    J(\theta) = \frac{1}{2m} \sum_{i=1}^{m} \left( \hat{y}^{(i)} - y^{(i)} \right)^2 \\    \hat{y}^{(i)} = f_{w,b}(x^{(i)}) = wx^{(i)} + b \\    \theta_{\text{new}} = \theta_{\text{old}} - \alpha \nabla_{\theta} J(\theta_{\text{old}})\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.404007999999999em;vertical-align:-1.9520039999999996em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.452004em;"><span style="top:-4.4520040000000005em;"><span class="pstrut" style="height:3.092008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0920079999999999em;"><span style="top:-3.3409em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.012004em;"><span class="pstrut" style="height:3.092008em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span></span></span><span style="top:-1.5720040000000002em;"><span class="pstrut" style="height:3.092008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord">∇</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9520039999999996em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>因为线性回归只有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>两个参数，我们可以很方便地对其求偏导从而计算出这两个参数的梯度迭代公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>w</mi><mtext>new</mtext></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>w</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>f</mi><mrow><mi>w</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>b</mi><mtext>new</mtext></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>b</mi><mtext>old</mtext></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>f</mi><mrow><mi>w</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}w_{\text{new}} &amp;= w_{\text{old}} - \alpha \frac{1}{m} \sum_{i=1}^{m} \left( f_{w, b}(x^{(i)}) - y^{(i)} \right) x^{(i)} \\b_{\text{new}} &amp;= b_{\text{old}} - \alpha \frac{1}{m} \sum_{i=1}^{m} \left( f_{w, b}(x^{(i)}) - y^{(i)} \right)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.458132000000001em;vertical-align:-2.9790660000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4790660000000004em;"><span style="top:-5.479066em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9790660000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4790660000000004em;"><span style="top:-5.479066em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9790660000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过设置学习率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>和迭代次数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>，每次迭代计算参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>，从而求解出最小代价时的参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\theta_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>b</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{min},b_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。最终可以得到拟合效果最优的线性回归直线方程：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>w</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f(x)=w_{min}x+b_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241030123140570.png" alt="image-20241030123140570" style="zoom:80%;" /><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/b887646c5f1680f1750aaad7fbedc57.png" alt="b887646c5f1680f1750aaad7fbedc57" /></p>]]></content>
    
    
    <summary type="html">My notes of Coursera-ML-AndrewNg-Week1, which introduces what is ML and explain how linear regression to solve problem.</summary>
    
    
    
    <category term="Machine-Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="http://example.com/tags/Machine-Learning/"/>
    
    <category term="Linear Regression" scheme="http://example.com/tags/Linear-Regression/"/>
    
  </entry>
  
  <entry>
    <title>10月总结·2024</title>
    <link href="http://example.com/posts/fc9bf3553d97/"/>
    <id>http://example.com/posts/fc9bf3553d97/</id>
    <published>2024-10-28T02:26:53.000Z</published>
    <updated>2024-10-28T02:26:53.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>10月总结·2024</span><p>一转眼，大三上竟然已经过去了一半。恍惚间想起小学时经常背诵的谚语“光阴似箭，日月如梭”，儿时的飞镖终究还是射中了眉心。初看不识图中意，再看已是画中人是也。大学四年应当是人生中最宝贵的四年，务必要珍惜珍惜再珍惜。</p><p>闲话少说，来总结一下我这个月的工作吧。</p><h2 id="拾月之壹"><a class="markdownIt-Anchor" href="#拾月之壹"></a> 拾月之壹</h2><p>话说在前头，这可能是我写的最少的一篇总结。原因很简单：我这个月真没干什么事。</p><p>按照四个星期二十八天来粗略划分一下的话，第一个星期是国庆假期，因此什么都没干；第二个星期主要在忙操作系统实验与Go语言教程的接口部分；第三个星期在忙软著，不是原先的那个一作，而是从班主任那边新接的一份，具体情况后面再谈；第四个星期在忙预备党员答辩，中途电脑C板坏了送去维修又花了一个周末。所以总的来说，我的十月份做的事情不多：既没有比赛，也没有读书，所以可写的事实在不多。</p><p>不过，这多多少少也是在意料之中吧。9月份我便给自己定下了学期规划，决心推掉那些繁多冗杂的比赛，给我自己专心沉淀一个学期。为此，我甚至拒绝掉了亚太杯数学建模比赛的参赛邀请。冥冥之中这也与我大一时随口说出的大学规划相吻合了：大一学习技术、大二多打比赛、大三准备考研/实习、大四出去工作（如果决心就业的话）。真是，有心栽花花不开，无心插柳柳成荫。</p><h2 id="拾月之貳"><a class="markdownIt-Anchor" href="#拾月之貳"></a> 拾月之貳</h2><p>虽说做的事情不多，还是仔细的来谈一谈我为数不多做的事情吧。</p><h3 id="软著"><a class="markdownIt-Anchor" href="#软著"></a> 软著</h3><p>我目前一共有两篇软著，然而均是在投状态，尚无一篇正式发表。一篇是一作，一篇是二作（或者是三作）。</p><h4 id="面向深度伪造检测的攻击与防御技术v10"><a class="markdownIt-Anchor" href="#面向深度伪造检测的攻击与防御技术v10"></a> 面向深度伪造检测的攻击与防御技术V1.0</h4><p>这篇软著即是一作的那篇，也是之前拿去参加广东省计算机程序设计大赛中拿省一的那个项目。因为走的是个人渠道，没有代理，所以一路挫折颇多，耗精费神。先是队友的实名认证卡了将近半个月，然后是各种奇奇怪怪的文件，主打一个匪夷所思，让人摸不着头脑。要我说，确有故意消遣逼人花钱找代理之嫌。本来计划于第四个星期的周末处理，结果电脑拿去报修，无果。哪怕是从上个月开始准备，现在我也难以预料究竟要何时才能正式投递。原因不外乎是各种繁文缛节，文件证明。如果说能一口气准备好所有文件也就算了，这里竟然不允许你查看后续阶段需要准备的材料：如果你在这个阶段缺乏相应的材料文件，你就无法看到后续阶段需要的其他材料。实在不知道版权保护中心究竟是为了什么目的才能做出如此低能的设计，硬生生把计算机软著申报工作做成了线性闯关游戏，究竟是在鼓励创新还是在拦路要钱。</p><p>罢了，尽人事听天命，总不可能比丝之鸽还晚吧（立个flag先）</p><h4 id="lawclassifier-法律数据分级分类一体化平台-v10"><a class="markdownIt-Anchor" href="#lawclassifier-法律数据分级分类一体化平台-v10"></a> LawClassifier-法律数据分级分类一体化平台 V1.0</h4><p>这篇软著是从班主任那边接手过来的项目。论技术含量和参与程度，都是比我一作的那篇软著要更高的，然而我只能拿二作甚至三作，因为学校的政策是一作必须是老师……听我的，下次别来这学校。</p><p>软著大概的情况就是实现一个法律数据分级分类方向的NLP的语言文本处理系统，当初说是算法由博士生给出，我们协助写好前端就好。结果是直到我们搓出了一个完整的能跑的系统，这个所谓的“博士生算法”连API都没给出来。就这样一个从前端到后端全部百分百原创的系统，我们居然连一作都拿不到，真的是被贱卖了。</p><p>一开始我对这个项目的想法是由我一个人当全栈，前端套用之前在实验室项目里用的layui模板，后端用Python的Flask搭建足矣。但是想了想还是选择和朋友合作开发，由他来用Go开发后端，我来负责将后端部署到前端。实话说，这种轻量级的小项目用Flask搭建再适合不过了，用Go负责后端开发反而略显臃肿。不过木已成舟，也就这样吧。</p><p>目前的软著还在申报阶段（这次是由老师自己掏经费走代理），所以GitHub库还没有公开。等软著通过后，我会再在博客公开代码库的链接并详细介绍我开发的过程与心得。</p><h3 id="coursera-andrew-ng"><a class="markdownIt-Anchor" href="#coursera-andrew-ng"></a> Coursera, Andrew Ng</h3><p>正好大三闲来无事，打算自学一点机器学习方面的内容，于是就去看了吴恩达的机器学习课程。</p><p>刚看完第一周，感觉讲的很基础全面，但是Coursera又标明该门课需要4~6个月，吓人。明明总课时才19h，难道后面真的很难吗？</p><p>不管怎么说先看着吧。</p><h2 id="拾月之叁"><a class="markdownIt-Anchor" href="#拾月之叁"></a> 拾月之叁</h2><p>这部分主要说一些与学习无关的事情。</p><h3 id="预答辩"><a class="markdownIt-Anchor" href="#预答辩"></a> 预答辩</h3><p>整整有一个星期我在准备预备党员的答辩。</p><p>这里我不打算谈论一些严肃的话题，只想聊聊我整理材料的事情。</p><p>答辩的重点是大学展示部分，主要是考察你在思想、学术、学生工作和志愿上四个维度的表现。光看名字就觉得这玩意整理起来一定很麻烦，实际上也确实很麻烦，于我而言不下于算一次横跨三年的综测。不过值得庆幸的是，我很早就养成了整理我参赛记录材料的习惯。所以虽然事情繁琐无比，倒也不至于错漏，这大概就是写每月总结的好处之一吧。看着将近一千字的各种证明材料，我不由得五味陈杂起来。咂了咂嘴，除了苦涩还是苦涩。大学迄今已经过了四分之三，整整三年，相当于我重新读一遍高中了，而如今却只剩下了这不足千字的证明，承载着三年以来的各种悲欢离合，简直难以想象。话虽如此，高中留下的记录却更为稀少，如今只剩下了堪堪一张高考分数成绩单。</p><p>至于这份三年的中期答卷我是否满意呢？我自己也不知道。我做的够多了吗？我不知道。我的努力都是徒劳无功吗？我不知道。这是我的极限了吗？我还是不知道。但我可以肯定的是，这并不是一份完美的答卷，起码从绩点来说并不是，甚至谈不上差强人意。事实上，从材料清单来看，显然我的大部分精力都花在了各式各样的比赛上。就连预答辩提问时，台下的学姐也发问道：“你是怎么平衡时间的，你不需要休息吗？”其实我相当想要休息，那些说什么喜欢让自己更充实更忙碌都是鬼扯一通的谎言。说穿了，不过是信息差带来的焦虑，连携着摸石头过河罢了。我也没想过要多出人头地，只是想在将来面对一些不可逾越的差距时给自己留个微不足道的念想：起码努力过了，罢了罢了，hhh。</p><h3 id="练琴"><a class="markdownIt-Anchor" href="#练琴"></a> 练琴</h3><p>在去图书馆溜达的途中偶然发现学校竟然有免费琴房，在临近毕业的大三才发现，不可不谓之残忍。不过既然错过了种树的最好时机，干脆就现在立即去种吧。我喜欢音乐，不为弹给别人，只供自娱自乐就好。想必以后应该也会常去，毕竟学什么知识都未必能保证日后一定能用到，但学一门兴趣爱好于己将来只会受益无穷。弹钢琴是敲键盘，撸代码也是敲键盘，兴许以后还能去开码农钢琴，你说对吧？</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>原本写了很多，但是最后决定留作私人文章了，抱歉啦。</p><p>就留下我喜欢的一首诗作为结尾吧。</p><blockquote><p>Do not go gentle into that good night,<br />Old age should burn and rave at close of day;<br />Rage, rage against the dying of the light.</p><p>Though wise men at their end know dark is right,<br />Because their words had forked no lightning they<br />Do not go gentle into that good night.</p><p>Good men, the last wave by, crying how bright<br />Their frail deeds might have danced in a green bay,<br />Rage, rage against the dying of the light.</p><p>Wild men who caught and sang the sun in flight,<br />And learn, too late, they grieved it on its way,<br />Do not go gentle into that good night.</p><p>Grave men, near death, who see with blinding sight<br />Blind eyes could blaze like meteors and be gay,<br />Rage, rage against the dying of the light.</p><p>And you, my father, there on the sad height,<br />Curse, bless me now with your fierce tears, I pray.<br />Do not go gentle into that good night.<br />Rage, rage against the dying of the light.</p></blockquote><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/71409824_p0.jpg" alt="71409824_p0" /></p>]]></content>
    
    
    <summary type="html">10月份的个人总结</summary>
    
    
    
    <category term="月度总结" scheme="http://example.com/categories/%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Githubのcommit 规范</title>
    <link href="http://example.com/posts/8d089fc2f201/"/>
    <id>http://example.com/posts/8d089fc2f201/</id>
    <published>2024-10-15T15:13:14.000Z</published>
    <updated>2024-10-15T15:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载于<a href="https://gngtwhh.space/20248befcc09ef89/">Github提交规范 | WAHAHA’s blog (gngtwhh.space)</a></p></blockquote><h2 id="为什么要规定提交规范"><a class="markdownIt-Anchor" href="#为什么要规定提交规范"></a> 为什么要规定提交规范</h2><p>团队协作开发时，每个人提交都会编写自己的<code>commit message</code>。</p><p>如果不加以规范，最终项目就会杂乱不堪,难以管理。</p><p>一般的大厂，大型开源项目的<code>commit message</code>格式是非常一致的，便于管理，提高效率。</p><h2 id="git提交规范"><a class="markdownIt-Anchor" href="#git提交规范"></a> Git提交规范</h2><p>为了方便使用，我们避免了过于复杂的规定，格式较为简单且不限制中英文：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 注意冒号 : 后有空格</span><br><span class="line">// 如 feat(miniprogram): 增加了小程序模板消息相关功能</span><br></pre></td></tr></table></figure><span class="bubble-content">scope</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">选填 </span></span>表示commit的作用范围，如数据层、视图层，也可以是目录名称。<span class="bubble-content">subject</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">必填 </span></span>用于对commit进行简短的描述。<span class="bubble-content">type</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">必填 </span></span>表示提交类型，值有以下几种：<ul><li>feat - 新功能 feature</li><li>fix - 修复 bug</li><li>docs - 文档注释</li><li>style - 代码格式(不影响代码运行的变动)</li><li>refactor - 重构、优化(既不增加新功能，也不是修复bug)</li><li>perf - 性能优化</li><li>test - 增加测试</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 回退</li><li>build - 打包</li></ul><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/4C04B4E3A66D79005E4BB402DFC0E397.jpg" alt="4C04B4E3A66D79005E4BB402DFC0E397" /></p>]]></content>
    
    
    <summary type="html">简要的阐述了github中提交代码的格式规范</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Go修炼手册——接口</title>
    <link href="http://example.com/posts/3eaf2f8154b3/"/>
    <id>http://example.com/posts/3eaf2f8154b3/</id>
    <published>2024-10-12T07:14:46.000Z</published>
    <updated>2024-10-12T07:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章我们来学习Go语言中接口的概念。单论接口的使用来说，学习它并不困难。但更重要的是理解Go语言中接口的设计哲学，即“面向接口编程”和“面向对象编程”背后的底层逻辑。倘若不好好弄清楚接口的设计理念，那么在实际业务中也难以派上用场。</p><p>首先我们来介绍接口的定义，之后单独抽一小节来阐述接口的设计理念，最后详细介绍Go语言中接口的使用方法。</p><h2 id="接口约定"><a class="markdownIt-Anchor" href="#接口约定"></a> 接口约定</h2><p>接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。</p><p>要定义一个接口，使用<code>type</code>关键字即可。我们以中的io.Writer接口为例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class="line">    <span class="comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class="line">    <span class="comment">// and any error encountered that caused the write to stop early.</span></span><br><span class="line">    <span class="comment">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class="line">    <span class="comment">// Write must not modify the slice data, even temporarily.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Implementations must not retain p.</span></span><br><span class="line">Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，声明一个接口的方法很简单，只需要<code>type</code>+接口名+<code>interface</code>即可。</p><p>同时展示接口的使用方法，我们给出Fprintf函数的定义，它调用了io.Writer接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fmt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (<span class="type">int</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>io.Writer类型定义了函数Fprintf和这个函数调用者之间的约定。一方面这个约定需要调用者提供具体类型的值就像<code>*os.File</code>和<code>*bytes.Buffer</code>，这些类型都有一个特定签名和行为的Write的函数；另一方面这个约定保证了Fprintf接受任何满足io.Writer接口的值都可以工作。Fprintf函数没有假定写入的是一个文件或是一段内存，而是写入一个可以调用Write函数的值。</p><p>我们可以定义一个新的类型进行校验，下面<code>*ByteCounter</code>类型的Write方法，仅仅在丢弃写向它的字节前统计它的长度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteCounter <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ByteCounter)</span></span> Write(p []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    *c += ByteCounter(<span class="built_in">len</span>(p)) <span class="comment">// convert int to ByteCounter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于<code>*ByteCounter</code>满足io.Writer的约定，我们可以把它传入Fprintf函数中；Fprintf函数执行字符串格式化的过程不会去关注ByteCounter正确的累加结果的长度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c ByteCounter</span><br><span class="line">c.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">fmt.Println(c) <span class="comment">// &quot;5&quot;, = len(&quot;hello&quot;)</span></span><br><span class="line">c = <span class="number">0</span> <span class="comment">// reset the counter</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Dolly&quot;</span></span><br><span class="line">fmt.Fprintf(&amp;c, <span class="string">&quot;hello, %s&quot;</span>, name)</span><br><span class="line">fmt.Println(c) <span class="comment">// &quot;12&quot;, = len(&quot;hello, Dolly&quot;)</span></span><br></pre></td></tr></table></figure><p>通过以上的例子，我们已经掌握了接口的基本用法。接着我们来说说接口为什么要这么做，或者说，这么做是为了什么。</p><h2 id="接口的设计哲学"><a class="markdownIt-Anchor" href="#接口的设计哲学"></a> 接口的设计哲学</h2><p>已单独整理成一篇文章：<a href="https://adamben.top/posts/7a99acb03ff0/">番外：Go 接口的设计哲学 | Adam8en の 8log (adamben.top)</a></p><h2 id="接口类型"><a class="markdownIt-Anchor" href="#接口类型"></a> 接口类型</h2><p>接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。也就是说，实现接口是隐式的，并不需要“implement”关键字来显示实现。</p><p>接口类型可以直接在定义中写明方法，也可以通过组合已有的接口来定义新的接口类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io</span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span>&#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span>&#123;</span><br><span class="line">    Close() <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span>&#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriteCloser <span class="keyword">interface</span>&#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用到的语法和结构内嵌相似，我们可以用这种方式以一个简写命名一个接口，而不用声明它所有的方法。这种方式称为<strong>接口内嵌</strong>。当然，在接口里不使用内嵌而重写定义也是可以的，甚至使用混合风格都没有问题。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口的条件"><a class="markdownIt-Anchor" href="#实现接口的条件"></a> 实现接口的条件</h2><p>接口指定的规则非常简单：表达一个类型属于某个接口只要这个类型实现这个接口。这个规则甚至适用于等式右边本身也是一个接口类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout <span class="comment">// OK: *os.File has Write method</span></span><br><span class="line">w = <span class="built_in">new</span>(bytes.Buffer) <span class="comment">// OK: *bytes.Buffer has Write method</span></span><br><span class="line">w = time.Second <span class="comment">// compile error: time.Duration lacks Write method</span></span><br><span class="line"></span><br><span class="line">w = rwc <span class="comment">// OK: io.ReadWriteCloser has Write method</span></span><br><span class="line">rwc = w <span class="comment">// compile error: io.Writer lacks Close method</span></span><br></pre></td></tr></table></figure><p>接下来讲解几个细节：</p><h3 id="指针的接口与语法糖"><a class="markdownIt-Anchor" href="#指针的接口与语法糖"></a> 指针的接口与语法糖</h3><p>在介绍结构体的章节中，对于每一个命名过的具体类型T；它的一些方法的接收者是类型T本身，另一些方法的接受者则是一个 *T 的指针。然而，在T类型的参数上调用一个 *T 的方法是合法的，这是一个语法糖：只要这个参数是一个变量，编译器就会隐式的获取它的地址，然后调用接受者为 *T 的方法。这也意味着另一件事：T类型的值不拥有所有 *T 指针的方法，它可能只实现了更少的接口。</p><p>举例来说，IntSet类型的String方法的接收者是一个指针类型，我们可以在一个IntSet变量上调用这个方法，但我们不能在一个不能寻址的IntSet值上调用这个方法。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*IntSet)</span></span> String() <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> _ = IntSet&#123;&#125;.String() <span class="comment">// compile error: String requires *IntSet receiver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s IntSet</span><br><span class="line"><span class="keyword">var</span> _ = s.String() <span class="comment">// OK: s is a variable and &amp;s has a String method</span></span><br></pre></td></tr></table></figure><p>因此，由于只有<code>*IntSet</code>类型有String方法，所以也只有<code>*IntSet</code>类型实现了fmt.Stringer接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ fmt.Stringer = &amp;s <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">var</span> _ fmt.Stringer = s <span class="comment">// compile error: IntSet lacks String method</span></span><br></pre></td></tr></table></figure><p>这个小细节只要平时注意使用变量，不调用无地址的方法，基本不会遇到bug。</p><h3 id="接口类型封装"><a class="markdownIt-Anchor" href="#接口类型封装"></a> 接口类型封装</h3><p>就像信封封装和隐藏起信件来一样，接口类型封装和隐藏具体类型和它的值。即使具体类型有其它的方法，也只有接口类型暴露出来的方法会被调用到。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.Stdout.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// OK: *os.File has Write method</span></span><br><span class="line">os.Stdout.Close() <span class="comment">// OK: *os.File has Close method</span></span><br><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// OK: io.Writer has Write method</span></span><br><span class="line">w.Close() <span class="comment">// compile error: io.Writer lacks Close method</span></span><br></pre></td></tr></table></figure><p>也就是说，要表达接口必须要实现接口定义的所有方法，是<strong>一个大于或等于的关系</strong>。接口只强求你实现它规定的方法，至于数据类型如果还拥有其他接口未定义的方法，也依然不会报错。只是在调用接口时，你只能调用接口暴露的方法，而不能调用接口隐藏而数据类型持有的其他方法。</p><p>换句话来说，我们可以用接口来实现对数据类型的封装。</p><h3 id="空接口的妙用"><a class="markdownIt-Anchor" href="#空接口的妙用"></a> 空接口的妙用</h3><p>一个有更多方法的接口类型，比如io.ReadWriter，和少一些方法的接口类型例如io.Reader，进行对比；更多方法的接口类型会告诉我们更多关于它的值持有的信息，并且对实现它的类型要求更加严格。那么关于interface{}类型，它没有任何方法，请讲出哪些具体的类型实现了它？</p><p>这看上去好像没有用，但实际上interface{}被称为空接口类型是不可或缺的。因为空接口类型对实现它的类型没有要求，所以我们可以将任意一个值赋给空接口类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> any <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">any = <span class="literal">true</span></span><br><span class="line">any = <span class="number">12.34</span></span><br><span class="line">any = <span class="string">&quot;hello&quot;</span></span><br><span class="line">any = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">any = <span class="built_in">new</span>(bytes.Buffer)</span><br></pre></td></tr></table></figure><p>对于创建的一个interface{}值持有一个boolean，float，string，map，pointer，或者任意其它的类型；我们当然不能直接对它持有的值做操作，因为interface{}没有任何方法。后续我们会学习用类型断言来获取取interface{}中值的方法。</p><h3 id="接口类型实现的不同情况"><a class="markdownIt-Anchor" href="#接口类型实现的不同情况"></a> 接口类型实现的不同情况</h3><p>非空的接口类型比如io.Writer经常被指针类型实现，尤其当一个或多个接口方法像Write方法那样隐式的给接收者带来变化的时候。一个结构体的指针是非常常见的承载方法的类型，毕竟传递结构体的指针比传递结构体本身要有效率得多。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Counter)</span></span> Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    c.count += <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = &amp;Counter&#123;&#125;</span><br></pre></td></tr></table></figure><p>尽管指针类型是常见的实现方式，但并不是唯一的，其他引用类型（如切片和映射）也可以实现接口。从本质上来说，引用类型实现接口和指针实现接口是一样的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片实现</span></span><br><span class="line"><span class="keyword">type</span> Counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Counter)</span></span> Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    c.count += <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = &amp;Counter&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射实现</span></span><br><span class="line"><span class="keyword">type</span> Values <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Values)</span></span> Write(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = Values&#123;&#125;</span><br></pre></td></tr></table></figure><p>此外，基本类型（如<code>time.Duration</code>）也可以实现某些接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyDuration time.Duration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d MyDuration)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Duration(d).String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s fmt.Stringer = MyDuration(<span class="number">10</span> * time.Second)</span><br></pre></td></tr></table></figure><h2 id="flagvalue接口"><a class="markdownIt-Anchor" href="#flagvalue接口"></a> flag.Value接口</h2><p>学习掌握了一些关于接口的知识，接下来我们来学习Go语言的flag标准库是如何借助接口来帮助命令行标记定义新的符号的。</p><p>首先我们来学习<code>flag.value</code>接口的用法，他有两个方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flag</span><br><span class="line"><span class="comment">// Value is the interface to the value stored in a flag.</span></span><br><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span> &#123;</span><br><span class="line">    Set(<span class="type">string</span>) <span class="type">error</span></span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Set(string) error</code>：将标志的值解析为相应的类型。传入参数就是我们从命令行输入的数据，所以接口规定传入参数必须是字符串类型。</li><li><code>String() string</code>：返回该标志的当前值，作为字符串表示。即将当前标志的值回显出来，由于回显到命令行给用户查看，所以返回值必须是字符串形式。</li></ol><p>稍微细心一点的读者可能就注意到了，<code>flag.value</code>接口定义的两个方法是相反的。<code>Set()</code>方法要求将传入的字符串进行处理内化为标志的值，而<code>String()</code>方法则要求返回标志的值，并将其重新回显为字符串。</p><p>下面是一个示例，展示如何自定义一个 <code>flag.Value</code> 类型来处理复杂类型（例如，一个以逗号为标志分隔的列表）：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类型，用于存储逗号分隔的字符串列表</span></span><br><span class="line"><span class="keyword">type</span> CSV []<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 flag.Value 接口中的 Set 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CSV)</span></span> Set(value <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">*c = strings.Split(value, <span class="string">&quot;,&quot;</span>) <span class="comment">// 将输入的字符串按逗号分割，并存入 CSV 类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 flag.Value 接口中的 String 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CSV)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Join(*c, <span class="string">&quot;,&quot;</span>) <span class="comment">// 将列表转为逗号分隔的字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> csvFlag CSV</span><br><span class="line"><span class="comment">// 使用 flag.Var 函数，传入自定义类型的指针，并定义标志</span></span><br><span class="line">flag.Var(&amp;csvFlag, <span class="string">&quot;csv&quot;</span>, <span class="string">&quot;Comma-separated list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析命令行标志</span></span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出解析后的值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Parsed CSV flag:&quot;</span>, csvFlag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><p>首先定义了一个类型 <code>CSV</code>，用来存储解析后的字符串列表。</p></li><li><p>通过实现 <code>Set</code> 和 <code>String</code> 方法，让 <code>CSV</code> 满足 <code>flag.Value</code> 接口的要求。</p></li><li><p>使用 <code>flag.Var</code> 函数将 <code>CSV</code> 类型与命令行标志 <code>-csv</code> 绑定，这样可以通过命令行输入类似 <code>-csv=a,b,c</code> 的参数，它会自动解析成一个字符串切片 <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>。</p><p><code>&quot;Comma-separated list&quot;</code>是这个标志的描述，告诉用户该标志接受一个用逗号分隔的字符串列表。当用户在命令行输入 <code>go run main.go -h</code> 时，程序会输出类似如下的信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage of ./main:</span><br><span class="line">  -csv Comma-separated list</span><br><span class="line">    Comma-separated list</span><br></pre></td></tr></table></figure></li><li><p><code>flag.Parse()</code>: 这行代码会解析命令行输入的标志。如果用户在命令行中使用了 <code>-csv</code>，这个函数会根据用户输入的值对标志进行解析和赋值。在对flag变量进行定义后，必须调用一次<code>flag.Parse()</code>来解析标志。</p></li></ul><p>执行程序时，如果输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go -csv=a,b,c</span><br></pre></td></tr></table></figure><p>将输出：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Parsed</span> <span class="selector-tag">CSV</span> <span class="selector-tag">flag</span>: <span class="selector-attr">[a b c]</span></span><br></pre></td></tr></table></figure><p>通过这种方式，我们可以自定义更复杂的命令行标志解析逻辑。</p><h2 id="接口值"><a class="markdownIt-Anchor" href="#接口值"></a> 接口值</h2><p>一个接口的值，接口值，由两个部分组成，一个具体的类型和那个类型的值。它们被称为接口的动态类型和动态值。</p><p>下面4个语句中，变量w得到了3个不同的值。（开始和最后的值是相同的）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout</span><br><span class="line">w = <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">w = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>第一个语句<code>var w io.Writer</code>定义了变量w。</p><p>在Go语言中，变量总是被一个定义明确的值初始化，即使接口类型也不例外。对于一个接口的零值就是它的类型和值的部分都是nil。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011171355457.png" alt="image-20241011171355457" /></p><p>一个接口值基于<span class="bubble-content">它的动态类型被描述为空或非空</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">即当且仅当动态类型为空才会被判定为空接口。若动态值为空而动态类型不为空，该接口仍不为空 </span></span>，所以这是一个空的接口值。你可以通过使用 w==nil或者w!=nil来判断接口值是否为空。调用一个空接口值上的任意方法都会产生<span class="bubble-content">panic</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">w.Write([]byte(hello")) // panic: nil pointer dereference" </span></span>。</p><p>第二个语句<code>w = os.Stdout</code>将一个 <code>*os.File</code> 类型的值赋给变量w。这个接口值的动态类型被设为 *os.File 指针的类型描述符，它的动态值持有os.Stdout的拷贝。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011171553532.png" alt="image-20241011171553532" /></p><p>调用一个包含 <code>*os.File</code> 类型指针的接口值的<code>Write</code>方法，使得 <code>(*os.File).Write</code> 方法被调用。这个调用输出“hello”。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>通常在编译期，我们不知道接口值的动态类型是什么，所以一个接口上的调用必须使用动态分配。因为不是直接进行调用，所以编译器必须把代码生成在类型描述符的方法Write上，然后间接调用那个地址。这个调用的接收者是一个接口动态值的拷贝，os.Stdout。效果和下面这个直接调用一样：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.Stdout.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>第三个语句<code>w = new(bytes.Buffer)</code>给接口值赋了一个<code>*bytes.Buffer</code>类型的值。现在动态类型是*bytes.Buffer并且动态值是一个指向新分配的缓冲区的指针。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011172349067.png" alt="image-20241011172349067" /></p><p>最后，第四个语句<code>w = nil</code>将nil赋给了接口值。这个重置将它所有的部分都设为nil值，把变量w恢复到和它之前定义时相同的状态。</p><p>接口值可以使用<code>==</code>和<code>!＝</code>来进行比较。两个接口值相等仅当它们都是nil值，或者它们的动态类型相同并且动态值也根据这个动态类型的<code>==</code>操作相等。因为接口值是可比较的，所以它们可以用在 map的键或者作为switch语句的操作数。</p><p>然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将它们 行比较就会失败并且panic。</p><p>考虑到这点，接口类型是非常与众不同的。其它类型要么是安全的可比较类型（如基本类型和指针）要么是完全不可比较的类型（如切片，映射类型，和函数），但是在比较接口值或者包含了接口值的聚合类型时，我们必须要意识到潜在的panic。同样的风险也存在于使用接口作为map的键或者switch的操作数。只能比较你非常确定它们的动态值是可比较类型的接口值。</p><span class='p red'>再次强调！！！</span><p><strong>一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的</strong>。</p><p>思考下面的程序。当debug变量设置为true时，main函数会将f函数的输出收集到一个bytes.Buffer类型中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="literal">true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf *bytes.Buffer</span><br><span class="line">    <span class="keyword">if</span> debug &#123;</span><br><span class="line">    buf = <span class="built_in">new</span>(bytes.Buffer) <span class="comment">// enable collection of output</span></span><br><span class="line">    &#125;</span><br><span class="line">    f(buf) <span class="comment">// <span class="doctag">NOTE:</span> subtly incorrect!</span></span><br><span class="line">    <span class="keyword">if</span> debug &#123;</span><br><span class="line">    <span class="comment">// ...use buf...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If out is non-nil, output will be written to it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(out io.Writer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...do something...</span></span><br><span class="line">    <span class="keyword">if</span> out != <span class="literal">nil</span> &#123;</span><br><span class="line">    out.Write([]<span class="type">byte</span>(<span class="string">&quot;done!\n&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能会预计当把变量debug设置为false时可以禁止对输出的收集，但是实际上在out.Write方法调用时程序发生了panic：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> out != <span class="literal">nil</span> &#123;</span><br><span class="line">     out.Write([]<span class="type">byte</span>(<span class="string">&quot;done!\n&quot;</span>)) <span class="comment">// panic: nil pointer dereference</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当main函数调用函数f时，它给f函数的out参数赋了一个<code>*bytes.Buffer</code>的空指针，所以out的动态 值是nil。然而，它的动态类型是<code>*bytes.Buffer</code>，意思就是out变量是一个包含空指针值的<strong>非空接口</strong>。所以防御性检查<code>out!=nil</code>的结果依然是true。</p><h2 id="error接口"><a class="markdownIt-Anchor" href="#error接口"></a> error接口</h2><p>我们继续介绍error类型。很早开始我们就已经在使用error类型，其实他就是interface类型，这个类型有一个返回错误信息的单一方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个error最简单的方法就是调用errors.New函数，它会根据传入的错误信息返回一个新的error。整个errors包仅只有4行：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> errors</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="type">string</span>)</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> &amp;errorString&#123;text&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123; text <span class="type">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span></span> Error() <span class="type">string</span> &#123; <span class="keyword">return</span> e.text &#125;</span><br></pre></td></tr></table></figure><p>承载errorString的类型是一个结构体而非一个字符串，这是为了保护它表示的错误。我们也不想要重要的error例如 io.EOF和一个刚好有相同错误消息的error比较后相等。</p><p>调用errors.New函数是非常稀少的，因为有一个方便的封装函数fmt.Errorf，它还会处理字符串格式化。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fmt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(Sprintf(format, args...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a class="markdownIt-Anchor" href="#类型断言"></a> 类型断言</h2><p>类型断言是一个使用在接口值上的操作。语法是 <code>x.(T)</code>，其中 <code>x</code> 是接口类型，<code>T</code> 是要检查的目标类型。如果 <code>x</code> 的实际类型与 <code>T</code> 匹配，断言成功，返回 <code>x</code> 的值，类型为 <code>T</code>；如果不匹配，程序会抛出 <code>panic</code>。简而言之，类型断言用于确保接口的值可以安全地转换为某种具体类型。如果断言操作的对象是一个nil接口值，那么不论被断言的类型是什么这个类型断言都会失败。</p><p>第二个结果通常赋值给一个命名为ok的变量。如果这个操作失败了，那么ok就是false值，第一个结果等于被断言类型的零值。这个ok结果经常立即用于决定程序下面做什么。if语句的扩展格式让这个变的很简洁：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> f, ok := w.(*os.File); ok &#123;</span><br><span class="line">    <span class="comment">// ...use f...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于类型断言区别错误类型"><a class="markdownIt-Anchor" href="#基于类型断言区别错误类型"></a> 基于类型断言区别错误类型</h3><p>有了类型断言这个强力的工具，我们就可以轻松的判断错误类型。</p><p>对于给定的三个错误原因：文件已经存在（对于创建操作），找不到文件（对于读取操作），和权限拒绝。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> os</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPermission</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br></pre></td></tr></table></figure><p>对这些判断的一个缺乏经验的实现可能会去检查错误消息是否包含了特定的子字符串：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> not robust!</span></span><br><span class="line">    <span class="keyword">return</span> strings.Contains(err.Error(), <span class="string">&quot;file does not exist&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是处理I/O的逻辑在不同的平台上并不一定一样，所以这种方案缺乏健壮性。一个更可靠的方式是使用一个专门的类型来描述结构化的错误。实际上os标准库里也是这么实现的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> os</span><br><span class="line"><span class="comment">// PathError records an error and the operation and file path that caused it.</span></span><br><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Op <span class="type">string</span></span><br><span class="line">    Path <span class="type">string</span></span><br><span class="line">    Err <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PathError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Op + <span class="string">&quot; &quot;</span> + e.Path + <span class="string">&quot;: &quot;</span> + e.Err.Error()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面展示的IsNotExist，它会报出是否一个错误和 syscall.ENOENT或者和os.ErrNotExist相等，用于判断文件或目录是否不存在。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> ErrNotExist = errors.New(<span class="string">&quot;file does not exist&quot;</span>)</span><br><span class="line"><span class="comment">// IsNotExist returns a boolean indicating whether the error is known to</span></span><br><span class="line"><span class="comment">// report that a file or directory does not exist. It is satisfied by</span></span><br><span class="line"><span class="comment">// ErrNotExist as well as some syscall errors.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> pe, ok := err.(*PathError); ok &#123;</span><br><span class="line">    err = pe.Err <span class="comment">//提取内部的真实错误原因</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err == syscall.ENOENT || err == ErrNotExist</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际调用如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err := os.Open(<span class="string">&quot;/no/such/file&quot;</span>)</span><br><span class="line">fmt.Println(os.IsNotExist(err)) <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>Q：为什么不直接比较 err 是否等于 syscall.ENOENT 或 ErrNotExist？</p><p>A：在 Go 中，错误经常被“包装”起来。例如，<code>PathError</code> 就是一种错误包装，它不仅包含了底层的系统错误，还附带了文件路径和操作类型的信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&amp;os.PathError&#123;</span><br><span class="line">    Op:   <span class="string">&quot;open&quot;</span>,</span><br><span class="line">    Path: <span class="string">&quot;/invalid/path&quot;</span>,</span><br><span class="line">    Err:  syscall.ENOENT,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，err 是 *PathError，而不是 syscall.ENOENT。直接比较 err == syscall.ENOENT 是不会成功的，因为 err 包装了更多的上下文信息，而不是简单的 syscall.ENOENT。<br />通过类型断言，IsNotExist 函数可以提取 PathError 内部的真正错误 (pe.Err)，然后再比较底层的错误。这就是为什么需要先检查 err 是否是 *PathError 类型，并提取内部的 Err 进行判断的原因。</p></blockquote><h3 id="基于类型断言询问行为"><a class="markdownIt-Anchor" href="#基于类型断言询问行为"></a> 基于类型断言询问行为</h3><p>有了类型断言，我们可以判断传入的变量是否满足特定类型的要求，从而实施不同的操作。</p><p>假设一个情形：我们需要向web服务器写入HTTP头字段。io.Writer接口类型的变量w代表HTTP响应；写入它的字节最终被发送到某个人的web浏览器上。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHeader</span><span class="params">(w io.Writer, contentType <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, err := w.Write([]<span class="type">byte</span>(<span class="string">&quot;Content-Type: &quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, err := w.Write([]<span class="type">byte</span>(contentType)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Write方法需要传入一个byte切片而我们希望写入的值是一个字符串，所以我们需要使用<code>[]byte(...)</code>进行转换。这个转换会消耗额外的性能，并且会使得服务器的速度变慢。能否优化掉这个类型转换呢？</p><p>如果我们回顾net/http包中的内幕，我们知道在这个程序中的w变量持有的动态类型也有一个允许字符串高效写入的<code>WriteString</code>方法；这个方法会避免去分配一个临时的拷贝。所以我们可以直接调用<code>WriteString</code>方法来优化掉原先的方法。</p><p>但是这里存在一个问题，我们不能对任意io.Writer类型的变量w，假设它也拥有<code>WriteString</code>方法。但是我们可以定义一个只有这个方法的新接口并且使用类型断言来检测是否w的动态类型满足这个新接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writeString writes s to w.</span></span><br><span class="line"><span class="comment">// If w has a WriteString method, it is invoked instead of w.Write.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeString</span><span class="params">(w io.Writer, s <span class="type">string</span>)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">type</span> stringWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    WriteString(<span class="type">string</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sw, ok := w.(stringWriter); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> sw.WriteString(s) <span class="comment">// avoid a copy</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w.Write([]<span class="type">byte</span>(s)) <span class="comment">// allocate temporary copy</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHeader</span><span class="params">(w io.Writer, contentType <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, err := writeString(w, <span class="string">&quot;Content-Type: &quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, err := writeString(w, contentType); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的writeString函数使用一个类型断言来获知一个普遍接口类型的值是否满足一个更加具体的接口类型；并且如果满足，它会使用这个更具体接口的行为。这个技术可以被很好的使用，不论这个被询问的接口是一个标准如io.ReadWriter，或者用户定义的如stringWriter接口。</p><h3 id="类型分支"><a class="markdownIt-Anchor" href="#类型分支"></a> 类型分支</h3><p>基于断言区别error类型也好，质询行为也罢，本质上都是通过类型断言的结果来执行不同的操作。在类型分支这一小节，本质是不变的，我们来看看如果类型断言的分支较多时如何处理。假设我们使用Go语言查询一个SQL数据库，Go调用的API会干净地将查询中固定的部分和变化的部分分开。一个调用的例子可能看起来像这样：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listTracks</span><span class="params">(db sql.DB, artist <span class="type">string</span>, minYear, maxYear <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    result, err := db.Exec(</span><br><span class="line">    <span class="string">&quot;SELECT * FROM tracks WHERE artist = ? AND ? &lt;= year AND year &lt;= ?&quot;</span>,</span><br><span class="line">    artist, minYear, maxYear)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exec方法使用SQL字面量替换在查询字符串中的每个’?'；SQL字面量表示相应参数的值，它有可能是一个布尔值，一个数字，一个字符串，或者nil空值。用这种方式构造查询可以帮助避免SQL注入攻击。在Exec函数内部可能会找到像下面这样的一个函数，它会将每一个参数值转换成它的SQL字面量符号：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlQuote</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NULL&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> _, ok := x.(<span class="type">int</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> _, ok := x.(<span class="type">uint</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b, ok := x.(<span class="type">bool</span>); ok &#123;</span><br><span class="line">        <span class="keyword">if</span> b &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;FALSE&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> s, ok := x.(<span class="type">string</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> sqlQuoteString(s) <span class="comment">// (not shown)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unexpected type %T: %v&quot;</span>, x, x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句可以简化if-else链，如果这个if-else链对一连串值做相等测试。一个相似的type switch（类型分支）可以简化类型断言的if-else链。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>, <span class="type">uint</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类型分支像普通的switch语句一样，它的运算对象是x.(type)——它使用了关键词字面量type——并且每个case有一到多个类型。一个类型分支基于这个接口值的动态类型使一个多路分支有效。和普通switch语句一样，每一个case会被顺序的进行考虑，并且当一个匹配找到时，这个case中的内容会被执行。当一个或多个case类型是接口时，case的顺序就会变得很重要，因为可能会有两个case同时匹配的情况。</p><p>使用类型分支的扩展形式来重写sqlQuote函数会让这个函数更加的清晰：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlQuote</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> x := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NULL&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>, <span class="type">uint</span>:</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x) <span class="comment">// x has type interface&#123;&#125; here.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> x &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;FALSE&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">    <span class="keyword">return</span> sqlQuoteString(x) <span class="comment">// (not shown)</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unexpected type %T: %v&quot;</span>, x, x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管sqlQuote接受一个任意类型的参数，但是这个函数只会在它的参数匹配类型分支中的一个case时运行到结束；其它情况的它会panic出“unexpected type”消息。虽然x的类型是interface{}，但是我们把它认为是一个int，uint，bool，string，和nil值的discriminated union（可识别联合）</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>一般来说，接口被以两种不同的方式使用。</p><p>第一种方式是<span class='p red'>以方法为核心的接口</span>。典型例子是<code>io.Reader</code>、<code>io.Writer</code>、<code>fmt.Stringer</code>、<code>sort.Interface</code>、<code>http.Handler</code> 和 <code>error</code>。在这种方式下，<strong>接口的方法</strong>定义了多个实现该接口的具体类型之间的相似性。<strong>重点</strong>在于接口所定义的方法，而不是具体的实现类型。实现该接口的类型只要实现了接口规定的方法即可，具体的类型细节是隐藏的。例如，<code>io.Writer</code> 接口定义了一个写入功能，不管它是写入文件、网络、内存还是其他地方，只要它实现了 <code>Write</code> 方法，它就可以被当作 <code>io.Writer</code> 使用。</p><p>第二种方式是<span class='p red'>以类型为核心的接口</span>。在这种方式下，接口的作用类似于一个可以持有不同具体类型的“容器”。<strong>重点</strong>在于具体的类型，而不是接口的方法本身。接口值可以持有各种不同的具体类型，程序员可以使用<strong>类型断言</strong>或类型判断，来区别接口持有的不同类型，并对每个类型执行不同的操作。不像第一种方式，类型的细节并没有被隐藏，接口只是起到了一种“包裹”不同类型的作用。这种方式类似于“联合类型”或“可辨识联合”，编译器或程序可以根据实际类型的不同做出不同的处理。</p><p>在设计新包时，Go的新手程序员往往会先定义一套接口，然后再去实现一些具体类型来满足这些接口。这种做法的结果是产生了许多接口，而每个接口可能只有一个实现。这其实是多余的抽象，同时也带来了运行时的性能开销。你可以通过导出的机制来控制类型的方法或结构体字段是否在包外可见。接口只有在需要让两个或更多具体类型以相同方式处理时才有必要引入。</p><p>当然，也有一个例外。如果一个具体类型由于依赖关系无法与接口在同一个包中实现，这时引入接口有助于解耦两个包，避免相互依赖。</p><p>在Go中，接口设计的一个核心原则就是简化：接口应该足够小，仅包含所需的方法。更小的接口意味着更少的方法，像 <code>io.Writer</code> 或 <code>fmt.Stringer</code> 这样的接口通常只包含一个方法。这样的设计不仅使得接口更容易被新的类型实现，也符合“只要你需要的东西”这一设计哲学。</p><p>至此，我们对Go的方法和接口进行了总结。虽然Go对面向对象编程提供了良好的支持，但这并不意味着你必须一切都用面向对象风格来解决。并非所有事物都需要当作对象来处理。独立的函数、未封装的数据结构在许多场景中同样有用。你可以回顾一下前几章的例子，像 <code>input.Scan</code> 这样的方法使用的次数不到二十次，而像 <code>fmt.Printf</code> 这样的函数被频繁调用，展示了函数和非对象化设计在Go中的仍然占有一席之地。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2FAA1B2C149C8C4BFF45431A929E653C.jpg" alt="2FAA1B2C149C8C4BFF45431A929E653C" /></p>]]></content>
    
    
    <summary type="html">介绍了Go语言中接口的用法，详细的列举了接口的概念到运用实现。</summary>
    
    
    
    <category term="Go!Go!Go!" scheme="http://example.com/categories/Go-Go-Go/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>OS Lab</title>
    <link href="http://example.com/posts/30b9345756ad/"/>
    <id>http://example.com/posts/30b9345756ad/</id>
    <published>2024-10-10T11:11:27.000Z</published>
    <updated>2024-11-05T11:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>OS Lab</span><span class='p center small'>Archive of operating system experiments</span><p>此博客用于归纳操作系统实验中的代码，充当说明文档。着重于讲解代码调试过程与原理，附带一些参考资料。</p><p>你可以在这里找到我的所有实验代码：</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Adam8en/OS-experiment-archive"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Adam8en&repo=OS-experiment-archive&theme=algolia&show_owner=true"/></a><p>需要注意的是，本代码是基于WSL平台开发测试的，如果你是在Windows操作系统上编写代码，将无法复现本博客的实验并将代码编译成可执行文件。</p><p>最后，祝阅读愉快。</p><h2 id="lab01"><a class="markdownIt-Anchor" href="#lab01"></a> Lab01</h2><p>进程和线程是现代操作系统中最重要的概念，通过多线程程序设计，操作系统能够充分利用计算机系统中的各种硬件资源，极大的提高系统效率。本实验主要考查对多线程概念的理论，以及利用C/C++语言编程实现多线程程序，学会创建进程，掌握信号量的使用，以实现多线程的同步。</p><h3 id="q1"><a class="markdownIt-Anchor" href="#q1"></a> Q1</h3><blockquote><p>编写程序，在程序中根据用户输入的可执行程序名称，创建一个进程来运行该可执行程序。</p></blockquote><p>在linux系统中，可以通过<span class="bubble-content">fork()</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">fork函数将运行着的程序分成2个（几乎）完全一样的进程，每个进程都启动一个从代码的同一位置开始执行的线程。这两个进程中的线程继续执行，就像是两个用户同时启动了该应用程序的两个副本。 </span></span>函数创建一个新的进程，并且返回子进程的pid。我们可以先获取要执行的程序名，然后在子进程中用<span class="bubble-content">execlp()</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">一旦执行完execlp函数，立刻会去执行新的程序。新的程序会替换当前程序、代码段、数据段、堆、栈。经常与多进程组合使用，用一个子进程单独执行execlp程序 </span></span>函数执行程序，父进程只需等待子进程结束即可。</p><p>可以通过pid来辨别父进程和子进程。由于子进程pid为0，所以可以很方便的构造出一个if-else语句根据当前运行进程的pid来判断该执行子进程操作还是父进程操作。</p><p>以下是第一问的源代码：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> path[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> programeName[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    getcwd(path,<span class="keyword">sizeof</span>(path));</span><br><span class="line">    <span class="built_in">strcat</span>(path, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of executable file\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,programeName);</span><br><span class="line">    <span class="built_in">strcat</span>(path,programeName);</span><br><span class="line">    <span class="comment">//获取程序名并且和路径拼接</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//fork failed</span></span><br><span class="line">        perror(<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//子进程执行操作</span></span><br><span class="line">        execlp(path,programeName,(<span class="type">char</span>*)<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// execlp函数执行成功后将不会返回，若返回说明执行失败，所以需要exit(1)</span></span><br><span class="line">        perror(<span class="string">&quot;execlp failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//父进程执行操作</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;over.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>话说回来，这道题最开始做的时候我还看错了，以为是要用<strong>线程</strong>而非<strong>进程</strong>实现这个操作，所以还搓了一个线程版本。</p><p>用线程实现的话，就不宜继续用<code>execlp()</code>函数了。使用线程的方式调用 <code>execlp()</code>，这通常不太常见，因为线程替换映像可能会导致复杂性。一般来说，调用外部程序通常是在独立的进程中进行。所以可以通过<strong>线程执行一个外部程序</strong>的方式来模拟<code>fork()</code> 的效果，即使用 <code>system()</code> 调用外部程序，而不是用 <code>execlp()</code>，这样不会替换进程映像。</p><p>之后，主线程使用 <code>pthread_join()</code> 来等待子线程执行完毕。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> path[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> programeName[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">myFunc</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用 system() 来执行外部程序，保持主线程的控制权</span></span><br><span class="line">    <span class="type">int</span> ret = system(path);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;system() failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> myThread;</span><br><span class="line"></span><br><span class="line">    getcwd(path,<span class="keyword">sizeof</span>(path));</span><br><span class="line">    <span class="built_in">strcat</span>(path, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of executable file\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,programeName);</span><br><span class="line">    <span class="built_in">strcat</span>(path,programeName);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;myThread, <span class="literal">NULL</span>, myFunc, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create thread&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_join(myThread,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230224284.png" alt="image-20241010230224284" /></p><h3 id="q2"><a class="markdownIt-Anchor" href="#q2"></a> Q2</h3><blockquote><p>假设有四个线程，第一个线程输出字符串 “This”，第二个线程输出字符串 “is”, 第三个线程输出字符串“Jinan”, 第四个线程输出字符串 “University！”。编制C/C++程序，在主程序main函数中创建四个线程并依次启动，设计信号量(Semaphore)同步机制，当主程序运行时，屏幕输出的结果是字符串“This is Jinan University!”</p></blockquote><p>要实现这个功能，可以使用四个信号量，分别控制每个线程的执行顺序。每个线程在输出其字符串之前需要等待对应的信号量信号，然后输出字符串并释放下一个线程的信号量。在创建线程后，我们可以在主函数中先启动第一个线程，然后依次通过信号量控制后续线程的执行。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_arr[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_1</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_2</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;is &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_3</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Jinan &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_4</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;University!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;threads[<span class="number">0</span>],<span class="literal">NULL</span>,Func_1,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">1</span>],<span class="literal">NULL</span>,Func_2,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">2</span>],<span class="literal">NULL</span>,Func_3,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">3</span>],<span class="literal">NULL</span>,Func_4,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        pthread_join(threads[i],<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        sem_destroy(&amp;sem_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230244574.png" alt="image-20241010230244574" /></p><h3 id="q3"><a class="markdownIt-Anchor" href="#q3"></a> Q3</h3><blockquote><p>本题基于实验题目2。在主函数中依次启动四个线程，修改主程序，使得给定用户任意输入的整数n，程序输出n个同样的字符串“This is Jinan University!”</p></blockquote><p>一个很简单的基于（2）的变体。在（2）的基础上，只需要提前获取输入的n并且创建一个循环即可。需要注意的是，每次循环都要重新初始化信号量，保证线程之间的有序执行。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_arr[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_1</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_2</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;is &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_3</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Jinan &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_4</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;University!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number to loop execute threads\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)&#123;</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">0</span>],<span class="literal">NULL</span>,Func_1,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">1</span>],<span class="literal">NULL</span>,Func_2,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">2</span>],<span class="literal">NULL</span>,Func_3,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">3</span>],<span class="literal">NULL</span>,Func_4,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            pthread_join(threads[i],<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        sem_destroy(&amp;sem_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230257569.png" alt="image-20241010230257569" /></p><h2 id="lab02"><a class="markdownIt-Anchor" href="#lab02"></a> Lab02</h2><p>多线程是现代操作系统的核心概念，是能够保障操作系统正常运转的基础。Windows、Linux等操作系统向用户提供了多线程、信号量等函数接口，使用户可以通过C/C++、JAVA等主流编程语言来访问调用，以实现用户级线程的创建、运行、管理等功能。本次实验的目标如下：</p><ol><li>掌握Windows、Linux系统中多线程、信号量等的相关C函数使用；初步掌握多线程编程。</li><li>理解多线程的运行和调度原理；学会设计临界区/信号量来实现多个线程之间的互斥。</li></ol><h3 id="q1-2"><a class="markdownIt-Anchor" href="#q1-2"></a> Q1</h3><blockquote><p>Mary和Sally是亲姐妹，她们有一个共同的银行账户，她们可以分别到ATM机取款；爸爸，妈妈，奶奶，爷爷，舅舅也可以分别到ATM机给银行账户存钱。设账户的初始余额为10元。爸爸，妈妈，奶奶，爷爷，舅舅每次分别存入10，20，30，40，50元，每个人分别存款2次。Mary和Sally每次分别取50和100元，每个人分别取款2次。存款和取款的顺序是随机的。假设Mary和Sally的银行账户是可借记的，即当余额少于取款额时，仍旧能够取款成功。利用临界区(Windows系统)或者mutex信号量(Linux系统)编制程序来模拟上述存取款过程，在主程序结束时将账户的最后余额输出，并人工验证一下是否正确。</p><p>实验要求：只能建立一个存款函数Deposit()和一个取款函数Withdraw()；每个家长在每次存款时都要创建1个存款线程，以Deposit()作为线程函数，将家长的称呼和存款金额传递给存款线程，以完成存款操作。同样的，Mary和Sally每人每次在取款时都要创建1个取款线程，以Withdraw()作为线程函数，将取款人的称呼和取款金额传递给取款线程，以完成取款操作。假设Mary和Sally的银行账户是可借记的，即当余额少于取款额时，仍旧能够取款成功。</p><p>实验提示：用srand()来设定随机数种子；用rand()函数来产生每次存款/取款的家长/取款人。定义一个结构体数组，用来保存每个存款/取款人的称呼和存款/取款金额，然后在创建线程时将相应的结构体作为参数传递给线程。</p><p>银行账户是公共变量，对它的操作需要用临界区来进行保护。</p></blockquote><p>本题的重点在于临界区保护，也就是说要用到临界区/互斥锁。可以大致把本体分为三个部分实现：</p><ol><li>实现线程函数Deposit和Withdraw</li><li>随机生成操作人员对银行账户进行操作</li><li>向对应的线程函数传递操作人员的信息</li></ol><h4 id="实现线程函数"><a class="markdownIt-Anchor" href="#实现线程函数"></a> 实现线程函数</h4><p>两个函数的实现逻辑不难。注意银行帐户是共享变量，在多线程并发操作时必须要加锁来避免条件竞争。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机生成操作人员"><a class="markdownIt-Anchor" href="#随机生成操作人员"></a> 随机生成操作人员</h4><p>用<code>rand()</code>函数生成随机数，同时限定每一个随机数的出现次数，因为每个家庭成员只有两次操作机会。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 保证启动操作数量个线程</span></span><br><span class="line">        <span class="comment">// 取随机数生成随机的操作人员，如果该人员的操作次数已经用尽，就跳过该人员</span></span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们给操作人员一个<code>op_times</code>属性，代表该家庭成员剩余的操作次数，当操作次数为0时代表该家庭成员已经没有操作机会。所以在对操作人员进一步操作时需要先检查该成员是否还有操作机会，如果没有机会就跳过后续操作随机生成下一个操作人员。</p><p>操作人员的身份（rand_guy）确定后，需要对预备传递给线程的操作人员信息进行填充，于是编写一个<code>load_operator()</code>函数进行处理。这里主要是填充操作人员的姓名、存取款状态、操作钱款。</p><p>注意为operator填充姓名时并没有直接指向家庭成员的姓名，而是用<span class="bubble-content">strdup函数</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">strdup( ) 函数是c语言中常用的一种字符串拷贝库函数，一般和 free( ) 函数成对出现。</span></span>拷贝了一份家庭成员姓名字符串。后续需要用<code>free()</code>释放掉姓名空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    <span class="comment">//处理向线程发送的数据，即填充操作人员的姓名、存取款状态、操作钱款</span></span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); <span class="comment">// 填充操作人员的姓名</span></span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; <span class="comment">// 根据随机到的人员编号判断该成员是存款还是取款</span></span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy]; <span class="comment">// 操作钱款对应操作人员的编号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向线程函数传递操作人员信息"><a class="markdownIt-Anchor" href="#向线程函数传递操作人员信息"></a> 向线程函数传递操作人员信息</h4><p>首先要判断操作成员是取款还是存款，接着传递操作人员的信息给对应的线程函数。注意线程函数只能接受指针作为传入参数，在线程开始时会去读取指针指向地址的数据。所以需要为传递的操作人员动态分配一片内存空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); <span class="comment">// 装载操作人员的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; <span class="comment">// 根据操作人员的信息决定调用存款还是取款线程</span></span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里说一下线程函数的传递参数机制。线程函数的定义是：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">myFunc</span><span class="params">(<span class="type">void</span> *)</span></span><br><span class="line">&#123;</span><br><span class="line">   my code here to <span class="keyword">do</span> something…</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到线程函数的接收值和返回值都是<code>void*</code>类型，即空指针类型。pthread调用的函数要求入参是一个<code>void*</code>的指针，必须将数据强转成这个指针用来传递参数。在函数内部，必须要再手动转换回原来的参数类型来使用这个参数。这种做法叫做<span class='p yellow'>类型擦除</span>，跟go的interface{}有着异曲同工之妙，C的泛型编程基本上都是用的<code>void*</code>这样的方法来传递参数。</p><p>所以我们在线程函数调用时传递了operator的操作人员信息后，在线程函数内部要手动将指针转换回它的数据类型：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为什么要为operator动态分配内存而不使用临时变量，是因为对临时变量的值的更新只是在同一片内存空间的位置上进行迭代。这样调用线程函数时传递的指针指向的都是同一片空间，多线程读取操作人员信息时就会出现<span class='p red'>条件竞争</span>。所以必须使用动态内存分配来存储操作人员信息，并在线程内对操作人员的内存空间进行释放。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name; <span class="comment">// 家庭成员姓名</span></span><br><span class="line">    <span class="type">int</span> op_amount; <span class="comment">// 操作人员操作的钱款</span></span><br><span class="line">    <span class="type">int</span> op_times; <span class="comment">// 剩余的操作次数，每人默认2次</span></span><br><span class="line">    <span class="type">int</span> is_withdraw; <span class="comment">// 1代表为退款操作，0是储蓄操作</span></span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member members[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Dad&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mom&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandma&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandpa&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Uncle&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mary&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Sally&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> deposit_num[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> withdraw_num[] = &#123;<span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> bank_account = <span class="number">10</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> Lock;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 取款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account -= operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s withdrew %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    <span class="comment">//处理向线程发送的数据，即填充操作人员的姓名、存取款状态、操作钱款</span></span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); <span class="comment">// 填充操作人员的姓名</span></span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; <span class="comment">// 根据随机到的人员编号判断该成员是存款还是取款</span></span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy]; <span class="comment">// 操作钱款对应操作人员的编号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 操作主体函数，处理随机存取逻辑并启动多线程</span></span><br><span class="line">    <span class="type">int</span> num = <span class="keyword">sizeof</span>(members) / <span class="keyword">sizeof</span>(members[<span class="number">0</span>]); <span class="comment">//成员数量</span></span><br><span class="line">    <span class="type">int</span> operate_num = <span class="number">0</span>; <span class="comment">// 操作次数，即存取款次数之和，本体应为2*7=14</span></span><br><span class="line">    <span class="type">int</span> thread_index = <span class="number">0</span>; <span class="comment">// 线程计数下标</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="comment">// 计算操作次数</span></span><br><span class="line">        operate_num += members[i].op_times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span>* threads = <span class="built_in">malloc</span>(operate_num * <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>)); <span class="comment">// 为操作总数动态分配相同个数的线程</span></span><br><span class="line">    <span class="keyword">if</span> (threads == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc failed for threads&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 保证启动操作数量个线程</span></span><br><span class="line">        <span class="comment">// 取随机数生成随机的操作人员，如果该人员的操作次数已经用尽，就跳过该人员</span></span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        因为向线程传递的参数必须是一个指向特定地址的指针，线程启动后将向该地址读取数据</span></span><br><span class="line"><span class="comment">        所以必须用动态内存分配一个新的内存空间储存操作人员信息，并将该指针传递给线程</span></span><br><span class="line"><span class="comment">        如果用临时变量，操作人员的信息将只在一片相同的地址空间上进行迭代</span></span><br><span class="line"><span class="comment">        多线程读取数据时就会出现条件竞争</span></span><br><span class="line"><span class="comment">        故而此处必须使用动态内存分配，并在线程操作执行结束时由线程对分配的内存进行释放</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); <span class="comment">// 装载操作人员的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; <span class="comment">// 根据操作人员的信息决定调用存款还是取款线程</span></span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_index; i++) &#123; <span class="comment">// 在多线程并发结束后等待多线程结束</span></span><br><span class="line">        pthread_join(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(threads); <span class="comment">// 操作结束，释放对线程分配的内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    pthread_mutex_init(&amp;Lock, <span class="literal">NULL</span>); <span class="comment">// 初始化互斥锁</span></span><br><span class="line"></span><br><span class="line">    operate(); <span class="comment">// 进行操作</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final bank account: %d\n&quot;</span>, bank_account); <span class="comment">// 回显最后银行账户的信息</span></span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;Lock); <span class="comment">// 销毁互斥锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241013143021163.png" alt="image-20241013143021163" style="zoom:80%;" /><h3 id="q2-2"><a class="markdownIt-Anchor" href="#q2-2"></a> Q2</h3><blockquote><p>本题的要求跟题目一的要求一样，唯一区别是：在本题中假设Mary和Sally的银行账户是不可借记的，即当余额少于取款额时，不能取款，取款线程需要阻塞等待直到账户有足够的钱。</p></blockquote><p>为了满足题目的新要求，即 <strong>Mary 和 Sally 的银行账户在余额不足时无法取款，取款线程需要阻塞等待</strong>，需要对取款操作做一些修改。我们可以使用条件变量 (<code>pthread_cond_t</code>) 来实现线程阻塞和唤醒的机制：<a href="https://blog.csdn.net/eidolon_foot/article/details/134509797">【C语言】条件变量(pthread_cond_t)_c语言条件变量-CSDN博客</a></p><ol><li><strong>添加条件变量</strong>：使用条件变量 <code>pthread_cond_t</code> 来实现取款线程的阻塞和唤醒。当余额不足时，取款线程会进入等待状态，直到有足够的钱进行取款。</li><li><strong>取款操作检测是否阻塞</strong>：在取款时检查余额。如果余额不足，则阻塞线程等待条件变量的信号。</li><li><strong>存款操作唤醒取款线程</strong>：每当有存款时，需要唤醒所有等待中的取款线程，检查是否现在可以取款。</li><li><strong>线程同步</strong>：由于涉及到多线程的等待和唤醒操作，所有操作仍需保证线程安全，继续使用互斥锁 <code>pthread_mutex_t</code>。</li></ol><p>所以只需要对<code>Deposit()</code>和<code>Withdraw()</code>这两个线程函数进行修改即可：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：存款时将尝试唤醒所有条件变量，以恢复阻塞的取款线程</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 存款操作...</span></span><br><span class="line">    pthread_cond_broadcast(&amp;Cond); <span class="comment">// 存款后，唤醒所有条件变量，再次尝试取款</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：若取款后余额将为负数，则阻塞线程并释放锁</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span>(bank_account&lt;operator-&gt;op_amount)&#123;</span><br><span class="line">        <span class="comment">// 若此时银行余额小于取款操作钱款，则阻塞线程，释放锁。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s is waiting to withdraw %d, but only %d is available, operation blockage.\n&quot;</span>,</span><br><span class="line">        operator-&gt;name,operator-&gt;op_amount,bank_account);</span><br><span class="line">        pthread_cond_wait(&amp;Cond,&amp;Lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name; </span><br><span class="line">    <span class="type">int</span> op_amount; </span><br><span class="line">    <span class="type">int</span> op_times; </span><br><span class="line">    <span class="type">int</span> is_withdraw; </span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member members[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Dad&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mom&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandma&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandpa&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Uncle&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mary&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Sally&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> deposit_num[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> withdraw_num[] = &#123;<span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> bank_account = <span class="number">10</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> Lock;</span><br><span class="line"><span class="type">pthread_cond_t</span> Cond;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：存款时将尝试唤醒所有条件变量，以恢复阻塞的取款线程</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_cond_broadcast(&amp;Cond); <span class="comment">// 存款后，唤醒所有条件变量，再次尝试取款</span></span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：若取款后余额将为负数，则阻塞线程并释放锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(bank_account&lt;operator-&gt;op_amount)&#123;</span><br><span class="line">        <span class="comment">// 若此时银行余额小于取款操作钱款，则阻塞线程，释放锁。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s is waiting to withdraw %d, but only %d is available, operation blockage.\n&quot;</span>,</span><br><span class="line">        operator-&gt;name,operator-&gt;op_amount,bank_account);</span><br><span class="line">        pthread_cond_wait(&amp;Cond,&amp;Lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bank_account -= operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s withdrew %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); </span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; </span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="keyword">sizeof</span>(members) / <span class="keyword">sizeof</span>(members[<span class="number">0</span>]); </span><br><span class="line">    <span class="type">int</span> operate_num = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> thread_index = <span class="number">0</span>; </span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        operate_num += members[i].op_times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span>* threads = <span class="built_in">malloc</span>(operate_num * <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>)); </span><br><span class="line">    <span class="keyword">if</span> (threads == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc failed for threads&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line"></span><br><span class="line">        Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; </span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_index; i++) &#123;</span><br><span class="line">        pthread_join(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(threads); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    pthread_mutex_init(&amp;Lock, <span class="literal">NULL</span>); </span><br><span class="line">    pthread_cond_init(&amp;Cond,<span class="literal">NULL</span>); <span class="comment">// 初始化条件变量</span></span><br><span class="line"></span><br><span class="line">    operate(); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final bank account: %d\n&quot;</span>, bank_account); </span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;Lock); </span><br><span class="line">    pthread_cond_destroy(&amp;Cond); <span class="comment">// 销毁条件变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241013143933424.png" alt="image-20241013143933424" style="zoom:50%;" /><p>思考：假如已经有两个或多个取款线程进入阻塞，然后存款线程调用<code>pthread_cond_broadcast</code>唤醒所有阻塞的线程。此时会不会出现竞争？哪个被唤醒的线程会获得锁？</p><p>当存款线程通过 <code>pthread_cond_broadcast</code> 唤醒多个阻塞的取款线程时，<strong>确实可能发生竞争</strong>，但竞争的结果是受互斥锁保护的。每次只有一个线程能够获得锁并执行操作，其他线程会阻塞在锁上，直到锁被释放。</p><p>唤醒的线程是以一种不确定的顺序重新争夺锁的，具体哪个线程会优先获得锁取决于操作系统的调度策略。常见的调度策略可能是<strong>先唤醒的线程</strong>优先获得锁，但这并不是严格保证的，取决于内核调度器的实现。</p><p>如果只希望唤醒一个线程，可以用 <code>pthread_cond_signal</code> 代替 <code>pthread_cond_broadcast</code>，这只会唤醒一个等待的线程。不更改也没有关系，因为多线程争夺互斥锁对于共享变量是安全的，这种随机性不会对程序造成危害。</p><h2 id="lab03"><a class="markdownIt-Anchor" href="#lab03"></a> Lab03</h2><p>进程调度是现代操作系统中最核心的部分，它是现代操作系统能够实现多用户、多任务功能的根本保障。早期的批处理系统、不同版本的Windows、Linux等操作系统分别采用了不同的进程调度机制，例如，FCFS调度算法、SJF调度算法、HRRN调度算法、RR调度算法、多级反馈队列调度算法等。本次实验的目标如下：</p><ol><li>掌握Windows、Linux操作系统中进程调度机制及其原理。</li><li>学会用高级语言来模拟实现一些常用的非抢占式(Non-preemptive)进程调度算法。</li></ol><h3 id="q1-3"><a class="markdownIt-Anchor" href="#q1-3"></a> Q1</h3><blockquote><p>假设有10个进程，每个进程的到达时间(1-20之间的整数)、需要的运行时间(10-5之间的整数)都是随机生产。模拟实现短作业优先调度算法SJF，结果输出这10个进程的执行顺序，并计算输出每个进程的等待时间以及总的平均等待时间。</p><p>实验提示：<strong>本次实验不需要使用线程</strong>。另外，<strong>本次实验中的两种调度算法都是非抢占式(Non-preemptive)调度算法</strong>，即一个进程获得CPU后将一直执行到结束。要求实现一个排队器函数，用于产生下一个将获得CPU的进程。首先，生成10个进程(它们的到达时间、需要运行的时间、优先级由随机数产生)，然后由排队器来决定进程获得CPU的顺序。由于本次实验中的两种算法都是非抢占式，因此一个进程执行完成后，由排队器来产生下一个获得CPU的进程。对于HRRN算法，需要为每一个进程设置一个变量，用来记录其动态优先级。</p></blockquote><p>SJF(Shortest Job First )算法，即最短作业优先调度法。是以进入系统的作业所要求的CPU时间为标准，对短作业或者短进程优先调度的算法，将每个进程与其估计运行时间进行关联，选取估计计算时间最短的作业投入运行。</p><p>SJF调度算法是被证明了的最佳调度算法，这是因为对于给定的一组进程，SJF算法的平均周转时间最小。通过将短进程移到长进程之前，短进程等待时间的减少大于长进程等特时间的增加，因此，平均等待时间减少了。</p><p>但在实际运用中，SJF算法是达不到理论上的最佳效果的。因为实现SJF调度算法需要知道作业所需运行时间，否则调度就没有依据，要精确知道一个作业的运行时间是办不到的。而且还会出现<span class="bubble-content">饥饿</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">进程饥饿，即为Starvation，指当等待时间给进程推进和响应带来明显影响称为进程饥饿。当饥饿到一定程度的进程在等待到即使完成也无实际意义的时候称为饥饿死亡。</span></span>现象。</p><p>要模拟实现SFJ其实并不难。在现实情况中，由于进程的到达时间并不确定，所以是一个动态的排序算法。但是在模拟中实现，我们可以预先用随机数生成好进程的抵达时间、运行时间等各种信息，然后用排队器函数提前处理好。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">qsort(processes, NUM_PROCESSES, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PCB), compare);</span><br></pre></td></tr></table></figure><p>至于排队器函数的处理逻辑实现也很简单：根据进程的运行时间进行排序，运行时间短的优先级更高；如果运行时间相同，则比较哪个进程的抵达时间更早。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p1</span> =</span> (<span class="keyword">struct</span> PCB *)a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p2</span> =</span> (<span class="keyword">struct</span> PCB *)b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先比较需要用时，如果时间相同则比较到达时间</span></span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;neededTime == p2-&gt;neededTime)</span><br><span class="line">        <span class="keyword">return</span> p1-&gt;arrivalTime - p2-&gt;arrivalTime;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;neededTime - p2-&gt;neededTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用排队器对进程队列进行排序处理后，我们就可以依次遍历每个处理好的有序进程，计算并打印它们的信息即可。</p><p>完整代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_PROCESSES 10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> pid[<span class="number">64</span>];</span><br><span class="line">    <span class="type">char</span> state;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="type">int</span> neededTime;</span><br><span class="line">    <span class="type">int</span> totalWaitTime;</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> <span class="comment">// 实际上并没用到指针，用数组代替了</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateProcesses</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(processes[i].pid, <span class="keyword">sizeof</span>(processes[i].pid), <span class="string">&quot;P%d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        processes[i].state = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        processes[i].priority = <span class="number">0</span>;</span><br><span class="line">        processes[i].neededTime = (rand() % <span class="number">41</span>) + <span class="number">10</span>;  <span class="comment">// 随机生成需要的时间1~50</span></span><br><span class="line">        processes[i].arrivalTime = (rand() % <span class="number">20</span>) + <span class="number">1</span>;  <span class="comment">// 随机生成抵达时间1~20</span></span><br><span class="line">        processes[i].totalWaitTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撰写SFJ排序器的比较逻辑</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p1</span> =</span> (<span class="keyword">struct</span> PCB *)a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p2</span> =</span> (<span class="keyword">struct</span> PCB *)b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先比较需要用时，如果时间相同则比较到达时间</span></span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;neededTime == p2-&gt;neededTime)</span><br><span class="line">        <span class="keyword">return</span> p1-&gt;arrivalTime - p2-&gt;arrivalTime;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;neededTime - p2-&gt;neededTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟SFJ调度排序器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SJF</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    <span class="comment">// 对进程进行排序，运行时间少、抵达时间早的优先</span></span><br><span class="line">    qsort(processes, NUM_PROCESSES, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PCB), compare);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> currentTime = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> totalWaitTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Execution Order:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果第一个进程的抵达时间晚于现在的时间，则等待第一个进程开始</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime &lt; processes[i].arrivalTime) &#123;</span><br><span class="line">            currentTime = processes[i].arrivalTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算进程等待时间：当前的时间 - 抵达的时间</span></span><br><span class="line">        processes[i].totalWaitTime = currentTime - processes[i].arrivalTime;</span><br><span class="line">        <span class="comment">// 计算等待总时间</span></span><br><span class="line">        totalWaitTime += processes[i].totalWaitTime;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Process %s - Arrival Time: %d, Needed Time: %d, Wait Time: %d\n&quot;</span>,</span><br><span class="line">               processes[i].pid, processes[i].arrivalTime, processes[i].neededTime, processes[i].totalWaitTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新当前的时间</span></span><br><span class="line">        currentTime += processes[i].neededTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算等待平均时间</span></span><br><span class="line">    <span class="type">double</span> avgWaitTime = (<span class="type">double</span>)totalWaitTime / NUM_PROCESSES;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total Wait Time: %d\n&quot;</span>, totalWaitTime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average Wait Time: %.2f\n&quot;</span>, avgWaitTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> <span class="title">processes</span>[<span class="title">NUM_PROCESSES</span>];</span></span><br><span class="line">    </span><br><span class="line">    generateProcesses(processes);</span><br><span class="line"></span><br><span class="line">    SJF(processes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241014215208267.png" alt="image-20241014215208267" /></p><h3 id="q2-3"><a class="markdownIt-Anchor" href="#q2-3"></a> Q2</h3><blockquote><p>假设有10个进程，每个进程的到达时间(1-20之间的整数)、需要的运行时间(10-50之间的整数)都是随机生产。模拟实现最高响应比优先调度算法HRRN，结果输出这10个进程的执行顺序，并计算输出每个进程的等待时间以及总的平均等待时间。</p></blockquote><p>高响应比优先调度算法（Highest Response Ratio Next）是一种对CPU中央控制器响应比的分配的一种算法。HRRN是介于FCFS（先来先服务算法）与SJF（短作业优先算法）之间的折中算法，既考虑作业等待时间又考虑作业运行时间，既照顾短作业又不使长作业等待时间过长，改进了调度性能。它解决了SFJ中长作业时间进程的饥饿问题，但是付出了更多的资源去计算响应比，提升了系统开销。</p><p>实际上就是以<span class='p red'>响应比</span>来代替<span class='p yellow'>作业时间</span>作为排序标准，响应比的计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mo>=</mo><mo stretchy="false">(</mo><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">response\_ratio=(waiting\_time+runtime)/(runtime)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9695199999999999em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></p><p>其中等待时间是不断变化的，所以响应比也是不断变化的。对SFJ算法的进程处理方法已经不适用，因为此时进程之间的优先级是动态的。所以我们的处理逻辑也需要改变：对于每个时间单位，计算一次响应比并对进程列表进行排序，选择优先级最高的进程分配CPU资源执行。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">calculateResponseRatio(processes,currentTime); <span class="comment">// 计算响应比</span></span><br><span class="line"></span><br><span class="line">index=findHighestResponseProcess(processes,currentTime); <span class="comment">// 寻找响应值最大的进程下标</span></span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_PROCESSES 10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> pid[<span class="number">64</span>];</span><br><span class="line">    <span class="type">char</span> state;</span><br><span class="line">    <span class="type">int</span> hasFinished;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="type">int</span> neededTime;</span><br><span class="line">    <span class="type">int</span> totalWaitTime;</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="type">double</span> responseRatio;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateProcesses</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(processes[i].pid, <span class="keyword">sizeof</span>(processes[i].pid), <span class="string">&quot;P%d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        processes[i].state = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        processes[i].hasFinished=<span class="number">0</span>;</span><br><span class="line">        processes[i].priority = <span class="number">0</span>;</span><br><span class="line">        processes[i].neededTime = (rand() % <span class="number">41</span>) + <span class="number">10</span>;  <span class="comment">// 随机生成需要的时间1~50</span></span><br><span class="line">        processes[i].arrivalTime = (rand() % <span class="number">20</span>) + <span class="number">1</span>;  <span class="comment">// 随机生成抵达时间1~20</span></span><br><span class="line">        processes[i].totalWaitTime = <span class="number">0</span>;</span><br><span class="line">        processes[i].responseRatio = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算响应比</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">calculateResponseRatio</span><span class="params">(<span class="keyword">struct</span> PCB processes[], <span class="type">int</span> currentTime)</span>&#123;</span><br><span class="line">    <span class="type">int</span> waitTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;NUM_PROCESSES;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (processes[i].hasFinished!=<span class="number">1</span>&amp;&amp;processes[i].arrivalTime &lt;= currentTime)&#123;</span><br><span class="line">            waitTime=currentTime-processes[i].arrivalTime;</span><br><span class="line">            <span class="comment">// 计算公式：响应比 =（等待时间+运行时间）/运行时间</span></span><br><span class="line">            processes[i].responseRatio=(waitTime+(<span class="type">double</span>)processes[i].neededTime)/processes[i].neededTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找响应比最大的进程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findHighestResponseProcess</span><span class="params">(<span class="keyword">struct</span> PCB processes[],<span class="type">int</span> currentTime)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> highestRatio=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;NUM_PROCESSES;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (processes[i].hasFinished!=<span class="number">1</span> &amp;&amp; processes[i].responseRatio&gt;highestRatio &amp;&amp;processes[i].arrivalTime&lt;=currentTime)&#123;</span><br><span class="line">            index=i;</span><br><span class="line">            highestRatio=processes[i].responseRatio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟HRRN调度排序器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HRRN</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> totalWaitTime=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> currentTime=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> finishedProcesses=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Execution Order:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(finishedProcesses&lt;NUM_PROCESSES)&#123;</span><br><span class="line"></span><br><span class="line">        calculateResponseRatio(processes,currentTime); <span class="comment">// 计算响应比</span></span><br><span class="line"></span><br><span class="line">        index=findHighestResponseProcess(processes,currentTime); <span class="comment">// 寻找响应值最大的进程下标</span></span><br><span class="line">        <span class="keyword">if</span> (index==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            currentTime++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>* <span class="title">tmp</span>=</span>&amp;processes[index];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Process %s - Arrival Time: %d, Needed Time: %d, Wait Time: %d\n&quot;</span>,</span><br><span class="line">        tmp-&gt;pid, tmp-&gt;arrivalTime, tmp-&gt;neededTime,</span><br><span class="line">        currentTime-tmp-&gt;arrivalTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算总共等待的时间</span></span><br><span class="line">        tmp-&gt;totalWaitTime=currentTime-tmp-&gt;arrivalTime;</span><br><span class="line">        totalWaitTime+=tmp-&gt;totalWaitTime;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新进程状态和时间</span></span><br><span class="line">        tmp-&gt;hasFinished=<span class="number">1</span>;</span><br><span class="line">        currentTime+=tmp-&gt;neededTime;</span><br><span class="line">        finishedProcesses++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算等待平均时间</span></span><br><span class="line">    <span class="type">double</span> avgWaitTime = (<span class="type">double</span>)totalWaitTime / NUM_PROCESSES;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total Wait Time: %d\n&quot;</span>, totalWaitTime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average Wait Time: %.2f\n&quot;</span>, avgWaitTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> <span class="title">processes</span>[<span class="title">NUM_PROCESSES</span>];</span></span><br><span class="line">    </span><br><span class="line">    generateProcesses(processes);</span><br><span class="line"></span><br><span class="line">    HRRN(processes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241014215235225.png" alt="image-20241014215235225" /></p><h2 id="lab04"><a class="markdownIt-Anchor" href="#lab04"></a> Lab04</h2><p>进程调度是现代操作系统中最核心的部分，它是现代操作系统能够实现多用户、多任务功能的根本保障。早期的批处理系统、不同版本的Windows、Linux等操作系统分别采用了不同的进程调度机制，例如，FCFS调度算法、SJF调度算法、HRRN调度算法、RR调度算法、多级反馈队列调度算法等。本次实验的目标如下：</p><ol><li>掌握Windows、Linux操作系统中进程调度机制及其原理。</li><li>学会用高级语言来模拟实现一些常用的非抢占式(Non-preemptive)进程调度算法。</li></ol><h3 id="q1-4"><a class="markdownIt-Anchor" href="#q1-4"></a> Q1</h3><blockquote><p>（一） 题目：多级反馈队列调度算法</p><p>假设有5个运行队列，它们的优先级分别为1，2，3，4，5，它们的时间片长度分别为10ms,20ms,40ms,80ms,160ms，即第i个队列的优先级比第i-1个队列要低一级，但是时间片比第i-1个队列的要长一倍。多级反馈队列调度算法包括四个部分：主程序main，进程产生器generator，进程调度器函数Scheduler，进程运行器函数executor。结果输出：在进程创建、插入队列、执行时的相关信息，并计算输出总的平均等待时间。其中，generator用线程来实现，每隔一个随机时间(例如在[1,100]ms之间)产生一个新的进程PCB，并插入到第1个队列的进程链表尾部。Scheduler依次探测每个队列，寻找进程链表不为空的队列，然后调用Executor, executor把该队列进程链表首部的进程取出来执行。要设置1个互斥信号量来实现对第1个队列的互斥访问，因为generator和executor有可能同时对第1个队列进行操作。 同时要设置1个同步信号量，用于generator和Scheduler的同步：generator每产生1个新进程，就signal一次这个同步信号量；只有所有队列不为空时，Scheduler才会运行，否则Scheduler要等待这个同步信号量。当所有进程运行完毕后，Scheduler退出，主程序结束。</p></blockquote><p>实验提示较长，单独放在下文：</p><details class="folding-tag" cyan><summary> 查看实验提示 </summary>              <div class='content'>              <blockquote><p>多级反馈队列(Multi-leveled feedback queue)调度算法</p><p>按以下要求实现多级反馈队列调度算法：假设有5个就绪队列，它们的优先级分别为1，2，3，4，5，它们的时间片长度分别为10ms,20ms,40ms,80ms,160ms，即第i个队列的优先级比第i-1个队列要低一级，但是时间片比第i-1个队列的要长一倍。调度算法包括四个部分：主程序main，进程产生器generator，进程调度器函数Scheduler，进程运行器函数executor。</p><p>（1）主程序：设置好多级队列以及它们的优先级、时间片等信息；创建两个信号量，一个用于generator和executor互斥的访问第1个运行队列(因为产生的新进程都是先放到第1个队列等待执行)，另一个用于generator和Scheduler的同步(即，仅当多级队列中还有进程等待运行时，Scheduler才能开始执行调度)。创建进程产生器线程，然后调用进程调度器。</p><p>（2）进程产生器generator：用线程来实现进程产生器。每隔一个随机的时间段，例如[1,100]ms之间的一个随机数，就产生一个新的进程，创建PCB并填上所有的信息。注意，每个进程所需要运行的时间neededTime在一定范围内(假设为[2,200]ms)内由随机数产生，初始优先级为1。PCB创建完毕后，将其插入到第1个队列进程链表的尾部（要用到互斥信号量，因为executor有可能正好从第1个队列中取出排在队列首的进程来运行）。插入完毕后，generator调用Sleep函数卡睡眠等待随机的一个时间间隔(例如在[1，100]范围产生的1个随机数)，然后再进入下一轮新进程的产生。当创建的进程数量达到预先设定的个数，例如20个，generator就执行完毕退出。</p><p>（3）进程调度器函数Scheduler：在该函数中，依次从第1个队列一直探测到第5个队列，如果第1个队列不为空，则调用执行器executor来执行排在该队列首部的进程。仅当第i号队列为空时，才去调度第i+1个队列的进程。如果时间片用完了但是执行的进程还没有完成（即usedTime&lt;neededTime），则调度器把该进程移动到下一级队列的尾部。当所有的进程都执行完毕，调度器退出，返回主程序。</p><p>（4）进程执行器executor：根据Scheduler传递的队列序号，将该队列进程链表首部的PCB取出，分配该队列对应的时间片给它运行(我们用Sleep函数，睡眠时间长度为该时间片，以模拟该进程得到CPU后的运行期间)。睡眠结束后，所有队列中的进程的等待时间都要加上该时间片。注意，在访问第1个队列时，要使用互斥信号量，以免跟进程产生器generator发生访问冲突。</p></blockquote>              </div>            </details><p>多级反馈队列调度（Multilevel Feedback Queue Scheduling）是一种CPU调度算法，它结合了时间片轮转调度和优先级调度的特点，以适应不同类型进程的需要。这种算法特别适用于那些对响应时间有较高要求的交互式系统，同时也能够处理需要较长时间运行的进程。</p><p>在编程模拟实现中，对应多级反馈队列调度的部分主要是Scheduler，即进程调度器的行为。因此，实现好Scheduler，就实现了多级反馈队列调度。</p><h4 id="scheduler"><a class="markdownIt-Anchor" href="#scheduler"></a> Scheduler</h4><p>我们先来看看多级反馈队列调度的行为特征：</p><ol><li>在系统中设置多个就绪队列，并未每个队列赋予不同的优先级。第一个队列的优先级最高，第二个次之，其余的优先级逐个降低。该算法为不同的队列中的进程所赋予的执行时间片的大小也各不相同，在优先级愈高的队列中，其时间片就愈小。</li><li>每个队列都采用FCFS算法。</li><li>按队列优先级调度。</li></ol><p>从以上三点，我们可以总结出Scheduler最核心的两个状态：</p><ul><li><span class='p red'>当没有新进程出现时，Scheduler的执行逻辑</span></li><li>当出现新进程时，Scheduler的执行逻辑</li></ul><h5 id="没有新进程出现时"><a class="markdownIt-Anchor" href="#没有新进程出现时"></a> 没有新进程出现时</h5><p>如果没有新进程出现，Scheduler将持续运行，直到多级队列为空。那么，运行时的具体逻辑又是怎么样的呢？</p><p>按照多级队列和优先级调度的原则，Scheduler将优先对优先级最高的队列，也就是第一个队列进行调度。处理队列时依照的是FCFS原则，即Scheduler总会优先处理第一个到达的进程，并给他分配队列对应的时间片，调用CPU资源执行进程。</p><p>倘若该进程在经过一个时间片后执行完毕，那么该进程将直接被释放（移出等待队列）；倘若没有执行完毕，则该进程会被Scheduler调入下一级优先队列。Scheduler总是会优先处理优先级高的队列直到队列为空，此时才会开始处理下一个优先级的队列。</p><p>我们把这个处理逻辑从第一层队列扩展至多级队列，简要概括一下：</p><ul><li>Begin：对于第i级队列，首先检查第一个队列是否为空<ol><li>若非空，则调用Scheduler执行队首进程。并依情况判断是否交到下一个优先级队列，回到Begin</li><li>若为空，则开始调度第i+1层队列</li></ol></li></ul><p>对应的代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;QUEUE_COUNT;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyQueue(&amp;queues[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 当前队列不为空，调用executor</span></span><br><span class="line">            <span class="comment">// 传递队列编号给executor，executor将把进程取出进行处理，由scheduler决定进程是继续入队还是释放</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tmp</span> =</span> queues[i].<span class="built_in">list</span>;</span><br><span class="line">            executor(i);</span><br><span class="line">            <span class="comment">// 判断该进程如何调度</span></span><br><span class="line">            <span class="keyword">if</span> (tmp-&gt;usedTime &lt; tmp-&gt;neededTime)</span><br><span class="line">            &#123;...&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>如此，Scheduler将依照这个逻辑持续运行。最终在多级队列内等待的进程要么被执行完毕释放进程；要么是抵达了等待队列底层仍然没有结束运行，我们在模拟程序中可以认为该程序发生了死循环或者死锁，也直接释放掉进程，防止耗尽系统资源（现实中的处理策略可能要复杂的多）。</p><p>无论如何，Scheduler持续运行的结果最终一定会排空多级队列，此时Scheduler将进入休眠，等待新进程的进入。在模拟程序中，对应Generator是否向Scheduler发送了同步信号量。</p><h5 id="出现新进程时"><a class="markdownIt-Anchor" href="#出现新进程时"></a> 出现新进程时</h5><p>由于新进程总是进入第一层优先队列，也就是说新进程拥有最高优先级，而Scheduler的处理逻辑是优先级调度。所以无论Scheduler在休眠或者是在处理其他队列的调度，一旦新的进程进入了优先队列，Scheduler总是会立即转到第一层级的优先队列，重头开始执行调度逻辑。</p><p>这一点可以用非堵塞的信号量来实现，Scheduler在每次执行调度逻辑前，都要检测Generator是否发送了同步信号量，以检测是否有新进程到达。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">begin:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;QUEUE_COUNT;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyQueue(&amp;queues[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//while循环将重复处理当前队列直到队列排空为止，处理过程中需要留意是否接受到generator信号量</span></span><br><span class="line">            <span class="keyword">if</span> (sem_trywait(&amp;semaphore_scheduler) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果信号量被设置，立即退出循环，回到进程处理逻辑外部从第一个队列重新开始。</span></span><br><span class="line">                <span class="keyword">goto</span> begin;</span><br><span class="line">         &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，一旦出现新进程，Scheduler应立即跳转到第一层队列，并重新开始处理。</p><h4 id="generator与executor"><a class="markdownIt-Anchor" href="#generator与executor"></a> Generator与Executor</h4><p>Generator要求实现一个线程函数，独立于主程序随机生成进程，在生成进程后应该向Scheduler发送信号提醒Scheduler有新进程到达。这点可以用一个Generator和Scheduler共享的信号量来实现：每次Generator从休眠中苏醒创建好新进程并加入等待队列后，都应该设置信号量+1；而Scheduler在每次进行调度操作前，都应该检查共享信号量是否被设置，或者Scheduler进入休眠后，将持续等待共享变量的设置来决定自己是否被唤醒。这样做，我们就实现了Generator和Scheduler的同步。</p><p>Generator还有一个重要的一点就是应该和Executor实现互斥访问第一级队列：因为Generator始终只会对第一优先级队列进行入队操作，而Executor可能也会对第一优先级进行出队操作（对应处理进程），这里存在并发操作共享变量，有条件竞争的风险。因此，应该也用一个共享信号量实现Generator和Executor对第一队列的互斥访问。</p><p>这里我没有用共享变量，而是选择了<span class='p red'>对所有优先队列进行加锁处理</span>。诚然，对所有优先队列加锁相对于只互斥访问第一级队列一定会降低处理效率，但是题目还要求打印队列状态，涉及到对队列数据的遍历访问。显然，这部分操作也会涉及到对第一行队列的读取，所以我干脆把所有涉及队列的操作全部加锁处理了。其实这部分是没有必要的，有心人如果想要优化可以从这里入手处理。</p><p>Executor的处理也很简单，在接受到Scheduler传递的队列编号后，只需要将对应的队列做出队处理就可以拿到待执行的进程。值得注意的是，Executor除了要更新被处理的进程信息，还应该更新所有等待队列中的进程的等待时间（实际中Executor当然不用处理这个，但是我们在模拟程序中需要手动对进程的时间信息进行管理，所以放在Executor这里进行更新是再好不过的）。处理完毕后，Executor应该返回被处理进程的指针给Scheduler，让Scheduler决定该进程是否被释放。</p><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span> <span class="comment">//包含随机数产生函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span>  <span class="comment">//标准输入输出函数库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;time.h&quot;</span>   <span class="comment">//与时间有关的函数头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> pid[<span class="number">64</span>]; <span class="comment">// 进程标识符，即进程的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下部分为用于进程调度的信息</span></span><br><span class="line">    <span class="type">char</span> state;        <span class="comment">// ‘r’: 运行状态；‘w’:就绪状态</span></span><br><span class="line">                       <span class="comment">// ‘b’:阻塞状态</span></span><br><span class="line">    <span class="type">int</span> priority;      <span class="comment">// 进程优先级</span></span><br><span class="line">    <span class="type">int</span> arrivalTime;   <span class="comment">// 进程的创建时间(到达时间)</span></span><br><span class="line">    <span class="type">int</span> neededTime;    <span class="comment">// 进程需要的运行时间</span></span><br><span class="line">    <span class="type">int</span> usedTime;      <span class="comment">// 进程已累计运行的时间</span></span><br><span class="line">    <span class="type">int</span> totalWaitTime; <span class="comment">// 进程已等待的CPU时间总和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下部分为进程的控制信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> <span class="comment">// 指向下一个PCB的链表指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> priority;     <span class="comment">// 该队列的优先级</span></span><br><span class="line">    <span class="type">int</span> timeSlice;    <span class="comment">// 该队列的时间片长度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">list</span>;</span> <span class="comment">// 指向该队列中进程PCB链表的头部</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_COUNT 5 <span class="comment">// 设置队列长度为5</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_COUNT 20 <span class="comment">// 设置进程总数为20</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">queues</span>[<span class="title">QUEUE_COUNT</span>];</span></span><br><span class="line"><span class="type">int</span> Time = <span class="number">0</span>; <span class="comment">// 初始化全局时间为0，用于记录进程执行时消耗的时间</span></span><br><span class="line"><span class="type">double</span> TotalWatingTime = <span class="number">0</span>; <span class="comment">// 初始化全局总等待时间为0</span></span><br><span class="line"><span class="comment">// sem_t semaphore_generator;</span></span><br><span class="line"><span class="type">sem_t</span> semaphore_scheduler;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>; <span class="comment">// 初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quit</span><span class="params">()</span>; <span class="comment">// 退出函数，销毁变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueues</span><span class="params">()</span>; <span class="comment">// 初始化队列</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">generateProcess</span><span class="params">(<span class="type">void</span> *arg)</span>; <span class="comment">// 产生进程的线程函数，生成器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler</span><span class="params">()</span>; <span class="comment">// 调度器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">executor</span><span class="params">(<span class="type">int</span> queueIndex)</span>; <span class="comment">// 执行器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">updatePCB</span><span class="params">(<span class="type">int</span> sleepTime)</span>; <span class="comment">// 更新PCB的数据，用于在睡眠后更新所有队列中进程的等待时间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span>; <span class="comment">// 检测队列是否为空</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q, <span class="keyword">struct</span> PCB *p)</span>; <span class="comment">// 入队操作</span></span><br><span class="line"><span class="keyword">struct</span> PCB *<span class="title function_">DeQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span>; <span class="comment">// 出队操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span>; <span class="comment">// 删除队列操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayQueue</span><span class="params">()</span>; <span class="comment">// 打印队列所有元素操作</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">pthread_t</span> generated_thread;</span><br><span class="line">    pthread_create(&amp;generated_thread, <span class="literal">NULL</span>, generateProcess, <span class="literal">NULL</span>); <span class="comment">// 调用生成器线程函数</span></span><br><span class="line"></span><br><span class="line">    scheduler(); <span class="comment">// 执行调度器</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The average of total wating time is: %g\n&quot;</span>,TotalWatingTime/PROCESS_COUNT);</span><br><span class="line"></span><br><span class="line">    pthread_join(generated_thread, <span class="literal">NULL</span>); <span class="comment">// 等待生成器函数线程完成</span></span><br><span class="line"></span><br><span class="line">    quit();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    initQueues();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sem_init(&amp;semaphore_generator, 0, 1);</span></span><br><span class="line">    sem_init(&amp;semaphore_scheduler, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// sem_destroy(&amp;semaphore_generator);</span></span><br><span class="line">    sem_destroy(&amp;semaphore_scheduler);</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; QUEUE_COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DeleteQueue(&amp;queues[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueues</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; QUEUE_COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        queues[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">        queues[i].priority = i + <span class="number">1</span>;</span><br><span class="line">        queues[i].timeSlice = <span class="number">10</span> * (<span class="number">1</span> &lt;&lt; i); <span class="comment">// 10,20,40,80,160ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">generateProcess</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 每次生成新进程时，都要用信号量通知scheduler同步处理新产生的进程</span></span><br><span class="line">    <span class="comment">// sem_wait(&amp;semaphore_generator);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PROCESS_COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        usleep((rand() % <span class="number">100000</span>) + <span class="number">1000</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">newProcess</span> =</span> (<span class="keyword">struct</span> PCB *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PCB));</span><br><span class="line">        <span class="built_in">snprintf</span>(newProcess-&gt;pid, <span class="keyword">sizeof</span>(newProcess-&gt;pid), <span class="string">&quot;P%d&quot;</span>, i); <span class="comment">// 生成 PID</span></span><br><span class="line">        newProcess-&gt;neededTime = (rand() % <span class="number">199</span>) + <span class="number">2</span>;</span><br><span class="line">        newProcess-&gt;priority = <span class="number">1</span>;</span><br><span class="line">        newProcess-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        newProcess-&gt;state = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        newProcess-&gt;totalWaitTime = <span class="number">0</span>;</span><br><span class="line">        newProcess-&gt;arrivalTime = Time; <span class="comment">// 当前的时间为抵达时间</span></span><br><span class="line">        newProcess-&gt;usedTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// printf(&quot;the sem is comming!\n&quot;);</span></span><br><span class="line"></span><br><span class="line">        pthread_mutex_lock(&amp;mutex); </span><br><span class="line">        <span class="comment">// printf(&quot;generator get the lock!\n&quot;);</span></span><br><span class="line">        EnQueue(&amp;queues[<span class="number">0</span>], newProcess);</span><br><span class="line">        <span class="comment">// printf(&quot;generator get rid of the lock!\n&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Generator: Process %s is generated, neededTime = %d, arrivalTime = %d\n&quot;</span>,</span><br><span class="line">               newProcess-&gt;pid, newProcess-&gt;neededTime, newProcess-&gt;arrivalTime);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printf(&quot;generator Post to scheduler\n&quot;);</span></span><br><span class="line">        sem_post(&amp;semaphore_scheduler);</span><br><span class="line">        <span class="comment">// sem_post(&amp;semaphore_generator);</span></span><br><span class="line">        <span class="comment">// 一共会发送PROCESS_COUNT个信号量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//scheduler的逻辑是执行多优先级队列，</span></span><br><span class="line">    <span class="comment">//如果收到generator发来的信号说明第一优先级队列出现新进程</span></span><br><span class="line">    <span class="comment">//所以需要立即转到第一队列进行处理。</span></span><br><span class="line">    <span class="comment">//用信号量控制scheduler是否重启执行逻辑，一个执行逻辑即从第一个队列开始依次往下调度</span></span><br><span class="line">    <span class="comment">//假设scheduler一直收不到generator的信号量，scheduler最终将会把所有在优先级队列中的进程释放</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    a:首先检查第一个队列是否为空：</span></span><br><span class="line"><span class="comment">        1.若非空，则调用执行器执行队首进程。并依情况判断是否交到下一个优先级队列，回到a</span></span><br><span class="line"><span class="comment">        2.若为空，则开始调度下一个队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这个变量统计已经接受到的进程信号量，当processCount=PROCESSCOUNT时，说明进程已经全部执行完毕，调度器退出。</span></span><br><span class="line">   <span class="type">int</span> processCount=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   sem_wait(&amp;semaphore_scheduler);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   这里processCount递增有两种情况：</span></span><br><span class="line"><span class="comment">    1.scheduler第一次被调用时会递增一次计数</span></span><br><span class="line"><span class="comment">    2.假如队列内全部进程执行完毕，但是generator还在工作（处于睡眠状态没来得及产生新的进程），scheduler会在这里等待信号量。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   processCount++;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(processCount&lt;PROCESS_COUNT)&#123;</span><br><span class="line">    <span class="comment">// 从此处开始，由第一个优先级队列开始调度。</span></span><br><span class="line">    <span class="comment">// 所以下面的进程处理逻辑在检测到信号量时，应该退出for循环。</span></span><br><span class="line">    begin:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;QUEUE_COUNT;i++)&#123;</span><br><span class="line">        <span class="comment">// 一个进程处理逻辑，若没有信号量打断将会处理所有进程</span></span><br><span class="line">        <span class="comment">// 所以需要建立scheduler退出机制，保证接受到信号量后退出循环。</span></span><br><span class="line">        <span class="comment">// 依次处理所有队列，每调用一次executor对应CPU执行了对应时间片的任务</span></span><br><span class="line">        <span class="comment">// 在时间片结束后：1.对该进程的情况进行调度 2.检查信号量，是否有新的进程抵达第一级优先队列</span></span><br><span class="line">        <span class="keyword">while</span> (!IsEmptyQueue(&amp;queues[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//while循环将重复处理当前队列直到队列排空为止，处理过程中需要留意是否接受到generator信号量</span></span><br><span class="line">                <span class="keyword">if</span> (sem_trywait(&amp;semaphore_scheduler) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果信号量被设置，立即退出循环，回到进程处理逻辑外部从第一个队列重新开始。</span></span><br><span class="line">                    <span class="comment">// 这里processCount递增代表着又有一个新的进程加入到了队列中</span></span><br><span class="line">                    <span class="comment">// 有一个问题：如果generator短时间内插入了多个进程，会导致scheduler &lt;空转一次&gt;，但是不影响计数正常使用 </span></span><br><span class="line">                    processCount++;</span><br><span class="line">                    <span class="keyword">goto</span> begin;</span><br><span class="line">                &#125;</span><br><span class="line">                pthread_mutex_lock(&amp;mutex);</span><br><span class="line">                <span class="comment">// 当前队列不为空，调用executor</span></span><br><span class="line">                <span class="comment">// 传递队列编号给executor，executor将把进程取出/出队进行处理，由scheduler决定进程是继续入队还是释放</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tmp</span> =</span> queues[i].<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">                pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">                executor(i);</span><br><span class="line"></span><br><span class="line">                pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断该进程如何调度</span></span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;usedTime &lt; tmp-&gt;neededTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 如果执行进程还未结束，则将之下放一级队列</span></span><br><span class="line">                    <span class="keyword">if</span> (tmp-&gt;priority &lt; QUEUE_COUNT)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果进程还可以继续往下放置</span></span><br><span class="line">                        <span class="comment">//  pthread_mutex_lock(&amp;mutex);</span></span><br><span class="line">                        tmp-&gt;priority++;</span><br><span class="line">                        EnQueue(&amp;queues[i + <span class="number">1</span>], tmp);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Scheduler: Process %s is moved to queue %d, priority = %d\n&quot;</span>,</span><br><span class="line">                               tmp-&gt;pid, i + <span class="number">2</span>, tmp-&gt;priority);</span><br><span class="line">                        DisplayQueue(); <span class="comment">// 加锁移动至函数内部</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 如果队列已经无法下移，为了确保系统正确运行，则直接丢弃/释放进程。</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Scheduler: Process %s is running overtime, total waiting time = %d, aborted.\n&quot;</span>,</span><br><span class="line">                               tmp-&gt;pid, tmp-&gt;totalWaitTime);</span><br><span class="line">                        TotalWatingTime+=tmp-&gt;totalWaitTime;</span><br><span class="line">                        <span class="built_in">free</span>(tmp);</span><br><span class="line">                        DisplayQueue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 进程执行完毕，释放进程</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Scheduler: Process %s finished, total waiting time = %d\n&quot;</span>,</span><br><span class="line">                           tmp-&gt;pid, tmp-&gt;totalWaitTime);</span><br><span class="line">                    TotalWatingTime+=tmp-&gt;totalWaitTime;</span><br><span class="line">                    DisplayQueue();</span><br><span class="line">                    <span class="built_in">free</span>(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对队伍进程进行调度到这里为止</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是执行逻辑的末尾，说明整个多优先级任务队列中已经没有等待的任务</span></span><br><span class="line">    <span class="comment">// scheduler应该进入休眠状态等待generator的信号量，或者结束调度退出程序</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">executor</span><span class="params">(<span class="type">int</span> queueIndex)</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="comment">// printf(&quot;executor get the lock!\n&quot;);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tmp</span> =</span> DeQueue(&amp;queues[queueIndex]);</span><br><span class="line">    <span class="comment">// printf(&quot;executor get the %s!\n&quot;,tmp-&gt;pid);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> timeSlice = queues[queueIndex].timeSlice;</span><br><span class="line">    <span class="type">int</span> sleepTime = (timeSlice+tmp-&gt;usedTime &gt; tmp-&gt;neededTime) ? tmp-&gt;neededTime-tmp-&gt;usedTime : timeSlice;</span><br><span class="line"></span><br><span class="line">    usleep(sleepTime * <span class="number">1000</span>);</span><br><span class="line">    Time += sleepTime;</span><br><span class="line">    <span class="comment">// printf(&quot;executor is trying to update all PCB.\n&quot;);</span></span><br><span class="line">    updatePCB(sleepTime);</span><br><span class="line"></span><br><span class="line">    tmp-&gt;usedTime += sleepTime;</span><br><span class="line">    <span class="comment">// printf(&quot;executor is going to release lock.\n&quot;);</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    <span class="comment">// printf(&quot;executor release lock!\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Executor: Process %s in queue %d consumes %d ms\n&quot;</span>,</span><br><span class="line">           tmp-&gt;pid, queueIndex + <span class="number">1</span>, sleepTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">updatePCB</span><span class="params">(<span class="type">int</span> sleepTime)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新队列中所有进程的等待时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tmp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tempQueue</span>[<span class="title">PROCESS_COUNT</span>];</span> <span class="comment">// 临时队列数组</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 临时队列计数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; QUEUE_COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!IsEmptyQueue(&amp;queues[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 这里对队列进行操作，但是父函数executor已经锁住临界区，所以可以不用加锁。</span></span><br><span class="line">            <span class="comment">// printf(&quot;queue%d is not empty,update it!\n&quot;,i+1);</span></span><br><span class="line">            tmp = DeQueue(&amp;queues[i]);</span><br><span class="line">            <span class="comment">// printf(&quot;trying to update %s\n&quot;,tmp-&gt;pid);</span></span><br><span class="line"></span><br><span class="line">            tmp-&gt;totalWaitTime += sleepTime; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将更新后的进程存入临时队列</span></span><br><span class="line">            tempQueue[count++] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            EnQueue(&amp;queues[i], tempQueue[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>; <span class="comment">// 重置计数器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;PCB finished updating!\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;<span class="built_in">list</span> == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q, <span class="keyword">struct</span> PCB *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;<span class="built_in">list</span> = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> PCB *tmp;</span><br><span class="line">        tmp = q-&gt;<span class="built_in">list</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> PCB *<span class="title function_">DeQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;trying to dequeue queue%d\n&quot;,q-&gt;priority);</span></span><br><span class="line">    <span class="keyword">if</span> (IsEmptyQueue(q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;The Queue is empty!\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> PCB *p;</span><br><span class="line">        p = q-&gt;<span class="built_in">list</span>;</span><br><span class="line">        q-&gt;<span class="built_in">list</span> = q-&gt;<span class="built_in">list</span>-&gt;next;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>; <span class="comment">//切断出队元素与原队列之间的黏连</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteQueue</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">queue</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (q-&gt;<span class="built_in">list</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = q-&gt;<span class="built_in">list</span>;</span><br><span class="line">        q-&gt;<span class="built_in">list</span> = q-&gt;<span class="built_in">list</span>-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayQueue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// pthread_mutex_lock(&amp;mutex);</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tmp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">tempQueue</span>[<span class="title">PROCESS_COUNT</span>];</span> <span class="comment">// 临时队列数组</span></span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; QUEUE_COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue %d: &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        count = <span class="number">0</span>; <span class="comment">// 重置计数器</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!IsEmptyQueue(&amp;queues[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = DeQueue(&amp;queues[i]);</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 安全处理</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, tmp-&gt;pid); <span class="comment">// 打印进程 PID</span></span><br><span class="line">            tempQueue[count++] = tmp; <span class="comment">// 存储进程到临时队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将临时队列中的进程重新入队</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            EnQueue(&amp;queues[i], tempQueue[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pthread_mutex_unlock(&amp;mutex);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行部分结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241025162031480.png" alt="image-20241025162031480" style="zoom:50%;" /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241025162102590.png" alt="image-20241025162102590" /></p><h2 id="lab05"><a class="markdownIt-Anchor" href="#lab05"></a> Lab05</h2><p>计算机系统中有的资源是需要互斥访问的。当多个进程竞争使用这些互斥资源时，如果进程申请和释放互斥资源的顺序不当，就容易造成系统的死锁。目前应对死锁问题的办法有：死锁的预防、死锁的避免、死锁的检测和解除。银行家算法(Banker’s Algorithm)是避免死锁的有效方法。本次实验的目标如下：</p><ol><li>理解银行家算法的原理。</li><li>能够用高级语言来实现银行家算法。</li></ol><h3 id="q1-5"><a class="markdownIt-Anchor" href="#q1-5"></a> Q1</h3><blockquote><p><strong>实验内容：</strong></p><p>假设系统中有n=5个进程和m=3种资源。这m种资源每一种资源的最大可用数量Available[i],i=1,…,m，用随机数生成，取值范围为[1,10]。每个进程i对资源j的最大需求Max[i,j],i=1,…,n,j=1,…m，也用随机数生成，其取值范围为从1到Available[j]。初始分配矩阵Allocation[i,j]也用随机数生成，其中，有50%的概率Allocation[i,j]取值为0，有50%的概率Allocation[i,j]随机从1到Max[i,j]中取值。如果在给第i个进程生成初始分配矩阵Allocation后，发现某种资源j的最大可用数量已经分配光了，那么从第i+1个进程开始所有的进程都分配不到该资源j，也就是说Allocation[k,j]=0,k=i+1,…,n。</p><p><strong>实验要求：</strong></p><p>编程实现银行家算法，检测从初始分配开始，是否存在安全分配序列。如果存在，刚输出该安全分配序列，否则输出“Deadlock”。</p></blockquote><p>实验提示中给出了需要用到的数据结构，单独放在下文：</p><details class="folding-tag" cyan><summary> 查看实验提示 </summary>              <div class='content'>              <blockquote><p><strong>数据结构：</strong></p><p>（1） 可用资源向量Available,这是一个一维数组Available[j],j=1,…m，表示第j种资源的可用数量，其中m为资源的种类个数</p><p>（2） 最大资源需求矩阵Max,这是一个n*m的二维数组，其中n为进程个数。单元Max[i,j]存储的数值表示第i个进程最多需要多少第j种资源</p><p>（3） 分配矩阵Allocation，这是一个n*m的二维数组。单元Allocation[i,j]存储的是已经分配给第i个进程的第j种资源的数量</p><p>（4） 需求矩阵Need，这也是一个n*m的矩阵，单元Need[i,j]存储的数值表示进程i还需要多少第j种资源的数量才能完成退出。</p></blockquote>              </div>            </details><p>我们先来看看什么是银行家算法。</p><div class="note info simple"><p>银行家算法（Banker’s Algorithm）是一种用于避免死锁的<strong>资源</strong>分配和<strong>安全</strong>性算法，主要应用于操作系统中管理多个<strong>进程</strong>对资源的请求。它由艾兹赫尔·戴克斯特拉（Edsger Dijkstra）在1970年提出。</p></div><p>关于算法定义中几个重要的概念，有必要阐明如下：</p><ol><li>资源：即系统中可以被多个进程共享的资源，如 CPU 时间、内存、I/O 设备等，题目中往往以A、B等字母代指。</li><li>进程：在系统中执行的任务，每个进程可能需要一定数量的资源。</li><li>安全状态：如果系统能分配资源给所有进程，使得每个进程都能在有限时间内完成执行，则称系统处于安全状态，可以保证安全状态的系统不会发生死锁。</li><li>不安全状态：如果无法为所有进程找到一种资源分配方式，使其完成，则系统处于不安全状态，可能会导致死锁。</li></ol><p>银行家算法通过模拟资源分配的过程来判断是否能够安全地满足进程的请求。它的核心思想是：<span class='p red'>在每次资源请求时，算法会检查请求后的系统状态是否仍然安全</span>。</p><p>具体来说，它的主要步骤如下。注意，在阅读银行家算法的内容时，确保你已经熟悉了该算法所用到的四种数据结构。你可以在该题的实验提示中找到详细内容。</p><h4 id="主要步骤"><a class="markdownIt-Anchor" href="#主要步骤"></a> 主要步骤</h4><p>当进程向系统请求资源时：</p><ul><li>首先，系统会检查该请求是否小于或等于其最大需求与当前可用资源。如果结果为否，说明进程请求了超出其需求的资源，或者当前可用资源不足以分配给该进程，撤销请求；否则，继续第二步。</li><li>第二，系统将进行试探性分配。即暂时分配资源，并更新系统的<span class="bubble-content">可用资源</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">Available </span></span>、<span class="bubble-content">分配矩阵</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">Allocation </span></span>和<span class="bubble-content">需求矩阵</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">Need </span></span>。</li><li>第三，进行安全性检查。系统将使用安全性算法检查系统是否仍然处于安全状态，安全性算法将找到一个安全序列，按照该序列的顺序来执行进程，将使得所有进程都能够进行完成。</li><li>最后，系统将决定是否分配资源。如果系统仍然处于安全状态，则实际分配资源给该进程；如果系统不安全，则拒绝该请求，进程需要等待。</li></ul><p>总的来说，银行家算法的核心步骤就是<strong>试探</strong>，通过校验分配资源后的系统是否仍然处于安全状态，来保证系统始终在安全状态，以达到彻底预防死锁的目的。试探的核心在于检验，这依赖于安全性算法。安全性算法的介绍如下。</p><h4 id="安全性算法"><a class="markdownIt-Anchor" href="#安全性算法"></a> 安全性算法</h4><p>这里我直接引用《操作系统概念(原书第9版)》书中的定义，我觉得原书中给出的定义非常清晰，有条件的读者可以直接阅读原本。安全性算法的描述如下：</p><div class="note info simple"><p>约定：当且仅当对所有的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i=1,2,...,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>Y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">X[i]≤Y[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，则我们称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>≤</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X≤Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>。</p></div><ol><li><p>令 Work 和 Finish 分别为长度m和n的向量。对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=0,1,…,n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，初始化 Work = Available 和 Finish[i] = false。</p></li><li><p>查找这样的 i 使其满足</p><ul><li>Finish[i] == false</li><li>Need<sub>i</sub> ≤ Work</li></ul><p>如果没有这样的 i 存在，那么就转到第4步。</p></li><li><p>Work = Work + Allocation<sub>i</sub><br />Finish[i] = true<br />返回到第2步。</p></li><li><p>如果对所有 i，Finish[i] = true，那么系统处于安全状态</p></li></ol><p>这个算法可能需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m\times n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>数量级的操作，以确定系统状态是否安全。这个数量级还是比较大的，在进程和资源比较多的情形下检测死锁的费用将不可接受。所以银行家算法往往只能运用在小型系统上。</p><h4 id="资源请求算法"><a class="markdownIt-Anchor" href="#资源请求算法"></a> 资源请求算法</h4><p>事实上，题目只要求实现了安全型算法检验，但完整的银行家算法包含了安全型算法和资源请求算法。为了知识完整性，这里给出资源请求算法的拓展资料。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241105194209274.png" alt="image-20241105194209274" /></p><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_NUM 5 <span class="comment">// n</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RESOURCE_NUM 3 <span class="comment">// m</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Available[RESOURCE_NUM];</span><br><span class="line"><span class="type">int</span> Max[PROCESS_NUM][RESOURCE_NUM];</span><br><span class="line"><span class="type">int</span> Allocation[PROCESS_NUM][RESOURCE_NUM];</span><br><span class="line"><span class="type">int</span> Need[PROCESS_NUM][RESOURCE_NUM];</span><br><span class="line"><span class="type">int</span> SafeSequence[PROCESS_NUM];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_safe</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">banker</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    banker();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate available resources</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial available:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;RESOURCE_NUM;i++)&#123;</span><br><span class="line">        Available[i] = rand()%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Available[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate max need of each process</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Max:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;P%d: &quot;</span>,i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">            Max[i][j]=rand()%Available[j]+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Max[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate initial allocated matrix</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocated:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> tmp_allocated[RESOURCE_NUM]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;P%d: &quot;</span>,i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp_allocated[j]&lt;Available[j])&#123;</span><br><span class="line">                <span class="type">int</span> rand_num=rand()%<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (rand_num==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> allocated_resource = rand()%Max[i][j]+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (tmp_allocated[j]+allocated_resource&gt;Available[j])</span><br><span class="line">                        allocated_resource--;</span><br><span class="line">                    Allocation[i][j]=allocated_resource;</span><br><span class="line">                    tmp_allocated[j]+=allocated_resource;</span><br><span class="line">                &#125;<span class="keyword">else</span> Allocation[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Allocation[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Allocation[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate Need matrix</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">            Need[i][j]=Max[i][j]-Allocation[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate Available</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Available:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;RESOURCE_NUM;i++)&#123;</span><br><span class="line">        Available[i]-=tmp_allocated[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Available[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_safe</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> Work[RESOURCE_NUM];</span><br><span class="line">    <span class="type">int</span> Finish[PROCESS_NUM]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load and Display Work</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Work:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;RESOURCE_NUM;i++)&#123;</span><br><span class="line">        Work[i]=Available[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Work[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Dispaly Need</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Need:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;P%d: &quot;</span>,i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Need[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> found_process = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(found_process!=PROCESS_NUM)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        try to find a process which satisfy:</span></span><br><span class="line"><span class="comment">            a. Finish[i] == false</span></span><br><span class="line"><span class="comment">            b. Need_i &lt;= Work </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        found_process = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">            <span class="comment">// check if Finish[i] == false</span></span><br><span class="line">            <span class="keyword">if</span>(Finish[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// check if Work &lt; Need</span></span><br><span class="line">                <span class="type">int</span> NeedBiggerThanWork = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (Need[i][j]&gt;Work[j])&#123;</span><br><span class="line">                        NeedBiggerThanWork++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (NeedBiggerThanWork)&#123;</span><br><span class="line">                    <span class="comment">// Need_i &gt; Work, continue finding</span></span><br><span class="line">                    found_process++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// Work = Work + Allocation_i</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;RESOURCE_NUM;j++)&#123;</span><br><span class="line">                        Work[j]+=Allocation[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Finish[i]=<span class="number">1</span>;</span><br><span class="line">                    SafeSequence[index++]=i;</span><br><span class="line">                    <span class="comment">// return to find process</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// Finish[i] == true</span></span><br><span class="line">                found_process++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check Finish</span></span><br><span class="line">    <span class="type">int</span> finish=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Finish[i]==<span class="number">0</span>) finish++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(finish==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// is safe</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// not safe</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">banker</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_safe())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Safe Sequence: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;PROCESS_NUM;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;P%d &quot;</span>,SafeSequence[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Deadlock!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>运行部分结果如下：</p><div class="tabs" id="deadlock"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#deadlock-1">输出安全序列</button></li><li class="tab"><button type="button" data-href="#deadlock-2">死锁</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="deadlock-1"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241105194812979.png" alt="image-20241105194812979" style="zoom:80%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="deadlock-2"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241105194837814.png" alt="image-20241105194837814" style="zoom:80%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="ex-lab"><a class="markdownIt-Anchor" href="#ex-lab"></a> Ex-Lab</h2><p>主存储器是计算机系统中最核心的部件之一，它是系统程序、应用程序、数据等的物理存储场所。而内存管理是现代操作系统中最核心的功能，它负责为需要运行的系统程序、应用程序来分配物理存储空间，以及当程序结束时回收存储空间。早期的操作系统采用动态连续分区方法来进行内存分配，目前操作系统都采用离散分区分配方式。伙伴系统(Buddy System)是比较流行的内存分区分配算法，它的优点是产生的内存碎片少，方便了内存的管理，因此被大部分的主流操作系统采用。虚拟存储器管理是计算机系统中最核心的功能，而请求分页式系统是虚拟存储器管理中用得最多的内存管理方式，涉及请求分页机制、缺页中断处理机制、页面置换机制等。其中，页面转换策略的好坏直接影响了操作系统的性能和系统的运行效率。本次课程设计的目的如下：</p><ol><li>理解连续动态分区分配方法的原理。</li><li>能够用高级程序语言来实现动态分区分配的FF算法、NF算法</li><li>理解和掌握伙伴系统(Buddy System)的工作原理。</li><li>用高级程序语言实现伙伴系统(Buddy System)，进行内存分区分配。</li><li>理解和掌握最常用的LRU页面置换算法的工作原理。</li><li>能够使用高级程序语言实现LRU页面置换算法。</li></ol><h3 id="q1-6"><a class="markdownIt-Anchor" href="#q1-6"></a> Q1</h3><blockquote><p><strong>设计任务：</strong></p><p>假设内存总大小为1024，开始地址为0，结束地址为1023。有10个进程，它们所需要的内存大小随机在[100,200]之间产生。从第1个进程开始，使用指定的分区分配算法来依次为进程分配内存分区；如果还有足够大的空闲分区，则给该进程进行分配，并更新空闲分区链表。当对一块空闲分区进行划分时，在这块空闲分区的地址范围内随机产生一个划分的开始位置，然后划分出当前进程大小的分区。如果没有足够大的空闲分区，则提示内存分配失败，然后继续为下一个进程分配空闲内存分区，直到10个进程都处理完毕。</p><p>10个进程处理完内存分配后，执行内存回收过程。依次从第1个成功分配了内存分区的进程开始，回收其占用的内存分区，直到所有被占用的分区都回收完毕。具体要完成的设计任务包括：</p><ol><li>实现动态分区分配的首次适应算法(FF)</li><li>实现动态分区分配的循环首次适应算法(NF)</li></ol><p><strong>要求：</strong></p><ol><li>在内存分配过程中，输出每一次内存分配结果：即成功还是失败，还有空闲/占用分区块情况；</li><li>在内存回收过程中，输出每一次内存回收后的结果：即空闲/占用分区块情况。</li></ol></blockquote><p>动态分区分配是非常简单与基础的内存分配思想。它没有什么花里胡哨的关系和定义，只是简单的找到一个足够大的空闲分区然后将其分配给进程。它的缺点也相当明显：动态分区分配会产生相当多的内存碎片，从而造成严重的内存浪费。所以现在基本没人使用它。</p><p>我们直接来介绍<span class="bubble-content">首次适应算法</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">First Fit Algorithm</span></span>和<span class="bubble-content">循环首次适应算法</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Next Fit Algorithm</span></span>吧。</p><h4 id="ff"><a class="markdownIt-Anchor" href="#ff"></a> FF</h4><p>FF算法的实现很简单，即每次从空闲内存块链表的头部出发进行遍历，找到一个足够大的空闲分区后将其分配给进程。然而这里也有一些细节需要注意，它的详细过程如下：</p><ol><li>从空闲分区链表的第一项开始往后遍历，找到一个足够大的空闲分区</li><li>如果没找到，则提示内存分配失败，接着继续为下一个进程分配内存</li><li>如果找到了，则给该进程分配，并更新空闲分区链表</li><li>当对一块空闲分区进行划分时，<br />在这块空闲分区的地址范围内随机产生一个划分的开始位置，<br />然后划分出当前进程大小的分区<br />划分空闲分区会产生三个或两个块（当划分开始位置是空闲块起始位置或者终止位置与空闲块终止位置重合时）。</li></ol><p>要实现FF算法逻辑的代码很简单，实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FF</span><span class="params">(PCB* pcb)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status &amp;&amp; current-&gt;size &gt;= pcb-&gt;neededMem)&#123;</span><br><span class="line">            allocate_memory(pcb,current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate memory for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>allocate_memory(pcb,current)</code>函数代表对给定的进程块和内存块进行内存划分，它的具体实现我们在后面介绍。</p><h4 id="nf"><a class="markdownIt-Anchor" href="#nf"></a> NF</h4><p>NF的实现也不难，它和FF的区别只在于：每次不是从头开始检索空闲内存块，而是从上一次分配的地方开始检索。</p><p>要实现这个特性，我们需要记录上一次划分内存块的位置，并且每次都从这里出发进行检索。在编程中，可以借助一个悬挂的指针变量来实现。代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">NF</span><span class="params">(PCB* pcb)</span>&#123;</span><br><span class="line">    <span class="type">static</span> Block* lastAllocated = <span class="literal">NULL</span>;</span><br><span class="line">    Block* current = lastAllocated ? lastAllocated-&gt;next : freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!current) current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;PROCESS_NUM; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status &amp;&amp; current-&gt;size &gt;= pcb-&gt;neededMem)&#123;</span><br><span class="line">            allocate_memory(pcb,current);</span><br><span class="line">            lastAllocated = current;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(!current) current = freeList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate memory for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="allocate_memory"><a class="markdownIt-Anchor" href="#allocate_memory"></a> allocate_memory</h4><p>在这个问题中最复杂的部分反而是内存划分函数，因为根据划分位置的不同，最后有可能产生两个或三个块，需要具体分情况讨论；并且最终产生的多个块中，需要仔细更新其指针关系，以维护空闲内存分区双向链表地点数据结构。</p><p>这里我们定义三个指针<code>leftBlock</code>、<code>middleBlock</code>、<code>rightBlock</code>，分别对应位于分配内存块左边的块、分配给进程的内存块与位于分配内存块右边的内存块。</p><p>具体实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">allocate_memory</span><span class="params">(PCB* pcb, Block* block)</span>&#123;</span><br><span class="line">    Block* leftBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分内存块的左侧</span></span><br><span class="line">    Block* middleBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分的内存块</span></span><br><span class="line">    Block* rightBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分内存块的右侧</span></span><br><span class="line">    <span class="type">int</span> startAddr = block-&gt;startAddr + rand() % (block-&gt;size - pcb-&gt;neededMem + <span class="number">1</span>); <span class="comment">// 随机选择的起始地址</span></span><br><span class="line"></span><br><span class="line">    pcb-&gt;blockID = block-&gt;id;</span><br><span class="line">    pcb-&gt;status = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocate free memory block for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从空闲块头部开始划分</span></span><br><span class="line">    <span class="keyword">if</span> (startAddr == block-&gt;startAddr)&#123;</span><br><span class="line">        rightBlock = create_block(block-&gt;size - pcb-&gt;neededMem, startAddr,</span><br><span class="line">                                  <span class="literal">true</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        middleBlock = block;</span><br><span class="line">        middleBlock-&gt;pid = pcb-&gt;pid;</span><br><span class="line">        middleBlock-&gt;status = <span class="literal">false</span>;</span><br><span class="line">        middleBlock-&gt;size = pcb-&gt;neededMem;</span><br><span class="line">    &#125; <span class="comment">// 从空闲块尾部开始划分</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (startAddr + pcb-&gt;neededMem == block-&gt;startAddr + block-&gt;size)&#123;</span><br><span class="line">        leftBlock = block;</span><br><span class="line">        middleBlock = create_block(pcb-&gt;neededMem, startAddr,<span class="literal">false</span>,pcb-&gt;pid);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size = block-&gt;size - pcb-&gt;neededMem;</span><br><span class="line">    &#125; <span class="comment">// 从空闲块中部开始划分</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        leftBlock = block;</span><br><span class="line">        middleBlock = create_block(pcb-&gt;neededMem,startAddr,<span class="literal">false</span>,pcb-&gt;pid);</span><br><span class="line">        rightBlock = create_block(block-&gt;startAddr + block-&gt;size - startAddr - pcb-&gt;neededMem,</span><br><span class="line">                                  startAddr + pcb-&gt;neededMem,<span class="literal">true</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size = startAddr - block-&gt;startAddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!leftBlock &amp;&amp; rightBlock)&#123;</span><br><span class="line">        rightBlock-&gt;prev = middleBlock;</span><br><span class="line">        rightBlock-&gt;next = middleBlock-&gt;next;</span><br><span class="line">        middleBlock-&gt;next = rightBlock;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (leftBlock &amp;&amp; !rightBlock)&#123;</span><br><span class="line">        middleBlock-&gt;prev = leftBlock;</span><br><span class="line">        middleBlock-&gt;next = leftBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftBlock-&gt;next) leftBlock-&gt;next-&gt;prev = rightBlock;</span><br><span class="line">        leftBlock-&gt;next = middleBlock;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (leftBlock &amp;&amp; rightBlock)&#123;</span><br><span class="line">        middleBlock-&gt;prev = leftBlock;</span><br><span class="line">        middleBlock-&gt;next = rightBlock;</span><br><span class="line">        rightBlock-&gt;prev = middleBlock;</span><br><span class="line">        rightBlock-&gt;next = leftBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftBlock-&gt;next) leftBlock-&gt;next-&gt;prev = rightBlock;</span><br><span class="line">        leftBlock-&gt;next = middleBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_memory_state();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="merge_memory"><a class="markdownIt-Anchor" href="#merge_memory"></a> merge_memory</h4><p>与第二问一样，动态分区分配在进程结束后也需要对分配的内存块进行回收与合并，最后重新变为一块大内存块。</p><p>合并内存块的逻辑很简单，对于给定的内存释放区域，分别检测其左右内存块是否空闲，然后按照<strong>从右到左</strong>的顺序进行合并。注意：针对内存的合并必须要有一个确定的顺序，一般都是从右到左进行合并，以确保最后得到的内存块ID最小。如果合并顺序紊乱（比如笔者最开始是释放中间的块），就会导致指针关系混乱，空闲内存块双向链表结构被破坏。</p><p>代码实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">merge_memory</span><span class="params">(Block* block)</span> &#123;</span><br><span class="line">    Block* leftBlock = block-&gt;prev;</span><br><span class="line">    Block* rightBlock = block-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并右侧空闲块</span></span><br><span class="line">    <span class="keyword">if</span> (rightBlock &amp;&amp; rightBlock-&gt;status) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Combine block id:%d (size: %d) with id:%d (size: %d)\n&quot;</span>,</span><br><span class="line">               block-&gt;id, block-&gt;size, rightBlock-&gt;id, rightBlock-&gt;size);</span><br><span class="line"></span><br><span class="line">        block-&gt;size += rightBlock-&gt;size;</span><br><span class="line">        block-&gt;next = rightBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightBlock-&gt;next) &#123;</span><br><span class="line">            rightBlock-&gt;next-&gt;prev = block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(rightBlock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并左侧空闲块</span></span><br><span class="line">    <span class="keyword">if</span> (leftBlock &amp;&amp; leftBlock-&gt;status) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Combine block id:%d (size: %d) with id:%d (size: %d)\n&quot;</span>,</span><br><span class="line">               leftBlock-&gt;id, leftBlock-&gt;size, block-&gt;id, block-&gt;size);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size += block-&gt;size;</span><br><span class="line">        leftBlock-&gt;next = block-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (block-&gt;next) &#123;</span><br><span class="line">            block-&gt;next-&gt;prev = leftBlock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dynamic-partition-allocation"><a class="markdownIt-Anchor" href="#dynamic-partition-allocation"></a> Dynamic partition allocation</h4><p>最终实现完整版代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <div class="tabs" id="dynamic_partition_allocation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#dynamic_partition_allocation-1">头文件q1.h</button></li><li class="tab"><button type="button" data-href="#dynamic_partition_allocation-2">函数定义q1f.c</button></li><li class="tab active"><button type="button" data-href="#dynamic_partition_allocation-3">主函数q1.c</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="dynamic_partition_allocation-1"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">ifndef</span> Q1_H</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> Q1_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MEMORY_SIZE 1024</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PROCESS_NUM 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;               <span class="comment">// 分区序号</span></span><br><span class="line">    <span class="type">int</span> size;            <span class="comment">// 分区大小</span></span><br><span class="line">    <span class="type">int</span> startAddr;        <span class="comment">// 分区起始地址</span></span><br><span class="line">    <span class="type">bool</span> status;          <span class="comment">// true为空闲，false为占用</span></span><br><span class="line">    <span class="type">int</span> pid;              <span class="comment">// 占用进程id, -1表示空闲</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> *<span class="title">prev</span>;</span>   <span class="comment">// 指向前一块内存分区</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> *<span class="title">next</span>;</span>   <span class="comment">// 指向后一块内存分区</span></span><br><span class="line">&#125; Block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> pid;              <span class="comment">// 进程序号</span></span><br><span class="line">    <span class="type">int</span> neededMem;        <span class="comment">// 需要的内存分区大小（2^neededMem）</span></span><br><span class="line">    <span class="type">int</span> status;           <span class="comment">// 1：成功；-1：失败</span></span><br><span class="line">    <span class="type">int</span> blockID;          <span class="comment">// 占用分区id，-1表示失败</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span>     <span class="comment">// 指向下一个PCB</span></span><br><span class="line">&#125; PCB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCBQueue</span> &#123;</span></span><br><span class="line">    PCB* front;</span><br><span class="line">    PCB* rear;</span><br><span class="line">&#125; PCBQueue;</span><br><span class="line"></span><br><span class="line">Block* <span class="title function_">create_block</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> startAddr, <span class="type">bool</span> status, <span class="type">int</span> pid)</span>;</span><br><span class="line">PCB* <span class="title function_">create_pcb</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> neededMem)</span>;</span><br><span class="line">PCBQueue* <span class="title function_">create_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_memory</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_process</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_memory_state</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FF</span><span class="params">(PCB* pcb)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">NF</span><span class="params">(PCB* pcb)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">allocate_memory</span><span class="params">(PCB* pcb, Block* block)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_memory</span><span class="params">(Block* block)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free_memory</span><span class="params">(<span class="type">int</span> pid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_empty_queue</span><span class="params">(PCBQueue *Q)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(PCBQueue* Q, PCB* pcb)</span>;</span><br><span class="line">PCB* <span class="title function_">dequeue</span><span class="params">(PCBQueue* Q)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_memory</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_queue</span><span class="params">(PCBQueue* Q)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_a</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_b</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic_partition_allocation-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Block *freeList = <span class="literal">NULL</span>;</span><br><span class="line">PCBQueue *pcbQueue = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> global_block_id = <span class="number">1</span>; <span class="comment">// 全局id计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个内存块，确定内存块的：</span></span><br><span class="line"><span class="comment">    1.id 根据全局id计数器分配得到一个唯一id</span></span><br><span class="line"><span class="comment">    2.size 内存块的大小</span></span><br><span class="line"><span class="comment">    3.startAddr 由父内存块的地址加上size得到</span></span><br><span class="line"><span class="comment">    4.status 刚创建时默认为空闲，即true</span></span><br><span class="line"><span class="comment">    5.pid 初始时默认为空闲，即-1</span></span><br><span class="line"><span class="comment">    6.prev 指向前一块内存块</span></span><br><span class="line"><span class="comment">    7.next 指向后一块内存块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Block* <span class="title function_">create_block</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> startAddr, <span class="type">bool</span> status, <span class="type">int</span> pid)</span>&#123;</span><br><span class="line">    Block* new_block = (Block*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Block));</span><br><span class="line">    new_block-&gt;id = global_block_id++;</span><br><span class="line">    new_block-&gt;size = size;</span><br><span class="line">    new_block-&gt;startAddr = startAddr;</span><br><span class="line">    new_block-&gt;status = status;</span><br><span class="line">    new_block-&gt;pid = pid;</span><br><span class="line">    new_block-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    new_block-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个进程，确定进程的：</span></span><br><span class="line"><span class="comment">    1.pid 进程的序号</span></span><br><span class="line"><span class="comment">    2.neededMem 进程所需要的内存空间大小</span></span><br><span class="line"><span class="comment">    3.status 进程的状态，刚创建时默认未分配内存，即-1</span></span><br><span class="line"><span class="comment">    4.blockID 表示进程占用的内存块序号，初始化为未占用，即-1</span></span><br><span class="line"><span class="comment">    5.next 指向下一个进程，初始化为NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCB* <span class="title function_">create_pcb</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> neededMem)</span>&#123;</span><br><span class="line">    PCB* new_pcb = (PCB*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    new_pcb-&gt;pid = pid;</span><br><span class="line">    new_pcb-&gt;neededMem = neededMem;</span><br><span class="line">    new_pcb-&gt;status = <span class="number">-1</span>;</span><br><span class="line">    new_pcb-&gt;blockID = <span class="number">-1</span>;</span><br><span class="line">    new_pcb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_pcb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建pcb队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCBQueue* <span class="title function_">create_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    PCBQueue* Q = (PCBQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCBQueue));</span><br><span class="line"></span><br><span class="line">    Q-&gt;front = Q-&gt;rear =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化内存块为一块大内存，容量为1024kb</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_memory</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    freeList = create_block(MEMORY_SIZE, <span class="number">0</span>, <span class="literal">true</span>, <span class="number">-1</span>);</span><br><span class="line">    freeList-&gt;prev = freeList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化进程，创建PROCESS_NUM个进程并加入PCB进程队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_process</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    PCB* temp;</span><br><span class="line">    <span class="type">int</span> random_memory;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PROCESS_NUM; i++)&#123;</span><br><span class="line">        random_memory = rand() % <span class="number">101</span> + <span class="number">100</span>;</span><br><span class="line">        temp = create_pcb(i,random_memory);</span><br><span class="line">        enqueue(pcbQueue,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">打印内存状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_memory_state</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;free block id: %d, size: %d, startAddr: %d\n&quot;</span>,</span><br><span class="line">                   current-&gt;id,current-&gt;size,current-&gt;startAddr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;used block id: %d, size: %d, startAddr: %d, pid: %d\n&quot;</span>,</span><br><span class="line">                   current-&gt;id,current-&gt;size,current-&gt;startAddr,current-&gt;pid);</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">打印进程状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    PCB* current = pcbQueue-&gt;front;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PCB Queue State:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (current)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;#%d neededMem:%d\n&quot;</span>,current-&gt;pid,current-&gt;neededMem);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用首次适应算法为给定的进程分配内存：</span></span><br><span class="line"><span class="comment">    1. 从空闲分区链表的第一项开始往后遍历，找到一个足够大的空闲分区</span></span><br><span class="line"><span class="comment">    2. 如果没找到，则提示内存分配失败，接着继续为下一个进程分配内存</span></span><br><span class="line"><span class="comment">    3. 如果找到了，则给该进程分配，并更新空闲分区链表</span></span><br><span class="line"><span class="comment">    4. 当对一块空闲分区进行划分时，</span></span><br><span class="line"><span class="comment">       在这块空闲分区的地址范围内随机产生一个划分的开始位置，</span></span><br><span class="line"><span class="comment">       然后划分出当前进程大小的分区</span></span><br><span class="line"><span class="comment">划分空闲分区会产生三个或两个块（当划分开始位置是空闲块起始位置或者终止位置与空闲块终止位置重合时）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FF</span><span class="params">(PCB* pcb)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status &amp;&amp; current-&gt;size &gt;= pcb-&gt;neededMem)&#123;</span><br><span class="line">            allocate_memory(pcb,current);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate memory for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用循环首次适应算法为给定的进程分配内存</span></span><br><span class="line"><span class="comment">区别在于，每次不是从头开始检索空闲内存块，而是从上一次分配的地方开始检索</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">NF</span><span class="params">(PCB* pcb)</span>&#123;</span><br><span class="line">    <span class="type">static</span> Block* lastAllocated = <span class="literal">NULL</span>;</span><br><span class="line">    Block* current = lastAllocated ? lastAllocated-&gt;next : freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!current) current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;PROCESS_NUM; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status &amp;&amp; current-&gt;size &gt;= pcb-&gt;neededMem)&#123;</span><br><span class="line">            allocate_memory(pcb,current);</span><br><span class="line">            lastAllocated = current;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(!current) current = freeList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate memory for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定进程块和要分配的blockID，将在该空闲内存块上划分内存分配给进程；</span></span><br><span class="line"><span class="comment">并且更新内存块和PCB的信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">allocate_memory</span><span class="params">(PCB* pcb, Block* block)</span>&#123;</span><br><span class="line">    Block* leftBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分内存块的左侧</span></span><br><span class="line">    Block* middleBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分的内存块</span></span><br><span class="line">    Block* rightBlock = <span class="literal">NULL</span>; <span class="comment">// 指向被划分内存块的右侧</span></span><br><span class="line">    <span class="type">int</span> startAddr = block-&gt;startAddr + rand() % (block-&gt;size - pcb-&gt;neededMem + <span class="number">1</span>); <span class="comment">// 随机选择的起始地址</span></span><br><span class="line"></span><br><span class="line">    pcb-&gt;blockID = block-&gt;id;</span><br><span class="line">    pcb-&gt;status = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocate free memory block for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从空闲块头部开始划分</span></span><br><span class="line">    <span class="keyword">if</span> (startAddr == block-&gt;startAddr)&#123;</span><br><span class="line">        rightBlock = create_block(block-&gt;size - pcb-&gt;neededMem, startAddr,</span><br><span class="line">                                  <span class="literal">true</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        middleBlock = block;</span><br><span class="line">        middleBlock-&gt;pid = pcb-&gt;pid;</span><br><span class="line">        middleBlock-&gt;status = <span class="literal">false</span>;</span><br><span class="line">        middleBlock-&gt;size = pcb-&gt;neededMem;</span><br><span class="line">    &#125; <span class="comment">// 从空闲块尾部开始划分</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (startAddr + pcb-&gt;neededMem == block-&gt;startAddr + block-&gt;size)&#123;</span><br><span class="line">        leftBlock = block;</span><br><span class="line">        middleBlock = create_block(pcb-&gt;neededMem, startAddr,<span class="literal">false</span>,pcb-&gt;pid);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size = block-&gt;size - pcb-&gt;neededMem;</span><br><span class="line">    &#125; <span class="comment">// 从空闲块中部开始划分</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        leftBlock = block;</span><br><span class="line">        middleBlock = create_block(pcb-&gt;neededMem,startAddr,<span class="literal">false</span>,pcb-&gt;pid);</span><br><span class="line">        rightBlock = create_block(block-&gt;startAddr + block-&gt;size - startAddr - pcb-&gt;neededMem,</span><br><span class="line">                                  startAddr + pcb-&gt;neededMem,<span class="literal">true</span>,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size = startAddr - block-&gt;startAddr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!leftBlock &amp;&amp; rightBlock)&#123;</span><br><span class="line">        rightBlock-&gt;prev = middleBlock;</span><br><span class="line">        rightBlock-&gt;next = middleBlock-&gt;next;</span><br><span class="line">        middleBlock-&gt;next = rightBlock;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (leftBlock &amp;&amp; !rightBlock)&#123;</span><br><span class="line">        middleBlock-&gt;prev = leftBlock;</span><br><span class="line">        middleBlock-&gt;next = leftBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftBlock-&gt;next) leftBlock-&gt;next-&gt;prev = rightBlock;</span><br><span class="line">        leftBlock-&gt;next = middleBlock;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (leftBlock &amp;&amp; rightBlock)&#123;</span><br><span class="line">        middleBlock-&gt;prev = leftBlock;</span><br><span class="line">        middleBlock-&gt;next = rightBlock;</span><br><span class="line">        rightBlock-&gt;prev = middleBlock;</span><br><span class="line">        rightBlock-&gt;next = leftBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftBlock-&gt;next) leftBlock-&gt;next-&gt;prev = rightBlock;</span><br><span class="line">        leftBlock-&gt;next = middleBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_memory_state();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">合并空闲的内存:</span></span><br><span class="line"><span class="comment">    1. 检查其左右内存块是否可以用于合并</span></span><br><span class="line"><span class="comment">    2. 对于空闲的左内存块，更改其sizeK</span></span><br><span class="line"><span class="comment">    3. 对于空闲的右内存块，更改其startAddr与sizeK</span></span><br><span class="line"><span class="comment">    4. 更改指针关系</span></span><br><span class="line"><span class="comment">    5. 释放内存</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_memory</span><span class="params">(Block* block)</span> &#123;</span><br><span class="line">    Block* leftBlock = block-&gt;prev;</span><br><span class="line">    Block* rightBlock = block-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并右侧空闲块</span></span><br><span class="line">    <span class="keyword">if</span> (rightBlock &amp;&amp; rightBlock-&gt;status) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Combine block id:%d (size: %d) with id:%d (size: %d)\n&quot;</span>,</span><br><span class="line">               block-&gt;id, block-&gt;size, rightBlock-&gt;id, rightBlock-&gt;size);</span><br><span class="line"></span><br><span class="line">        block-&gt;size += rightBlock-&gt;size;</span><br><span class="line">        block-&gt;next = rightBlock-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightBlock-&gt;next) &#123;</span><br><span class="line">            rightBlock-&gt;next-&gt;prev = block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(rightBlock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并左侧空闲块</span></span><br><span class="line">    <span class="keyword">if</span> (leftBlock &amp;&amp; leftBlock-&gt;status) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Combine block id:%d (size: %d) with id:%d (size: %d)\n&quot;</span>,</span><br><span class="line">               leftBlock-&gt;id, leftBlock-&gt;size, block-&gt;id, block-&gt;size);</span><br><span class="line"></span><br><span class="line">        leftBlock-&gt;size += block-&gt;size;</span><br><span class="line">        leftBlock-&gt;next = block-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (block-&gt;next) &#123;</span><br><span class="line">            block-&gt;next-&gt;prev = leftBlock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定进程的pid，释放该进程及分配给它的内存块。</span></span><br><span class="line"><span class="comment">    对于进程：不变</span></span><br><span class="line"><span class="comment">    对于内存块：更改status、pid属性，并调用合并内存块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_memory</span><span class="params">(<span class="type">int</span> pid)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;pid == pid)&#123;</span><br><span class="line">            current-&gt;status = <span class="literal">true</span>;</span><br><span class="line">            current-&gt;pid = <span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Recycle used memory block for process #%d of size %d...\n&quot;</span>,</span><br><span class="line">                   pid,current-&gt;size);</span><br><span class="line">            merge_memory(current);</span><br><span class="line">            print_memory_state();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot free memory for process #%d\n&quot;</span>,pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断当前进程队列是否为空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_empty_queue</span><span class="params">(PCBQueue *Q)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将进程加入进程队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(PCBQueue* Q, PCB* pcb)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear) Q-&gt;rear-&gt;next = pcb;</span><br><span class="line"></span><br><span class="line">    Q-&gt;rear = pcb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>) Q-&gt;front = Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将进程从队列中出队</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCB* <span class="title function_">dequeue</span><span class="params">(PCBQueue* Q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty_queue(Q))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PCB Queue is Empty!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PCB* temp = Q-&gt;front;</span><br><span class="line">        Q-&gt;front = Q-&gt;front-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试函数，用于测试FF算法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_a</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    pcbQueue = create_pcb_queue();</span><br><span class="line">    initialize_memory();</span><br><span class="line">    initialize_process();</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    print_pcb_queue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!is_empty_queue(pcbQueue))&#123;</span><br><span class="line">        PCB* pcb = dequeue(pcbQueue);</span><br><span class="line">        FF(pcb);</span><br><span class="line">        <span class="built_in">free</span>(pcb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free_memory(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete_memory();</span><br><span class="line">    delete_queue(pcbQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试函数，用于测试NF算法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_b</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    pcbQueue = create_pcb_queue();</span><br><span class="line">    initialize_memory();</span><br><span class="line">    initialize_process();</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    print_pcb_queue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!is_empty_queue(pcbQueue))&#123;</span><br><span class="line">        PCB* pcb = dequeue(pcbQueue);</span><br><span class="line">        NF(pcb);</span><br><span class="line">        <span class="built_in">free</span>(pcb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free_memory(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete_memory();</span><br><span class="line">    delete_queue(pcbQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除内存分配的空间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_memory</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block *temp = freeList;</span><br><span class="line">    freeList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除PCB进程队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_queue</span><span class="params">(PCBQueue* Q)</span>&#123;</span><br><span class="line">    PCB* temp;</span><br><span class="line">    <span class="keyword">while</span> (Q-&gt;front)&#123;</span><br><span class="line">        temp = Q-&gt;front;</span><br><span class="line">        Q-&gt;front = Q-&gt;front-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="dynamic_partition_allocation-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行test_case_a()即FF算法</span></span><br><span class="line"><span class="comment">运行test_case_b()即NF算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    test_case_a();</span><br><span class="line">    <span class="comment">// test_case_b();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>最终运行部分结果如下：</p><div class="tabs" id="dynamic_partition_allocation_result"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dynamic_partition_allocation_result-1">内存分配</button></li><li class="tab"><button type="button" data-href="#dynamic_partition_allocation_result-2">内存回收</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dynamic_partition_allocation_result-1"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241127102405420.png" alt="image-20241127102405420" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic_partition_allocation_result-2"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241127102443532.png" alt="image-20241127102443532" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>值得注意的是，由于动态分区分配法产生的内存碎片过多，经多次测试大约会有一半的进程根本无法分配到内存。上图中我展示的测试用例是有三个进程未能得到内存分配，其实已经算运气非常好了。</p><h3 id="q2-4"><a class="markdownIt-Anchor" href="#q2-4"></a> Q2</h3><blockquote><p><strong>设计任务：</strong></p><p>假设内存总大小为2<sup>10</sup>=1024，开始地址为0，结束地址为1023,在系统初始时，整个内存是1块空闲内存分区，大小为2<sup>10</sup>=1024。有n个进程需要分配内存空间。使用伙伴系统(Buddy System)算法来依次为这n个进程分配内存。当内存分配完毕之后，再将分配的这n个空闲分区块进行合并回收，最后得到1整块大的空闲分区，其大小为2<sup>10</sup>=1024。具体要完成的设计任务为编程实现Buddy System算法来完成以下两个内存分配和回收问题：</p><ol><li>假设n=3,即有3个进程，第1个进程申请的内存大小为2<sup>7</sup>,第2个进程申请的内存大小为2<sup>4</sup>，第3个进程申请的内存大小为2<sup>8</sup>；</li><li>假设有n=8个进程，每个进程所申请的内存块大小为2<sup>k</sup>，其中k为随机整数，在[3,8]间产生。</li></ol><p><strong>要求：</strong></p><ol><li>在内存分配过程中，输出每一次内存分配结果，即空闲/占用分区块情况；</li><li>在内存回收过程中，输出每一次内存回收后的结果：即空闲/占用分区块情况；</li><li>在每一次对分区块进行划分/合并的时候，输出相应的划分/合并信息。</li></ol></blockquote><p>我们首先来简单的介绍一下什么是伙伴系统，其实它的原理相当简单。</p><p>伙伴系统是一种基于<strong>二进制划分</strong>的内存分配算法。它将内存划分成大小为 2 的幂次的块（如 1KB、2KB、4KB 等）。当需要分配内存时，系统会找到一个合适大小的块，将其分配给请求方；如果需要的块比当前块小，系统会将块对半拆分，直到满足需求为止。</p><p>它的具体工作原理如下：</p><ol><li>初始化：<ul><li>假设内存大小为 2<sup>n</sup>，系统将内存看作一个整体的大块。这块内存可以被不断对半分裂，形成伙伴块（即大小相等的两块）</li></ul></li><li>分配内存：<ul><li>进程请求内存，伙伴系统会根据进程所请求的内存大小，找到<strong>最小的满足请求的内存块</strong>。</li><li>如果该内存块过大，则对其进行分裂，直到块大小接近但不小于请求大小。</li><li>被分配的块标记为“已使用”。这样，下一个进程请求内存时，伙伴系统将不会把被标记为已使用的内存块分配给它。</li></ul></li><li>释放内存：<ul><li>当内存块被释放时，系统尝试找到该块的伙伴块（大小相等且地址连续的块）。</li><li>如果伙伴块也未被使用，两者会合并成更大的块，形成新的伙伴关系。</li><li>合并操作会递归进行，直到无法再合并为止。</li></ul></li></ol><p>伙伴系统概念图如下所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E5%9B%BE.drawio.png" alt="伙伴系统概念图.drawio" style="zoom:67%;" /><p>简单来说，可以把伙伴系统划分为两个过程：</p><ul><li>分配内存时，首先找到一块内存比进程要求的大小更大的内存块，然后对它切切切，直到二分到<strong>再分一次就不足以满足进程要求为止</strong>，也就是处于所谓的“临界区”。切割内存的过程中，分出的另一个双胞胎内存块就是它的<strong>伙伴</strong>。最后，把这一个满足要求的最小内存块分配给进程。</li><li>释放内存时，检查该内存的伙伴块是否也是空闲状态。如果是空闲状态，则一路向上合体，<strong>直到另一个伙伴此时正在忙或者没有伙伴与自己合并，即还原成初始的一块大内存块</strong>时停止合并。</li></ul><p>这个过程说起来很简单，但还需要注意一些细节。我们把过程当中的几个关键部分抽象出来编写成函数，然后再完善一下其他的逻辑就可以完成本次实验了。经过整理，我们大致可以把伙伴系统的实现抽象成以下这么几个函数：</p><ul><li><code>find_free_block</code> 为给定的进程找到一块合适的内存块，只需要该内存块的内存大小大于进程的要求即可。</li><li><code>split_block</code> 分割内存块，直到形成满足要求的最小内存块。</li><li><code>merge_blocks</code> 合并内存块，递归向上合并直到无法合并为止。</li></ul><p>大体来说，伙伴系统的实现就依赖于这上面的三个函数操作：寻找内存块、分割内存块、合并内存块。我们详细介绍这三个函数的实现，伙伴系统便描述的差不多了。</p><h4 id="find_free_block"><a class="markdownIt-Anchor" href="#find_free_block"></a> find_free_block</h4><p>寻找合适的内存块很好实现，我们只需要遍历存储内存块的<strong>双向链表</strong>，找到满足内存大于进程请求内存以及未被分配的内存块即可。</p><p>实现的代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Block* <span class="title function_">find_free_block</span><span class="params">(<span class="type">int</span> sizeK)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;sizeK &gt;= sizeK &amp;&amp; current-&gt;status) <span class="keyword">return</span> current;</span><br><span class="line">        <span class="keyword">else</span> current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="split_block"><a class="markdownIt-Anchor" href="#split_block"></a> split_block</h4><p>切割内存块，即将给定的内存块分割为两个新的内存块，大小为原内存块的一半。这个过程中，会产生左伙伴和右伙伴（想象一下把一个矩形分为两半，左伙伴就是左边的那个新矩形，右伙伴就是右边那个）。</p><p>在这里我们要做两件事，一是额外创建一个内存块结构体用于保存新产生的右伙伴（左伙伴可以沿用分割前的原内存块）；二是更改存储内存块的双向链表的指针连接方式，将新产生的右伙伴加入到链表中。</p><p>维护一个新的结构体保存左右伙伴信息很简单，左伙伴的原数据可以直接继承父内存块，只需要将内存减半即可；右伙伴除了需要改动内存大小，起始地址也需要改变，即左伙伴的起始地址加上左伙伴的内存大小。</p><p>将新产生的右伙伴加入到双向链表中，本质上就是链表的插入问题，这里不多赘述。</p><p>实现的代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">split_block</span><span class="params">(Block* block)</span>&#123;</span><br><span class="line">    Block* new_block;</span><br><span class="line">    <span class="type">int</span> half_sizeK = block-&gt;sizeK - <span class="number">1</span>;</span><br><span class="line">    new_block = create_block(half_sizeK,</span><br><span class="line">                             block-&gt;startAddr + (<span class="number">1</span> &lt;&lt; half_sizeK),</span><br><span class="line">                             <span class="literal">true</span>, <span class="number">-1</span>);</span><br><span class="line">    new_block-&gt;prev = block;</span><br><span class="line">    new_block-&gt;next = block-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (block-&gt;next)&#123;</span><br><span class="line">        block-&gt;next-&gt;prev = new_block;</span><br><span class="line">    &#125;</span><br><span class="line">    block-&gt;sizeK = half_sizeK;</span><br><span class="line">    block-&gt;next = new_block;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Split block id: %d, size: 2^%d, startAddr: %d\n&quot;</span>,</span><br><span class="line">           block-&gt;id,block-&gt;sizeK,block-&gt;startAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="merge_blocks"><a class="markdownIt-Anchor" href="#merge_blocks"></a> merge_blocks</h4><p>合并内存块的操作也许是伙伴系统中最为复杂的部分了，不过也不难。详细来说，合并内存块主要有两个步骤：</p><ol><li>找到内存块的伙伴，这里假设我们有一个函数<code>find_buddy</code>能够找到指定内存块的伙伴。</li><li>向上合并直到无法合并为止。</li></ol><p>合并操作几乎是切割操作的逆向，我们把内存块的内存扩大一倍，然后释放掉其伙伴，就完成了合并操作。但是这么做的前提是：<span class='p red'>我们默认操作的总是左伙伴块</span>。道理很简单，因为左伙伴块的起始地址更低，我们扩大内存时不需要改动其起始地址；倘若操作的是右伙伴块，则还需要重新计算其起始地址，更加麻烦。所以，我们默认操作的都是左伙伴块。</p><p>至于<strong>向上合并直到无法合并为止</strong>：本质上就是每执行一次合并操作，立即退回到内存块双向链表的头部重新开始遍历内存块，检测是否可以进行合并操作。这部分用递归或者迭代实现都可以。用递归实现有容易栈溢出的风险，但是写起来很简单；用迭代实现，则需要额外加一个变量来记录当前循环中是否发生了合并操作作为退出迭代的条件。这里采用递归实现：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">merge_blocks</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        Block* buddy = find_buddy(current);</span><br><span class="line">        <span class="comment">// 确保伙伴存在、伙伴为空闲、当前块为空闲，方可进行合并</span></span><br><span class="line">        <span class="keyword">if</span> (!buddy || !buddy-&gt;status || !current-&gt;status)&#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到的伙伴块是左伙伴块，则交换指针指向的对象，确保释放的一直是右伙伴块</span></span><br><span class="line">        <span class="keyword">if</span> (current-&gt;startAddr &gt; buddy-&gt;startAddr)&#123;</span><br><span class="line">            Block* temp = current;</span><br><span class="line">            current = buddy;</span><br><span class="line">            buddy = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current-&gt;sizeK++;</span><br><span class="line">        current-&gt;next = buddy-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (buddy-&gt;next) buddy-&gt;next-&gt;prev = current;</span><br><span class="line">        <span class="built_in">free</span>(buddy); <span class="comment">// 释放伙伴块</span></span><br><span class="line">        merge_blocks(); <span class="comment">// 递归，尝试向上合并</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 防止链表结构变化后指针失效，直接返回。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们讲讲如何实现<code>find_buddy</code>函数，这部分很有意思。</p><h5 id="find_buddy"><a class="markdownIt-Anchor" href="#find_buddy"></a> find_buddy</h5><p><strong>伙伴</strong>的定义是和当前内存块大小相同且地址连续的内存块，当然，最重要的是内存块和其伙伴是由同一个父内存块划分而来。所以，左右伙伴的起始地址之间存在一个计算公式。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>A</mi><mi>d</mi><mi>d</mi><msub><mi>r</mi><mtext>右伙伴</mtext></msub><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>A</mi><mi>d</mi><mi>d</mi><msub><mi>r</mi><mtext>左伙伴</mtext></msub><mo>+</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><msub><mi>K</mi><mtext>左伙伴</mtext></msub></mrow><annotation encoding="application/x-tex">startAddr_{\text{右伙伴}}=startAddr_{\text{左伙伴}} + sizeK_{\text{左伙伴}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">右伙伴</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">左伙伴</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">左伙伴</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>所以，给定一个内存块，我们可以通过计算其伙伴块的地址，来定位到它的伙伴块。</p><p>但是这里有一个问题：我们怎么知道，内存块的伙伴是左伙伴还是右伙伴呢？在伙伴关系不确定的前提下，我们根本不知道是用当前伙伴块的地址加上其内存大小还是减去其内存大小。</p><p>这一点可以用<strong>异或</strong>运算来巧妙地解决。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>A</mi><mi>d</mi><mi>d</mi><msub><mi>r</mi><mtext>伙伴</mtext></msub><mo>=</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mi>A</mi><mi>d</mi><mi>d</mi><msub><mi>r</mi><mtext>当前内存块</mtext></msub><mo>⊕</mo><mo stretchy="false">(</mo><mn>1</mn><mo>≪</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><msub><mi>K</mi><mtext>当前内存块</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">startAddr_{\text{伙伴}}=startAddr_{\text{当前内存块}} \oplus (1 \ll sizeK_{\text{当前内存块}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">伙伴</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">当前内存块</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≪</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">当前内存块</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>假设块大小为 <code>sizeK</code>，那么 <code>1 &lt;&lt; sizeK</code> 对应的是一个二进制数，其第 <code>sizeK</code> 位是 <code>1</code>，低于 <code>sizeK</code> 的位是 <code>0</code>。</p><p>异或（<code>^</code>）操作会把第 <code>sizeK</code> 位翻转：</p><ul><li>如果 <code>startAddr</code> 是块对的前半部分地址（低位块），翻转后就变成后半部分地址（高位块）。</li><li>如果 <code>startAddr</code> 是块对的后半部分地址（高位块），翻转后就变成前半部分地址（低位块）。</li></ul><p>XOR 操作具有对称性：<code>a ^ b ^ b = a</code>，因此不管当前块是前半部分还是后半部分，用 XOR 都能得到正确的伙伴地址。</p><p>所以我们的<code>find_buddy</code>函数可以实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Block* <span class="title function_">find_buddy</span><span class="params">(Block* block)</span>&#123;</span><br><span class="line">    <span class="type">int</span> buddy_start = block-&gt;startAddr ^ (<span class="number">1</span> &lt;&lt; block-&gt;sizeK);</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;startAddr == buddy_start &amp;&amp; current-&gt;sizeK == block-&gt;sizeK) <span class="keyword">return</span> current;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="buddy-system"><a class="markdownIt-Anchor" href="#buddy-system"></a> buddy system</h4><p>综上所述，伙伴系统的实现全部代码如下。</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <div class="tabs" id="buddy_system"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#buddy_system-1">头文件q2.h</button></li><li class="tab"><button type="button" data-href="#buddy_system-2">函数定义q2f.c</button></li><li class="tab active"><button type="button" data-href="#buddy_system-3">主函数q2.c</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="buddy_system-1"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.h</span></span><br><span class="line"><span class="meta"># <span class="keyword">ifndef</span> Q2_H</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> Q2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MEMORY_SIZE 10</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PROCESS_NUM 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;               <span class="comment">// 分区序号</span></span><br><span class="line">    <span class="type">int</span> sizeK;            <span class="comment">// 分区大小，以2^sizeK表示</span></span><br><span class="line">    <span class="type">int</span> startAddr;        <span class="comment">// 分区起始地址</span></span><br><span class="line">    <span class="type">bool</span> status;          <span class="comment">// true为空闲，false为占用</span></span><br><span class="line">    <span class="type">int</span> pid;              <span class="comment">// 占用进程id, -1表示空闲</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> *<span class="title">prev</span>;</span>   <span class="comment">// 指向前一块内存分区</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Block</span> *<span class="title">next</span>;</span>   <span class="comment">// 指向后一块内存分区</span></span><br><span class="line">&#125; Block;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义进程PCB结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> pid;              <span class="comment">// 进程序号</span></span><br><span class="line">    <span class="type">int</span> neededMem;        <span class="comment">// 需要的内存分区大小（2^neededMem）</span></span><br><span class="line">    <span class="type">int</span> status;           <span class="comment">// 1：成功；-1：失败</span></span><br><span class="line">    <span class="type">int</span> blockID;          <span class="comment">// 占用分区id，-1表示失败</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span>     <span class="comment">// 指向下一个PCB</span></span><br><span class="line">&#125; PCB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCBQueue</span> &#123;</span></span><br><span class="line">    PCB* front;</span><br><span class="line">    PCB* rear;</span><br><span class="line">&#125; PCBQueue;</span><br><span class="line"></span><br><span class="line">Block* <span class="title function_">create_block</span><span class="params">(<span class="type">int</span> sizeK, <span class="type">int</span> startAddr, <span class="type">bool</span> status, <span class="type">int</span> pid)</span>;</span><br><span class="line">PCB* <span class="title function_">create_pcb</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> neededMem)</span>;</span><br><span class="line">PCBQueue* <span class="title function_">create_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_memory</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_memory_state</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">Block* <span class="title function_">find_free_block</span><span class="params">(<span class="type">int</span> sizeK)</span>;</span><br><span class="line">Block* <span class="title function_">find_buddy</span><span class="params">(Block* block)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">split_block</span><span class="params">(Block* block)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">allocate_memory</span><span class="params">(PCB* pcb)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_blocks</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free_memory</span><span class="params">(<span class="type">int</span> pid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_empty_queue</span><span class="params">(PCBQueue *Q)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(PCBQueue* Q, PCB* pcb)</span>;</span><br><span class="line">PCB* <span class="title function_">dequeue</span><span class="params">(PCBQueue* Q)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_a</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_b</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_memory</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_queue</span><span class="params">(PCBQueue* Q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="buddy_system-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2f.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Block *freeList = <span class="literal">NULL</span>;</span><br><span class="line">PCBQueue *pcbQueue = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> global_block_id = <span class="number">1</span>; <span class="comment">// 全局id计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建一个内存块，确定内存块的：</span></span><br><span class="line"><span class="comment">    1.id 根据全局id计数器分配得到一个唯一id</span></span><br><span class="line"><span class="comment">    2.sizeK 由划分的父内存块大小右移一位得到</span></span><br><span class="line"><span class="comment">    3.startAddr 由父内存块的地址加上sizeK得到</span></span><br><span class="line"><span class="comment">    4.status 刚创建时默认为空闲，即true</span></span><br><span class="line"><span class="comment">    5.pid 初始时默认为空闲，即-1</span></span><br><span class="line"><span class="comment">    6.prev 指向前一块内存块</span></span><br><span class="line"><span class="comment">    7.next 指向后一块内存块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Block* <span class="title function_">create_block</span><span class="params">(<span class="type">int</span> sizeK, <span class="type">int</span> startAddr, <span class="type">bool</span> status, <span class="type">int</span> pid)</span>&#123;</span><br><span class="line">    Block* new_block = (Block*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Block));</span><br><span class="line">    new_block-&gt;id = global_block_id++;</span><br><span class="line">    new_block-&gt;sizeK = sizeK;</span><br><span class="line">    new_block-&gt;startAddr = startAddr;</span><br><span class="line">    new_block-&gt;status = status;</span><br><span class="line">    new_block-&gt;pid = pid;</span><br><span class="line">    new_block-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    new_block-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个进程，确定进程的：</span></span><br><span class="line"><span class="comment">    1.pid 进程的序号</span></span><br><span class="line"><span class="comment">    2.neededMem 进程所需要的内存空间大小</span></span><br><span class="line"><span class="comment">    3.status 进程的状态，刚创建时默认未分配内存，即-1</span></span><br><span class="line"><span class="comment">    4.blockID 表示进程占用的内存块序号，初始化为未占用，即-1</span></span><br><span class="line"><span class="comment">    5.next 指向下一个进程，初始化为NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCB* <span class="title function_">create_pcb</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> neededMem)</span>&#123;</span><br><span class="line">    PCB* new_pcb = (PCB*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    new_pcb-&gt;pid = pid;</span><br><span class="line">    new_pcb-&gt;neededMem = neededMem;</span><br><span class="line">    new_pcb-&gt;status = <span class="number">-1</span>;</span><br><span class="line">    new_pcb-&gt;blockID = <span class="number">-1</span>;</span><br><span class="line">    new_pcb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_pcb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建pcb队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCBQueue* <span class="title function_">create_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    PCBQueue* Q = (PCBQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCBQueue));</span><br><span class="line"></span><br><span class="line">    Q-&gt;front = Q-&gt;rear =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化内存块为一块大内存，容量为1024kb</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize_memory</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    freeList = create_block(MEMORY_SIZE, <span class="number">0</span>, <span class="literal">true</span>, <span class="number">-1</span>);</span><br><span class="line">    freeList-&gt;prev = freeList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">打印内存状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_memory_state</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;status) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;free block id: %d, size: 2^%d, startAddr: %d\n&quot;</span>,</span><br><span class="line">                   current-&gt;id,current-&gt;sizeK,current-&gt;startAddr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;used block id: %d, size: 2^%d, startAddr: %d, pid: %d\n&quot;</span>,</span><br><span class="line">                   current-&gt;id,current-&gt;sizeK,current-&gt;startAddr,current-&gt;pid);</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">打印进程状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_pcb_queue</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    PCB* current = pcbQueue-&gt;front;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PCB Queue State:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (current)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;#%d neededMem:%d\n&quot;</span>,current-&gt;pid,current-&gt;neededMem);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">找到一个空闲的内存块，要求内存块的大小大于给定的sizeK</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Block* <span class="title function_">find_free_block</span><span class="params">(<span class="type">int</span> sizeK)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;sizeK &gt;= sizeK &amp;&amp; current-&gt;status) <span class="keyword">return</span> current;</span><br><span class="line">        <span class="keyword">else</span> current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定一个内存块，找到其对应的伙伴内存块。</span></span><br><span class="line"><span class="comment">由于伙伴块的划分是通过对原内存块的2次幂划分得到，即存在新startAddr = 原startAddr + half_sizeK</span></span><br><span class="line"><span class="comment">故可由原startAddr + half_sizeK来定位其伙伴块。</span></span><br><span class="line"><span class="comment">由于伙伴系统的特性，这个地址可以由位运算得到</span></span><br><span class="line"><span class="comment">即 伙伴startAddr = 当前块startAddr ^ (1 &lt;&lt; 当前块sizeK)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Block* <span class="title function_">find_buddy</span><span class="params">(Block* block)</span>&#123;</span><br><span class="line">    <span class="type">int</span> buddy_start = block-&gt;startAddr ^ (<span class="number">1</span> &lt;&lt; block-&gt;sizeK);</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;startAddr == buddy_start &amp;&amp; current-&gt;sizeK == block-&gt;sizeK) <span class="keyword">return</span> current;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">切分内存块，按照2的幂分配器对内存块进行划分</span></span><br><span class="line"><span class="comment">划分后的原内存块：</span></span><br><span class="line"><span class="comment">    1.id 原内存块的id不变</span></span><br><span class="line"><span class="comment">    2.sizeK 内存块大小需右移一位，即减半</span></span><br><span class="line"><span class="comment">    3.startAddr 父内存块的地址不变</span></span><br><span class="line"><span class="comment">    4.status 状态不变，由于被划分的内存块一定是空闲内存块所以一般为true</span></span><br><span class="line"><span class="comment">    5.pid pid不变，同上，一般为-1</span></span><br><span class="line"><span class="comment">    6.prev 不变</span></span><br><span class="line"><span class="comment">    7.next 指向被划分后的子内存块</span></span><br><span class="line"><span class="comment">划分后的新内存块：</span></span><br><span class="line"><span class="comment">    1.id 由原内存块的id+1得到</span></span><br><span class="line"><span class="comment">    2.sizeK 内存块大小右移一位，即减半</span></span><br><span class="line"><span class="comment">    3.startAddr 父内存块的地址+新的sizeK</span></span><br><span class="line"><span class="comment">    4.status 刚被创建属于空闲状态，故status为true</span></span><br><span class="line"><span class="comment">    5.pid 同上，一般为-1</span></span><br><span class="line"><span class="comment">    6.prev 指向被划分的原内存块</span></span><br><span class="line"><span class="comment">    7.next 只想原内存块的原next指向的对象</span></span><br><span class="line"><span class="comment">注意，如果原内存块的next对象存在，则也需要修改原next指向的对象的prev属性</span></span><br><span class="line"><span class="comment">使其指向新划分的内存块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">split_block</span><span class="params">(Block* block)</span>&#123;</span><br><span class="line">    Block* new_block;</span><br><span class="line">    <span class="type">int</span> half_sizeK = block-&gt;sizeK - <span class="number">1</span>;</span><br><span class="line">    new_block = create_block(half_sizeK,</span><br><span class="line">                             block-&gt;startAddr + (<span class="number">1</span> &lt;&lt; half_sizeK),</span><br><span class="line">                             <span class="literal">true</span>, <span class="number">-1</span>);</span><br><span class="line">    new_block-&gt;prev = block;</span><br><span class="line">    new_block-&gt;next = block-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (block-&gt;next)&#123;</span><br><span class="line">        block-&gt;next-&gt;prev = new_block;</span><br><span class="line">    &#125;</span><br><span class="line">    block-&gt;sizeK = half_sizeK;</span><br><span class="line">    block-&gt;next = new_block;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Split block id: %d, size: 2^%d, startAddr: %d\n&quot;</span>,</span><br><span class="line">           block-&gt;id,block-&gt;sizeK,block-&gt;startAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为给定的进程分配内存，遵循伙伴系统的规则：</span></span><br><span class="line"><span class="comment">    1. 首先找到一块合适的内存块，要求内存块的内存大小比进程要求的内存大小大即可</span></span><br><span class="line"><span class="comment">    2. 然后不断地对内存块进行划分，直到内存块的大小刚好大于等于进程所要求的内存大小</span></span><br><span class="line"><span class="comment">        即若继续对内存进行一次划分，内存大小将不符合进程所要求的内存大小，刚好处于临界区</span></span><br><span class="line"><span class="comment">    3. 将该内存块分配给进程</span></span><br><span class="line"><span class="comment">        对于内存块： 更改其status和pid</span></span><br><span class="line"><span class="comment">        对于进程： 更改其status和blockID</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">allocate_memory</span><span class="params">(PCB* pcb)</span>&#123;</span><br><span class="line">    Block* block = find_free_block(pcb-&gt;neededMem);</span><br><span class="line">    <span class="keyword">if</span> (block)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocate free memory block for process #%d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">        <span class="keyword">while</span>(block-&gt;sizeK - <span class="number">1</span> &gt;= pcb-&gt;neededMem)&#123;</span><br><span class="line">            split_block(block);</span><br><span class="line">        &#125;</span><br><span class="line">        block-&gt;status = <span class="literal">false</span>;</span><br><span class="line">        block-&gt;pid = pcb-&gt;pid;</span><br><span class="line">        pcb-&gt;status = <span class="number">1</span>;</span><br><span class="line">        pcb-&gt;blockID = block-&gt;id;</span><br><span class="line">        print_memory_state();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Cannot allocate a memory block for process %d\n&quot;</span>,pcb-&gt;pid);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">合并内存块，遵循伙伴系统的规则：</span></span><br><span class="line"><span class="comment">    1. 一个内存块被回收时，先找到其对应的伙伴块</span></span><br><span class="line"><span class="comment">    2. 然后探测其对应的伙伴情况是否空闲</span></span><br><span class="line"><span class="comment">    3. 如果伙伴空闲，则合并空闲伙伴向上递归</span></span><br><span class="line"><span class="comment">       如果伙伴不空闲，则停止合并，等待伙伴空闲</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_blocks</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        Block* buddy = find_buddy(current);</span><br><span class="line">        <span class="comment">// 确保伙伴存在、伙伴为空闲、当前块为空闲，方可进行合并</span></span><br><span class="line">        <span class="keyword">if</span> (!buddy || !buddy-&gt;status || !current-&gt;status)&#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Combine block id:%d and id:%d of size 2^%d\n&quot;</span>,</span><br><span class="line">               current-&gt;id,buddy-&gt;id,current-&gt;sizeK);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到的伙伴块是左伙伴块，则交换指针指向的对象，确保释放的一直是右伙伴块</span></span><br><span class="line">        <span class="keyword">if</span> (current-&gt;startAddr &gt; buddy-&gt;startAddr)&#123;</span><br><span class="line">            Block* temp = current;</span><br><span class="line">            current = buddy;</span><br><span class="line">            buddy = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current-&gt;sizeK++;</span><br><span class="line">        current-&gt;next = buddy-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (buddy-&gt;next) buddy-&gt;next-&gt;prev = current;</span><br><span class="line">        <span class="built_in">free</span>(buddy); <span class="comment">// 释放伙伴块</span></span><br><span class="line">        merge_blocks(); <span class="comment">// 递归，尝试向上合并</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 防止链表结构变化后指针失效，直接返回。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给定进程的pid，释放该进程及分配给它的内存块。</span></span><br><span class="line"><span class="comment">    对于进程：不变</span></span><br><span class="line"><span class="comment">    对于内存块：更改status、pid属性，并调用合并内存块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_memory</span><span class="params">(<span class="type">int</span> pid)</span>&#123;</span><br><span class="line">    Block* current = freeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;pid == pid)&#123;</span><br><span class="line">            current-&gt;status = <span class="literal">true</span>;</span><br><span class="line">            current-&gt;pid = <span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Recycle used memory block for process #%d of size 2^%d...\n&quot;</span>,</span><br><span class="line">                   pid,current-&gt;sizeK);</span><br><span class="line">            merge_blocks();</span><br><span class="line">            print_memory_state();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cannot find process %d\n&quot;</span>,pid);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断当前进程队列是否为空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_empty_queue</span><span class="params">(PCBQueue *Q)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;front==<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将进程加入进程队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(PCBQueue* Q, PCB* pcb)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear) Q-&gt;rear-&gt;next = pcb;</span><br><span class="line"></span><br><span class="line">    Q-&gt;rear = pcb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>) Q-&gt;front = Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将进程从队列中出队</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PCB* <span class="title function_">dequeue</span><span class="params">(PCBQueue* Q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty_queue(Q))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PCB Queue is Empty!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PCB* temp = Q-&gt;front;</span><br><span class="line">        Q-&gt;front = Q-&gt;front-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试函数a：</span></span><br><span class="line"><span class="comment">    1. 初始化内存</span></span><br><span class="line"><span class="comment">    2. 创建进程</span></span><br><span class="line"><span class="comment">    3. 分配进程内存</span></span><br><span class="line"><span class="comment">    4. 释放进程内存</span></span><br><span class="line"><span class="comment">    5. 销毁内存和进程</span></span><br><span class="line"><span class="comment">假设n=3,即有3个进程，第1个进程申请的内存大小为2^7,第2个进程申请的内存大小为2^4，第3个进程申请的内存大小为2^8；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_a</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    initialize_memory();</span><br><span class="line">    pcbQueue = create_pcb_queue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PCB *pcb1 = create_pcb(1, 7); // 2^7</span></span><br><span class="line">    <span class="comment">// PCB *pcb2 = create_pcb(2, 4); // 2^4</span></span><br><span class="line">    <span class="comment">// PCB *pcb3 = create_pcb(3, 8); // 2^8</span></span><br><span class="line">    enqueue(pcbQueue,create_pcb(<span class="number">1</span>, <span class="number">7</span>));</span><br><span class="line">    enqueue(pcbQueue,create_pcb(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    enqueue(pcbQueue,create_pcb(<span class="number">3</span>, <span class="number">8</span>));</span><br><span class="line">    print_pcb_queue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate_memory(pcb1);</span></span><br><span class="line">    <span class="comment">// allocate_memory(pcb2);</span></span><br><span class="line">    <span class="comment">// allocate_memory(pcb3);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!is_empty_queue(pcbQueue))&#123;</span><br><span class="line">        PCB* pcb = dequeue(pcbQueue);</span><br><span class="line">        allocate_memory(pcb);</span><br><span class="line">        <span class="built_in">free</span>(pcb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    free_memory(<span class="number">1</span>);</span><br><span class="line">    free_memory(<span class="number">2</span>);</span><br><span class="line">    free_memory(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    delete_memory();</span><br><span class="line">    delete_queue(pcbQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试函数b：</span></span><br><span class="line"><span class="comment">假设有n=8个进程，每个进程所申请的内存块大小为2^k，其中k为随机整数，在[3,8]间产生。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_case_b</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    initialize_memory();</span><br><span class="line">    pcbQueue = create_pcb_queue();</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> neededMem = rand() % <span class="number">6</span> + <span class="number">3</span>; <span class="comment">// [3,8]</span></span><br><span class="line">        enqueue(pcbQueue,create_pcb(i,neededMem));</span><br><span class="line">    &#125;</span><br><span class="line">    print_pcb_queue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!is_empty_queue(pcbQueue))&#123;</span><br><span class="line">        PCB* pcb = dequeue(pcbQueue);</span><br><span class="line">        allocate_memory(pcb);</span><br><span class="line">        <span class="built_in">free</span>(pcb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free_memory(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete_memory();</span><br><span class="line">    delete_queue(pcbQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除内存分配的空间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_memory</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    Block *temp = freeList;</span><br><span class="line">    freeList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除PCB进程队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_queue</span><span class="params">(PCBQueue* Q)</span>&#123;</span><br><span class="line">    PCB* temp;</span><br><span class="line">    <span class="keyword">while</span> (Q-&gt;front)&#123;</span><br><span class="line">        temp = Q-&gt;front;</span><br><span class="line">        Q-&gt;front = Q-&gt;front-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="buddy_system-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q2.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行test_case_a()即样例一</span></span><br><span class="line"><span class="comment">运行test_case_b()即样例二</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// test_case_a();</span></span><br><span class="line">    test_case_b();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>最终部分运行结果如下：</p><div class="tabs" id="buddy_system_result"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#buddy_system_result-1">内存分配</button></li><li class="tab"><button type="button" data-href="#buddy_system_result-2">内存回收</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="buddy_system_result-1"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241127103017596.png" alt="image-20241127103017596" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="buddy_system_result-2"><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241127103038317.png" alt="image-20241127103038317" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="q3-2"><a class="markdownIt-Anchor" href="#q3-2"></a> Q3</h3><blockquote><p><strong>设计任务：</strong></p><p>假设系统中有1个进程，其大小总共有n=10页，而操作系统仅分配了m=3个页面的物理内存空间供其运行。用随机函数随机产生包含有k=20个页面的访问序列。具体要完成的设计任务为：编程实现LRU页面置换算法，为该进程做页面置换，计算缺页率。</p><p><strong>要求：</strong></p><ol><li>输出每处理页面访问序列中的1个页面请求时，操作系统分配给该进程的m=3个页面空间的被占用情况；</li><li>最后输出命中次数，缺页次数，以及缺页率。</li></ol><p><strong>需要使用到的数据结构：</strong></p><ol><li><p>保存页面访问序列的一维数组：<code>Sequence[MaxSequenceLen]</code>, <code>MaxSequenceLen</code>是页面访问序列长度</p></li><li><p>记录页面访问时间的一维数组：<code>PageAccessTime[MaxNumOfPages]</code>, <code>MaxNumOfPages</code>是最大页面数</p></li><li><p>系统分配给进程的页面一维数组<code>PageArray[NumAllocatedPages]</code>, <code>NumAllocatedPages</code>是OS分配给进程的最大页面数；当发生缺页时，需要从PageArray中选出一页进行置换</p></li></ol></blockquote><p>LRU算法，即<strong>最近最少使用算法/Least-Recent-Used Algorithm</strong>。</p><p>在页面置换算法中，最优的策略是采用<strong>最优页面置换算法/Optimal page-replacement algorithm</strong>，简单来说就是：置换最长时间不会使用的页面。但是在实际运用中，想要预测一个进程将来会使用多久是不可能做到的事情。如果最优算法不可行，那么最优算法的近似或许成为可能。</p><p>如果我们使用过去作为不远将来的近似，那么可以选择置换最长时间没有使用的页，这种方法就是LRU置换。</p><h4 id="lru"><a class="markdownIt-Anchor" href="#lru"></a> LRU</h4><p>LRU算法有很多实现的方法，比如计数器法、堆栈法、额外引用位等。要用到题给的数据结构，本质上是计数器法。按照《操作系统概论》这本书给出的定义，这里将计数器法的详细表述引用如下：</p><div class="note info simple"><p>在最简单的情况下，为每个页表条目关联一个使用时间域，并为CPU添加一个逻辑时钟或计数器。每次内存引用都会递增时钟。每当进行页面引用时，时钟寄存器的内容会复制到相应页面的页表条目的使用时间域。这样，我们总是有每个页面的最后引用的“时间”。我们置换具有最小时间的页面。这种方案需要搜索页表以查找LRU页面，而且每次内存访问都要写到内存(到页表的使用时间域)。当页表更改时(由于CPU调度)，还必须保留时间。时钟溢出也要考虑。</p></div><p>在这里，我们用一个数组<code>PageAccessTime[MaxNumOfPages]</code>作为关联的时间域，用于记录每个页面最后被访问的时间戳。</p><p>我将LRU在编程中实现的思路归纳如下：</p><ol><li>维护一个全局变量<code>currentTime</code>，用于模拟时间。</li><li><code>Sequence[MaxSequenceLen]</code>存储随机生成的访问页面序列, <code>MaxSequenceLen</code>在本题中取20。</li><li><code>PageArray[NumAllocatedPages]</code>即工作集, <code>NumAllocatedPages</code>在本题中取3。初始化时每个元素均为-1。</li><li><code>PageAccessTime[MaxNumOfPages]</code>即记录每个页面被访问的时间, <code>MaxNumOfPages</code>在本题中取10。这个数据结构是LRU置换的核心部分，每次访问一个页面，就在该页面序号对应的元素记录其时间<code>currentTime</code>。</li><li>依次从<code>Sequence[MaxSequenceLen]</code>中读取页面序列填充进入<code>PageArray[NumAllocatedPages]</code>，并且在<code>PageAccessTime[MaxNumOfPages]</code>中维护页面被访问的时间戳。</li><li>关于<code>PageArray[NumAllocatedPages]</code>中被置换的逻辑，即LRU的实现，具体描述如下：<ul><li>首先按照顺序置换掉所有的-1值，因为-1代表空闲页面。</li><li>如果没有-1页面，代表所有的页面均已被分配。此时要添加新的页面，需要对已分配的页面进行检索，检查该页面是否已经在工作集中。</li><li>若在，则发生hit，说明OS无需从内存中调入新的页面，更新碰撞页面的使用时间，这将使其被置换的优先级降低。</li><li>若不在，意味着必须要置换出一个老页面，而置换顺序遵循LRU规则。即比较在<code>Sequence[MaxSequenceLen]</code>中页面在<code>PageArray[NumAllocatedPages]</code>中对应的值，访问时间越小的说明它过去被使用的时间越短，应该被优先置换。</li></ul></li></ol><p>也就是说，LRU算法的精髓在于发生<span class='p red'>“hit”</span>，也就是碰撞。发生碰撞后，OS无需从内存中调入页面进行读写操作，但是却需要更新碰撞页面的使用时间，这一操作使该页面更不容易被置换出去；倘若没有发生碰撞，此时LRU便退化为FIFO算法，只是简单的根据页面进入的顺序进行置换。</p><p>具体代码实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LRU</span><span class="params">(<span class="type">int</span> pageID)</span> &#123;</span><br><span class="line">    <span class="type">int</span> isHit = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> replacePointer = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> minTime = currentTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查页面是否已经在工作集中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageArray[i] == pageID) &#123;</span><br><span class="line">            isHit = <span class="number">1</span>;  <span class="comment">// 页面命中</span></span><br><span class="line">            PageAccessTime[pageID] = currentTime;  <span class="comment">// 更新访问时间</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isHit) &#123;</span><br><span class="line">        PageAccessTime[pageID] = currentTime;  <span class="comment">// 更新访问时间</span></span><br><span class="line">        <span class="keyword">return</span> isHit;  <span class="comment">// 如果是命中，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有命中，发生缺页错误，找到最久未使用的页面进行置换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageArray[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            PageArray[i] = pageID;  <span class="comment">// 直接填充空闲页面</span></span><br><span class="line">            PageAccessTime[pageID] = currentTime;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有页面已满，找到最久未使用的页面进行替换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageAccessTime[PageArray[i]] &lt; minTime) &#123;</span><br><span class="line">            minTime = PageAccessTime[PageArray[i]];</span><br><span class="line">            replacePointer = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行替换</span></span><br><span class="line">    PageArray[replacePointer] = pageID;</span><br><span class="line">    PageAccessTime[pageID] = currentTime;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="virtual-memory-page-replacement"><a class="markdownIt-Anchor" href="#virtual-memory-page-replacement"></a> Virtual memory page replacement</h4><p>最终实现完整版代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <div class="tabs" id="virtual_memory_page_replacement"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#virtual_memory_page_replacement-1">头文件q3.h</button></li><li class="tab"><button type="button" data-href="#virtual_memory_page_replacement-2">函数定义q3f.c</button></li><li class="tab active"><button type="button" data-href="#virtual_memory_page_replacement-3">主函数q3.c</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="virtual_memory_page_replacement-1"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">ifndef</span> Q3_H</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> Q3_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MaxSequenceLen 20 <span class="comment">// 随机生成的访问序列长度</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MaxNumOfPages 10 <span class="comment">// 进程所需要的最大页面数</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> NumAllocatedPages 3 <span class="comment">// OS给该进程分配的页面空间大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">generateSequence</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">allocatePages</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LRU</span><span class="params">(<span class="type">int</span> pageID)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_result</span><span class="params">(<span class="type">int</span> hit)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="virtual_memory_page_replacement-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q3.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Sequence[MaxSequenceLen] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> PageAccessTime[MaxNumOfPages] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> PageArray[NumAllocatedPages] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> currentTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    generateSequence();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++)&#123;</span><br><span class="line">        PageArray[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">产生随机的访问页面序列，初始化Sequence</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateSequence</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSequenceLen; i++)&#123;</span><br><span class="line">        Sequence[i] = rand() % MaxNumOfPages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始运行页面分配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">allocatePages</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> hit = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> isHit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    SeqID        Working Set\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSequenceLen; i++)&#123;</span><br><span class="line">        isHit = LRU(Sequence[i]);</span><br><span class="line">        currentTime++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%8d%12d%3d%3d&quot;</span>,</span><br><span class="line">               i + <span class="number">1</span>, PageArray[<span class="number">0</span>], PageArray[<span class="number">1</span>], PageArray[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isHit)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;    *hit*\n&quot;</span>);</span><br><span class="line">            hit++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print_result(hit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LRU算法：</span></span><br><span class="line"><span class="comment">    1. 首先按照顺序置换掉所有的-1值，因为-1代表空闲页面。</span></span><br><span class="line"><span class="comment">    2. 如果没有-1页面，代表所有的页面均已被分配。</span></span><br><span class="line"><span class="comment">       此时要添加新的页面，先检查该页面是否已经在工作集中：</span></span><br><span class="line"><span class="comment">        · 若在，则发生hit，说明OS无需从内存中调入新的页面，更新碰撞页面的使用时间，这将使其被置换的优先级降低</span></span><br><span class="line"><span class="comment">        · 若不在，意味着发生缺页错误。必须要置换出一个老页面，而置换顺序遵循LRU规则。</span></span><br><span class="line"><span class="comment">          即比较在Sequence[MaxSequenceLen]中页面在PageArray[NumAllocatedPages]中对应的值，</span></span><br><span class="line"><span class="comment">          访问时间越小的说明它过去被使用的时间越短，应该被优先置换</span></span><br><span class="line"><span class="comment">    3. 如果所有页面的使用时间相同，则按照FIFO的顺序对页面进行置换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LRU</span><span class="params">(<span class="type">int</span> pageID)</span> &#123;</span><br><span class="line">    <span class="type">int</span> isHit = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> replacePointer = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> minTime = currentTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查页面是否已经在工作集中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageArray[i] == pageID) &#123;</span><br><span class="line">            isHit = <span class="number">1</span>;  <span class="comment">// 页面命中</span></span><br><span class="line">            PageAccessTime[pageID] = currentTime;  <span class="comment">// 更新访问时间</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isHit) &#123;</span><br><span class="line">        PageAccessTime[pageID] = currentTime;  <span class="comment">// 更新访问时间</span></span><br><span class="line">        <span class="keyword">return</span> isHit;  <span class="comment">// 如果是命中，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有命中，发生缺页错误，找到最久未使用的页面进行置换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageArray[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            PageArray[i] = pageID;  <span class="comment">// 直接填充空闲页面</span></span><br><span class="line">            PageAccessTime[pageID] = currentTime;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有页面已满，找到最久未使用的页面进行替换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NumAllocatedPages; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PageAccessTime[PageArray[i]] &lt; minTime) &#123;</span><br><span class="line">            minTime = PageAccessTime[PageArray[i]];</span><br><span class="line">            replacePointer = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行替换</span></span><br><span class="line">    PageArray[replacePointer] = pageID;</span><br><span class="line">    PageAccessTime[pageID] = currentTime;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算并打印缺页率</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_result</span><span class="params">(<span class="type">int</span> hit)</span>&#123;</span><br><span class="line">    <span class="type">int</span> miss = MaxSequenceLen - hit;</span><br><span class="line">    <span class="type">double</span> rate = (<span class="type">double</span>)miss / (<span class="type">double</span>)(hit + miss);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hit = %d, Miss = %d\n&quot;</span>,hit,miss);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Page fault Rate = %d/%d = %lf\n&quot;</span>,miss,MaxSequenceLen,rate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="virtual_memory_page_replacement-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;q3.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    initialize();</span><br><span class="line">    allocatePages();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>最终部分运行结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241127103137171.png" alt="image-20241127103137171" style="zoom:67%;" /><p>堂堂完结！撒花~✿✿ヽ(°▽°)ノ✿</p><p>觉得有用的老铁在评论区扣个6❤️</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/64495434_p0.jpg" alt="64495434_p0" /></p>]]></content>
    
    
    <summary type="html">A document explaining the experimental code for the operating system, along with the debugging process and test inputs.</summary>
    
    
    
    <category term="课堂随笔" scheme="http://example.com/categories/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>番外：Go接口的设计哲学</title>
    <link href="http://example.com/posts/7a99acb03ff0/"/>
    <id>http://example.com/posts/7a99acb03ff0/</id>
    <published>2024-10-09T05:57:54.000Z</published>
    <updated>2024-10-09T05:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口的设计哲学"><a class="markdownIt-Anchor" href="#接口的设计哲学"></a> 接口的设计哲学</h1><p>Go 接口定义了一组方法，但并不实现这些方法。任何类型只要实现了接口中定义的所有方法，就可以被视为该接口的实现。Go 中没有显式的 “implements” 关键字，只要类型满足接口的要求，编译器自动认定它实现了该接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">    Speak() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code> 和 <code>Cat</code> 类型都实现了 <code>Animal</code> 接口，因为它们都实现了 <code>Speak()</code> 方法。</p><h2 id="为什么go会存在接口"><a class="markdownIt-Anchor" href="#为什么go会存在接口"></a> 为什么Go会存在接口？</h2><p>Go 语言中的接口是为了增强代码的<strong>灵活性</strong>和<strong>解耦性</strong>。</p><ul><li><p>减少耦合：接口提供了抽象层，使得代码更加灵活，允许不同的实现方式。比如上例中的 <code>Animal</code> 接口可以被不同的类型实现，客户端代码不需要知道具体的类型是什么。</p><blockquote><p>耦合（Coupling）在计算机科学中，特别是在软件工程领域，指的是不同模块、组件或系统之间相互依赖的程度。这种依赖可以表现为一个模块需要知道另一个模块的内部细节以便能够正常工作，或者是一个模块直接操作或调用另一个模块的功能。</p><p>耦合度是评价软件设计质量的一个重要指标：</p><ul><li>高耦合：意味着模块间相互关联紧密，一个模块的变化可能会引起其他模块的连锁反应，导致代码难以理解和修改，同时也会降低代码的可重用性和可维护性。</li><li>低耦合：则是理想的软件设计目标，它要求模块间的关系尽量简单和间接，每个模块尽可能独立地完成自己的功能，通过明确的接口进行交互，而不是依赖于其他模块的内部实现。低耦合的系统更易于测试、扩展和维护。</li></ul></blockquote></li><li><p>简化多态性：Go 舍弃了传统的继承机制，通过接口实现了多态性。不同的类型可以通过实现同一个接口，达到同一个目的。</p></li><li><p>注重组合而非继承：Go 强调通过组合（composition）而不是继承（inheritance）来构建程序。接口鼓励将功能分解为小的、独立的部分，而不是创建复杂的继承体系。</p><blockquote><p>组合优于继承。</p><p>我们有一只鸭子和一只鸡，他们工作得很好。</p><p>我们发现鸭子和鸡有很多重复的地方，他们都会飞，都有两只脚两个翅膀，都会唧唧或者嘎嘎叫。</p><p>于是我们抽象出鸟这个父类，鸭子和鸡都继承了鸟这个父类， 当我们想要在飞的时候额外做点什么，只需要修改鸟就好了，代码得到了缩减，维护起来看似方便了。</p><p>鸟工作得也很好。</p><p>我们业务不断扩展，企鹅出现了。 它不会飞，但是会游泳。</p><p>鸟的工作出了问题，于是我们把飞行这个功能被下沉到了会飞的鸟类，企鹅继承自一个不会飞的鸟类。</p><p>接下来橡皮鸭子出现了，人们对于它究竟是不是鸟有了争议。开始浪费时间大量的讨论什么是鸟，鸟该做些什么。</p><p>……</p><p>但我们的生活中没有鸟（请注意这句话），鸟是一个抽象， 我们生活中有鸡，有鸭。我们觉得他们有一些相同的地方，于是把拥有这些相同点的东西叫做鸟，但永远不知道下一个遇见的，能不能算鸟， 鸟的定义要不要修改。</p><p>这就是继承不适用的原因，让我们看看组合会怎么样。</p><p>我们找到了鸡和鸭的共同点， 会飞，两只脚，两个翅膀，会叫。 这些东西加上其他的特质『组合』成了鸡或鸭。 会飞这个能力就能提出来，使用在每一个需要飞行能力的地方。 当我遇到企鹅，就不用拿飞行来『组合』它。</p><p>飞行，不应该是鸡或鸭从父类继承的能力，而应该是『飞行能力』组合成了鸡鸭的一部分。</p></blockquote></li></ul><h2 id="设计概念"><a class="markdownIt-Anchor" href="#设计概念"></a> 设计概念</h2><p>Go 的设计哲学是 “简单就是美” 和 “清晰胜于复杂”。Go 的接口（interface）是 Go 语言中一个核心的概念，源自其设计哲学，特别是简洁性、组合性和类型系统的灵活性。</p><p>通过对比“面向接口编程”和“面向对象编程”可以更加清晰的总结出接口的特点。Go 的接口虽然有一些与面向对象编程（OOP）类似的特性，但它本质上与传统 OOP 有很大的不同。</p><p>两者虽然都能实现<strong>多态</strong>和<strong>抽象</strong>。但在OOP中，多态性是通过继承和虚方法实现的，而 Go 是通过接口实现类似的效果。不同的类型可以实现相同的接口，提供不同的行为；Go 的接口也能像 OOP 中的抽象类一样，提供了抽象层，隐藏具体实现。</p><p>与OOP相比，Go没有继承，且接口隐式实现；没有类的层级结构，且比OOP更加灵活。</p><ul><li>没有继承：Go 中没有类和继承的概念。传统 OOP 中通过继承共享行为，而 Go 更倾向于通过组合和接口来共享行为。Go 强调 “组合优于继承”。</li><li>接口是隐式的：在 OOP 中，类必须显式地声明实现某个接口（如 <code>implements</code> 关键字），而 Go 则通过隐式实现接口，大大减少了依赖和耦合。</li><li>接口的灵活性：由于 Go 的接口是隐式实现的，它更加灵活。你可以在任何时候给一个类型添加方法使其符合某个接口，而不需要修改原始类型或重新定义继承关系。</li><li>没有类的层级结构：OOP 中的类通常有层级结构，子类继承父类的行为，而在 Go 中，接口没有层级结构，类型通过实现接口的具体方法与接口关联。Go 倾向于&quot;平面化&quot;的设计，没有复杂的层级关系。</li></ul><table><thead><tr><th>特性</th><th>面向接口编程</th><th>面向对象编程</th></tr></thead><tbody><tr><td><strong>关注点</strong></td><td>行为抽象，关注方法签名（接口定义的方法）</td><td>数据和行为结合，关注类的继承和封装</td></tr><tr><td><strong>核心机制</strong></td><td>通过接口实现解耦合和多态性，通常依赖组合而不是继承</td><td>通过类继承来实现代码复用和多态性</td></tr><tr><td><strong>耦合性</strong></td><td>低耦合，模块之间通过接口通信，易于替换实现</td><td>较高耦合，类的层次结构带来依赖，修改某些类可能影响其子类</td></tr><tr><td><strong>实现灵活性</strong></td><td>高灵活性，通过组合和替换实现可扩展系统</td><td>中等灵活性，依赖类的继承体系和多态，层级关系带来复杂性</td></tr><tr><td><strong>方法重用</strong></td><td>通过实现同一接口的多个实现来重用逻辑</td><td>通过继承和方法覆盖来重用父类的逻辑</td></tr><tr><td><strong>典型应用场景</strong></td><td>通常用于依赖注入、模块化系统设计、可替换的行为逻辑</td><td>通常用于具有层次化结构的业务场景，需要复用和扩展对象的功能</td></tr><tr><td><strong>设计哲学</strong></td><td>强调功能分离，使用接口解耦系统</td><td>强调类的继承关系，使用对象封装和多态</td></tr></tbody></table><h2 id="运用举例"><a class="markdownIt-Anchor" href="#运用举例"></a> 运用举例</h2><blockquote><p>Q：假如一个数据结构实现了某接口，然后呢？我的意思是接口定义了一系列方法，数据类型实现了接口定义的方法，直接调用它的方法便是，接口的存在有什么用呢？是否有些多余了。</p></blockquote><p>接口的存在看起来像是额外的一层抽象，而实际用处似乎并不明显，特别是在你只想直接调用方法的时候。实际上，Go 的接口在某些场景中确实是为了应对特定的设计需求，让代码在灵活性和解耦性方面表现更好。可以从以下几个场景加深理解。</p><h3 id="面向抽象编程降低耦合"><a class="markdownIt-Anchor" href="#面向抽象编程降低耦合"></a> 面向抽象编程，降低耦合</h3><p>假设你编写了一个函数，它只依赖某个具体的数据结构，那么这个函数的用途非常局限，必须依赖该具体实现。如果将依赖改为接口，那么这个函数可以接受任何实现了该接口的类型，极大提升了复用性和灵活性。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessAnimal</span><span class="params">(a Animal)</span></span> &#123;</span><br><span class="line">    fmt.Println(a.Speak())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dog := Dog&#123;&#125;</span><br><span class="line">cat := Cat&#123;&#125;</span><br><span class="line">ProcessAnimal(dog) <span class="comment">// &quot;Woof!&quot;</span></span><br><span class="line">ProcessAnimal(cat) <span class="comment">// &quot;Meow!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>ProcessAnimal</code> 函数并不需要知道具体传入的类型是 <code>Dog</code> 还是 <code>Cat</code>，只要它们实现了 <code>Animal</code> 接口即可。这降低了耦合性，如果后续有新的类型如 <code>Bird</code> 实现了 <code>Animal</code> 接口，<code>ProcessAnimal</code> 函数可以不做任何修改直接处理 <code>Bird</code>。</p><h3 id="代码解耦和模块化"><a class="markdownIt-Anchor" href="#代码解耦和模块化"></a> 代码解耦和模块化</h3><p>接口可以将代码的依赖关系从具体实现中解耦。例如，在开发中，经常需要通过接口定义来编写可替换的模块。当系统需要更换某个模块的具体实现时，不需要改动依赖它的代码，只需要提供符合接口定义的新实现。</p><p>比如，你可能有一个数据存储模块，最开始是用内存存储数据，但后来你希望用数据库存储。通过接口，你可以轻松实现不同的存储方式。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Storage <span class="keyword">interface</span> &#123;</span><br><span class="line">    Save(data <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MemoryStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MemoryStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Saving to memory:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DatabaseStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DatabaseStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Saving to database:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreData</span><span class="params">(s Storage, data <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    s.Save(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memStore := MemoryStorage&#123;&#125;</span><br><span class="line">dbStore := DatabaseStorage&#123;&#125;</span><br><span class="line"></span><br><span class="line">StoreData(memStore, <span class="string">&quot;sample data&quot;</span>) <span class="comment">// &quot;Saving to memory: sample data&quot;</span></span><br><span class="line">StoreData(dbStore, <span class="string">&quot;sample data&quot;</span>)  <span class="comment">// &quot;Saving to database: sample data&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在不修改 <code>StoreData</code> 业务代码的前提下，存储方式可以灵活切换。这种解耦方式使得代码更加模块化，也更加易于维护和扩展。</p><h3 id="方便测试"><a class="markdownIt-Anchor" href="#方便测试"></a> 方便测试</h3><p>接口在测试中的作用尤为明显。通过接口，你可以轻松替换实现，编写 mock（模拟）对象来替代实际的实现，从而进行单元测试。这样你可以独立测试依赖了接口的业务逻辑，而不依赖实际的复杂实现。</p><p>比如在上一个例子中，你可以为 <code>Storage</code> 接口创建一个 mock 对象，用来测试依赖 <code>StoreData</code> 函数的代码，而不需要实际保存数据。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MockStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MockStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Mock saving data:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mockStore := MockStorage&#123;&#125;</span><br><span class="line">StoreData(mockStore, <span class="string">&quot;test data&quot;</span>) <span class="comment">// &quot;Mock saving data: test data&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过使用 <code>MockStorage</code>，你不需要真的去处理存储问题，而是能专注于测试业务逻辑。</p><h3 id="动态多态性"><a class="markdownIt-Anchor" href="#动态多态性"></a> 动态多态性</h3><p>Go 的接口提供了动态多态性，可以通过接口来处理不同类型的对象，而不需要知道它们的具体类型。这在某些场景下非常有用，例如处理不同类型的请求、消息或处理策略。</p><p>例如，定义一个空接口 <code>interface&#123;&#125;</code>，你可以使用它来处理任意类型的对象：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintValue</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintValue(<span class="number">42</span>)       <span class="comment">// 打印 42</span></span><br><span class="line">PrintValue(<span class="string">&quot;hello&quot;</span>)  <span class="comment">// 打印 hello</span></span><br><span class="line">PrintValue(<span class="literal">true</span>)     <span class="comment">// 打印 true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种基于接口的动态类型特性，使得代码可以处理更多种类的输入。一般会结合<code>switch</code>根据输入数据的数据类型来执行不同的操作。</p><h3 id="延迟实现的灵活性"><a class="markdownIt-Anchor" href="#延迟实现的灵活性"></a> 延迟实现的灵活性</h3><p>接口不仅仅是为了当前的实现考虑。它还允许程序设计者在将来的实现中扩展程序功能。例如，你可以设计好接口但暂时不去实现，或者根据用户需求在未来实现更多接口。</p><h2 id="为什么提倡面向接口编程"><a class="markdownIt-Anchor" href="#为什么提倡面向接口编程"></a> 为什么提倡面向接口编程？</h2><p>从初学C语言的面向过程编程，到C++、Python的面向对象编程，最后到Go的面向接口编程，可以看出这里面编程的思想是逐步递进的关系。为什么要提倡面向接口编程，原因在于面向对象编程出现了一些无法避免的缺陷。</p><p>先来谈谈为什么要面向接口编程吧。</p><h3 id="面向接口编程的好处"><a class="markdownIt-Anchor" href="#面向接口编程的好处"></a> 面向接口编程的好处</h3><p>正如前文所提到的，使用接口编程最明显的好处在于<strong>解耦</strong>。说穿了，也就是“方便维护和扩展”，因为“规范和实现分离”。对于平面化的组合接口编程来说，这是对层级化的继承对象编程得天独厚的优势。</p><p>但是实体类也未见得做不到这一点。我们完全可以让顶级实体类只提供空方法，而留待具体实现类提供实现的细节。但是，这么做会导致顶级实体类对子类的控制力减弱，因为顶级实体类无法规定方法的实现。用抽象类可以吗？一个只定义了抽象方法的抽象类在本质上和接口是没有区别的。</p><p>那么为什么要用接口而不使用抽象类编程呢？这就要涉及到面对对象编程无法避免的缺陷问题了。</p><h3 id="类继承的缺陷"><a class="markdownIt-Anchor" href="#类继承的缺陷"></a> 类继承的缺陷</h3><p>先行者们发现，类继承有一些无法避免的缺陷。</p><h4 id="父类的实现细节会影响子类的行为"><a class="markdownIt-Anchor" href="#父类的实现细节会影响子类的行为"></a> 父类的实现细节会影响子类的行为</h4><p>这句话看上去是理所当然的，但如果父类的实现导致子类出现了bug呢？</p><blockquote><p>要知道，封装可是面向对象最引以为傲的卖点之一，其一大目标就是：你不用管我的具体实现逻辑，只需要知道传入参数和返回值就行了。但这个目标却被面向对象的另一引以为傲的卖点——继承，打破了。</p></blockquote><p>导致子类出现bug的原因来自于类继承编程中重要却潜在冲突的两个要点：封装和继承。一般来说，封装隐藏了程序的具体实现细节，提供了一层新的抽象；继承则允许程序员在封装好的代码的基础上进行拓展，由于封装隐藏了具体的代码实现，所以程序员能够较为容易的上手共同开发。</p><p>但是，继承其实破坏了封装。<strong>封装</strong>的核心理念是隐藏类的实现细节，让使用者只需关心输入和输出，而不必了解内部的实现逻辑。然而，<strong>继承</strong>引入了问题，因为子类不仅依赖父类的接口（即方法的签名），还依赖父类的具体实现。这样一来，父类的实现细节变得对子类是透明的，这<strong>破坏了封装</strong>的初衷。</p><p>在设计良好的面向对象系统中，子类通常应该只依赖父类的接口（即公开方法），而不应该依赖父类的实现细节。可实际上，由于子类会继承并使用父类的方法，子类不可避免地依赖了父类的实现逻辑。这意味着，如果父类的实现发生改变（即使父类内部逻辑改变没有违反其方法的契约），子类的行为也可能随之发生变化，从而引发<strong>潜在的Bug</strong>。</p><p>这种问题在继承体系中非常常见，因为子类可能会<strong>无意中依赖</strong>父类的特定实现细节，而当这些细节发生变化时，子类的行为可能会变得不可预测。</p><h4 id="子类的实现可能会影响父类"><a class="markdownIt-Anchor" href="#子类的实现可能会影响父类"></a> 子类的实现可能会影响父类</h4><blockquote><p>如果说子类被父类影响还算情有可原的话，那么父类被子类影响实在是有点说不过去了。</p></blockquote><p>在 Java 等面向对象语言中，父类的构造器在执行时，可能会调用父类中定义的方法。然而，如果这些方法在子类中被覆盖，那么当父类构造器调用该方法时，实际上调用的是<strong>子类的实现</strong>。此时，<strong>子类的构造器尚未完全执行，子类的成员变量尚未被初始化</strong>，这会导致严重的错误。</p><p>这暴露了面向对象编程中的一个常见问题，即在<strong>父类的构造器中调用可被子类覆盖的方法</strong>可能导致意外的行为，特别是在父类构造期间子类的状态尚未完全初始化的情况下。这会引发一系列问题。</p><h3 id="怎么办"><a class="markdownIt-Anchor" href="#怎么办"></a> 怎么办？</h3><p>答案是使用接口编程。</p><blockquote><p>因为接口可以避免类继承的所有问题。</p><p>纵观类继承所引起的问题，都是由于其可被实例化造成的，而接口是不可被实例化的，所以其可以避免所有这些问题。由于其不能被实例化，所以不需要在其内部定义非static或非public的属性，进而导致定义非final的属性也是不恰当的（因为一个随时可被任何人随意修改的属性不符合面向对象的价值观）；由于其不能被实例化，所以也不需要定义方法的实现，进而导致类可以实现多个接口而不至于担心不同接口出现相同方法签名却有不同实现的冲突</p></blockquote><p>总结一下，<strong>就是类可以被实例化，而接口不会</strong>。从而避免了一系列因类继承引起的一切问题。</p><h2 id="接口的优劣"><a class="markdownIt-Anchor" href="#接口的优劣"></a> 接口的优劣</h2><p>在设计哲学这一章，我们小结一下接口的优缺点。</p><p>优点：</p><ul><li><strong>简洁和灵活</strong>：接口提供了简洁的多态性，避免了复杂的类层次结构。</li><li><strong>松耦合设计</strong>：通过接口，代码可以变得更加模块化，便于测试和扩展。</li><li><strong>隐式实现减少代码依赖</strong>：不需要显式声明类型实现了接口，代码更加灵活且不需要维护冗余的关系。</li></ul><p>缺点：</p><ul><li><strong>没有继承的代码复用</strong>：没有继承意味着 Go 缺少一种直接的代码复用机制。在某些情况下，继承可以减少重复代码的编写，而 Go 依赖组合来实现类似功能。</li><li><strong>灵活但不够强制</strong>：隐式实现虽然增加了灵活性，但缺乏 OOP 中的显式关系，有时可能使得代码的结构性和可读性稍弱。</li></ul><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://blog.csdn.net/qq_33240556/article/details/136147169">什么是耦合？_计算机中的耦合-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/511958588/answer/3137705299">(3 封私信) 为什么go和rust语言都舍弃了继承？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/jifengnan/article/details/85411115">为什么提倡面向接口编程_at father.(father. java:2)-CSDN博客</a></p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/d367a38091cb770dfa360d3dbf289740.png" alt="d367a38091cb770dfa360d3dbf289740" /></p>]]></content>
    
    
    <summary type="html">Go学习的番外篇！探讨Go中接口的设计理念。</summary>
    
    
    
    <category term="Go!Go!Go!" scheme="http://example.com/categories/Go-Go-Go/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>9月总结·2024</title>
    <link href="http://example.com/posts/186ad852eeaf/"/>
    <id>http://example.com/posts/186ad852eeaf/</id>
    <published>2024-09-30T11:25:12.000Z</published>
    <updated>2024-09-30T11:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9月总结2024"><a class="markdownIt-Anchor" href="#9月总结2024"></a> 9月总结·2024</h1><p>今年是在大学的第三年。</p><p>恍惚之间竟然大三了，而大一刚踏入校园大门的那一刻却仿佛还历历在目。不知不觉，我距离毕业离开校园的日子已经相较进入大学时更加接近了。你问我做好准备了吗？并不尽然。不过，谁又能总是以万全之态迈向未来呢？正因此时并不完美，现在的我，才格外完美吧。</p><p>浅浅的总结一下暑假+9月吧。</p><h2 id="暑假篇"><a class="markdownIt-Anchor" href="#暑假篇"></a> 暑假篇</h2><p>没错，暑假不出意料的摸了：）</p><p>7月沉迷老头环，8月爆肝黑神话，两个月暑假就这么奉献给两款3A了。该说不说，还是挺快乐的。不过倒也不是完全在打游戏，7月中旬参加了一个进入省级决赛的互联网+项目组，我的日常就是按照API文档实现几个前端接口，然后做好产品交付部分的PPT。没办法，再深层了我也接触不到。整个项目都是立于实验室的一个博士师兄上的，作为一个划水蹭奖的本科生，恐怕也就只能做这么多了。说是项目保底省铜，不过即使已经过了上一学年的综测评定这个奖仍然前途未卜。罢了罢了，就算在下一学年的吧。</p><p>8月下旬和朋友一起去打了羊城杯，许久不学web再打CTF还是相当吃力的，不过本着友谊第一比赛第二的原则还是坚持了下来。虽说技术没长进多少，但却接触到了一些难以明说的利益圈子。对此我也并不感到很吃惊，我早就预感到世界就是个巨大的草台班子。只能说，我并不后悔做出离开网安这个行业的决定，兴许以后会出于兴趣再去打打比赛，但这个圈子水太深，浅尝辄止即可。</p><p>虽然这个暑假没学多少技术，但总归还是挺开心的。倘若是明年的暑假，势必要辛苦许多吧。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><p>草草交代完暑假，就来聊聊9月份的事情吧。</p><h3 id="全国大学生数学建模竞赛"><a class="markdownIt-Anchor" href="#全国大学生数学建模竞赛"></a> 全国大学生数学建模竞赛</h3><p>没想到上个学期的校赛竟然出人意料的发挥不错，进入了推荐名单。于是乎，9月份就得正式参加国赛了。先说说比赛情况吧，应该是保三冲二了，固然说不上多好。不过我本来也缺乏对建模系统的学习，这个结果到也还说得上是情理之中，只是怕拖了两位数学专业朋友的后腿。这次比赛的队友人都很好，也愿意在我不懂的时候手把手教我思路和计算，我也实打实的感觉学到了点东西。比赛期间大家都很努力，尤其周末两天我全程泡在讨论室里，饭都是队友帮忙带的，字面意义上的在图书馆坐一天不动。That’s crazy huh，it never happens again.</p><p>总的来说，这应该是我参加的最后一次数模比赛了吧，感觉意外的还不错。</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><h3 id="程序员的自我修养"><a class="markdownIt-Anchor" href="#程序员的自我修养"></a> 程序员的自我修养</h3><p>一本好书，深入浅出的介绍了装载、链接与库的知识，对计算机编译这块的理解很透彻。不过我目前还只读了前两三章就暂时搁置了，因为它的内容有点太偏底层，和我目前在研究的网络开发相关性不大。</p><p>可以说是一本关于计组和操作系统的启蒙书籍，对新手程序员的帮助很大。不得不感慨计算机类的很多知识都是触类旁通的，先前学习Go的接口概念花了很长时间去理解，在阅读完这本书关于系统API的内容后感觉豁然开朗。虽然两者严格来说并不是同一概念，但设计的底层思想是相通的。同时这本书也简单谈到了死锁等操作系统层面上的知识，这又于我在Go中的并发编程相关联。总之，是一本值得一读的好书。如果你平时研究计算机底层，比如PWN，更是不容错过。</p><h3 id="操作系统概论"><a class="markdownIt-Anchor" href="#操作系统概论"></a> 操作系统概论</h3><p>操作系统课的代餐。学校还是一副死德行，精华的复习PPT藏着掖着，上课只管水课时。于是乎我就按照课程推荐的课本选了这本黑皮书来看，我觉得黑皮书的通病都是过于神神叨叨，和奉行极简主义的学校PPT反其道而行之。作为一本百科类的科普读物快速的过一遍最好，但也很难说真正学到了什么东西，大部分知识都是入脑即忘。缺乏系统的总结和归纳，很难把操作系统学好。</p><p>我想，对于这种专业课来说，真要学起来还得看期末周速通吧……</p><h3 id="go语言圣经"><a class="markdownIt-Anchor" href="#go语言圣经"></a> Go语言圣经</h3><p>虽然暑假没看多少，但是9月份还是立刻把这本书通了。不过也没有读完，我差不多把Go的接口和共享变量编程看了一遍，并且成功搓出了第一个网络编程——一个简陋的聊天室。不过后续关于Go自带的工具包和调试以及底层编程我暂时先把它们丢在了一边，反正一时半会也用不着。关于接口和基于共享变量的并发编程，不久之后会出一篇总结作为我对Go语言学习的休止符。接着计划再用Go做一个小小的项目，彻底为Go的学习画上一个句号（暂时）。</p><h3 id="go-web编程"><a class="markdownIt-Anchor" href="#go-web编程"></a> Go Web编程</h3><p>友人推荐的一本Go Web编程类书籍，只看了两章就暂且搁置了。只想吐槽Go的template模板太抽象了，看得我眉头大皱。</p><p>还是老老实实找个视频看吧</p><h3 id="霍乱时期的爱情"><a class="markdownIt-Anchor" href="#霍乱时期的爱情"></a> *霍乱时期的爱情</h3><p>很复杂，看完不知道该说什么好。夸张点说，把我对爱情的概念击得粉碎。</p><p>霍乱这本书，几乎把爱情的所有形式都一一穷举了一遍。你身边的，你能想到的，几乎都可以在书里找到原型。哪一种才是真正的爱情呢？答案是，这些都可以是爱情。两厢厮守是爱情，红杏出墙是爱情；执着等待是爱情，放荡滥交是爱情；举案齐眉是爱情，卑微讨好是爱情；恪守底线是爱情，打破原则是爱情；守寡服丧是爱情，放情纵欲是爱情；追求不懈终于抱得美人归是爱情，望眼欲穿最后屈服于现实还是爱情。可以预见的是，这些故事倘若进入主流文学中，必将激起堆叠如山的众怒和辱骂，并伴随着最为不堪入耳的诋毁。但大师就是大师，马尔克斯可根本不考虑这些。严肃文学最喜欢做的事情，就是把道德这块遮羞布扯得稀烂，直面背后的人性与现实。</p><h3 id="挪威的森林"><a class="markdownIt-Anchor" href="#挪威的森林"></a> *挪威的森林</h3><p>最喜欢的一本书之一，无论几遍都读不腻。</p><h3 id="络新妇之理"><a class="markdownIt-Anchor" href="#络新妇之理"></a> *络新妇之理</h3><p>友人推荐的新书，还没来得及细看。第一印象是谜语人，其次是名字好难记。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="软著"><a class="markdownIt-Anchor" href="#软著"></a> 软著</h3><p>蹉跎了两个月的任务，终归还得等到开学后来办。只想吐槽申办软著的流程之繁琐与麻烦，不比镇关西把猪肉切成臊子简单。要走代理吧，那边又狮子大开口要收1000代理费，而且接受十分团购不单做，不接受砍价，只好自己慢慢来。</p><p>如果能申请到能拿一个第一著作权，至于用处多大还有待考证。</p><h3 id="综测"><a class="markdownIt-Anchor" href="#综测"></a> 综测</h3><p>评的是上个学年的综测，算是对我的大二做一个小小的总结吧。光看排名的话，还是令人满意的，相较于去年又前进了一名，奖学金应该是稳了。不过细看的话，又免不了一番长吁短叹。我的绩点其实并不理想，甚至于说是炸裂的程度，但综测成绩却名列前茅，不得不让人遐想：假如我绩点能再高一点，岂不是稳拿国奖？不过可惜，如果永远只是如果，当不得真。换个角度来看，能一路逆袭到此，也是我当了一年牛马应得的奖励。有人说综测水分很大说明不了什么，综测不本来就是靠水的吗。既然大家都在水，水的高一点也不容易……不管怎么说，能继续拿奖学金就是对我过去一年的最好肯定，我也难得可以开心一会了。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>其实如果参考我过去的每月总结的话，可以看出来我这个月其实没干多少事，而我本人的看法也是一样。而我没干多少事的原因也很简单，因为：我也不知道我该干什么了。</p><p>回头看过去的两年，其实走了相当多的弯路，做了很多费力不讨好的事，错过了很多唾手可得的机会，和很多事情擦肩而过。兜兜转转，事到如今，我竟然也弄丢了该前进的方向。</p><p>迷茫，大概就是9月份的主旋律吧。</p><p>我提起书包踏入教学楼，魂不守舍的坐在座位上，既听不清老师在课堂上叽里咕噜何物，也不知道自己打开电脑该自学些什么东西。最后干脆一不做二不休，听不进去的课干脆不去上了。可坐在寝室和坐在教室也并不不同，点几个知乎刷几个视频，全然不知该做些什么好。看着朋友们钻研技术，做项目的做项目，打比赛的打比赛，我就像是洛夫克拉夫特笔下的异乡人，跟个无头苍蝇似的乱撞。</p><p>步入大四的学长们也找到了自己的路，有保研去华科的，有收到字节offer的，而我根本没有信心与勇气敢于他们并列。两相煎熬之下，使得我愈加郁闷。</p><p>事情的转折来自于另一位朋友。</p><p>彼时他刚刚建立起自己的博客，兴致勃勃的给博客搭载美化，上传笔记，并积极的招揽学弟学妹们前来参观学习。一股本能的冲动涌上心头，我也想要和别人宣传自己的博客。但这个想法刚刚露头就被我否决了，我，没有自信。其实在博客写了那么多字，我却有些不敢再轻易点开它，我害怕在颓废的当下，会瞥见那个过去意气风发的自己，那个兴致勃勃的给博客搭载美化，上传笔记，想方设法引人参观自己博客的自己。那时的我是多么快乐啊，一瞬间我就明白了人们为何如此热衷于怀旧的原因：无非是过去的自己曾经拥有无限可能，而如今生活却只剩下一地鸡毛而已。</p><p>不过，我终究也还是开始动起来了。</p><p>不管是出于幼稚的好强心也好，还是潜移默化的夫唱妇随也罢，我也决定给自己的博客加点美化。结果是一发不可收拾，只要动起来，我好似又有了无穷多的精力，仿佛找回了某种决心，心中快速给自己规划出了图画。</p><p>“曾经我如此衰老，如今我才风华正茂”，黑神话悟空的制作人冯骥在接受采访时如是说。黑神话的开发用了八年，而我却在短短一个月的时间内体会到了这句话的精髓。虽然我仍然无法排遣对未来的忧愁，但我如今，当下，眼前，只想要动起来，别无他想。</p><p>进入大三后，我要退出那些繁琐的比赛，还给自己一个清静的大学生活。船会在河流的带动下往前航行，而人应该要自己动起来向前走而非依靠于某些外物推动。从今往后，我的每月总结上出现的事情应该会越来越少，但这说明不了什么。贪多嚼不烂，自己有所收获才是真的。哪怕下学期拿不到奖学金也罢，是时候看长远一些了。</p><p>作为启动的时间来说，一个月可能有些长了。不过只要计算机还能继续运行，多重启几次又何妨？感谢我的朋友们，没有他们我也许还会继续消沉下去吧。船到桥头自然直，好死不如赖活着，不如莫问前程，且听风吟。</p><p>最后说一句，我英语六级第一次就过了。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/26424396_p0.jpg" alt="26424396_p0" /></p>]]></content>
    
    
    <summary type="html">9月份的个人总结</summary>
    
    
    
    <category term="月度总结" scheme="http://example.com/categories/%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成指北（七）</title>
    <link href="http://example.com/posts/1c2342ee510b/"/>
    <id>http://example.com/posts/1c2342ee510b/</id>
    <published>2024-09-27T03:43:26.000Z</published>
    <updated>2024-09-27T03:43:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第十章-控制单元的设计"><a class="markdownIt-Anchor" href="#第十章-控制单元的设计"></a> 第十章 控制单元的设计</h2><blockquote><p>就是一道大题<br />最关键的微程序设计指令<br />画出微指令码点</p></blockquote><p>学习完控制单元的结构后，我们来学习控制单元的两种设计方法：</p><ul><li>组合逻辑设计</li><li>微程序设计</li></ul><p>这也是计算机组成原理的最后一个组成部分。</p><h3 id="组合逻辑设计"><a class="markdownIt-Anchor" href="#组合逻辑设计"></a> 组合逻辑设计</h3><h4 id="cu外特性"><a class="markdownIt-Anchor" href="#cu外特性"></a> CU外特性</h4><p>要理解组合逻辑设计的方式，我们先给出CU的外特性图并且一一说明。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706141431460.png" alt="image-20240706141431460" style="zoom:50%;" /><p>其中，CU发出的<strong>控制信号的先后关系与时间点的确定</strong>，由节拍发生器确定。如果你忘记了节拍的概念，去复习第九章的多级时序系统，或者参考下图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706141948426.png" alt="image-20240706141948426" style="zoom:33%;" /><p>而CU<strong>产生什么控制命令</strong>，依赖于：</p><ol><li>操作码译码输出，一条指令，对应仅有一条线有效。也就是图中的操作码译码部分，n位操作码对应2<sup>n</sup>条指令，所有译码器输出2<sup>n</sup>根线到CU。</li><li>标志，如跳转条件等也可以控制CU输出什么样的微指令</li></ol><p>在一个节拍内，C<sub>0</sub>到C<sub>k</sub>会有一个或几个有效，即产生的微指令。</p><h4 id="微操作的节拍安排"><a class="markdownIt-Anchor" href="#微操作的节拍安排"></a> 微操作的节拍安排</h4><p>回顾了CU外特性后，我们来讨论各种微操作如何进行安排。</p><p>假设我们采取同步控制的方式，且认为一个机器周期内含3个节拍，CPU的内部采取非总线方式设计。微操作按照执行的顺序安排在给定的节拍中，控制计算机的各个组成部分稳定协调的工作。一个时钟周期有多少个节拍，跟周期中需要产生控制信号的数量，复杂程度，控制信号之间是否能并行都有关</p><p>在安排微操作时序时，我们要遵循三个原则：</p><ol><li>微操作的<strong>先后顺序</strong>不得随意更改</li><li><strong>被控对象不同</strong>的微操作尽量安排在一个节拍内完成，即<strong>可以并行</strong>的微操作，没有先后顺序的操作</li><li><strong>占用时间较短</strong>的微操作尽量安排在一个节拍内完成，并<strong>允许有先后顺序</strong>，比如一个在上升沿，一个在下降沿</li></ol><p>基于以上三大原则，我们来重新回顾取指周期、间址周期、执行周期、中断周期的节拍安排。</p><h5 id="取值周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#取值周期微操作的节拍安排"></a> 取值周期微操作的节拍安排</h5><ol><li><p>T<sub>0</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>基于原则二，取指地址送入MAR和控制寄存器发出读信号可以并行。</p></li><li><p>T<sub>1</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>基于原则二，将数据从内存取回和递增PC可以并行</p></li><li><p>T<sub>2</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>I</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow IR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow ID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p>基于原则三，由于MDR将指令送入IR是在CPU内部传输，故耗时短，和指令译码安排在同一节拍</p></li></ol><h5 id="间址周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#间址周期微操作的节拍安排"></a> 间址周期微操作的节拍安排</h5><ol><li><p>T0</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T2</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T3</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow Ad(IR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p></li></ol><h5 id="执行周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#执行周期微操作的节拍安排"></a> 执行周期微操作的节拍安排</h5><p>我们来分析执行周期中介绍的十条微指令的节拍安排，他们中的大部分都十分简单，只消一条微指令足矣。故这里直接给出总结性的表格。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">指令</th><th style="text-align:center">T0</th><th style="text-align:center">T1</th><th style="text-align:center">T2</th></tr></thead><tbody><tr><td style="text-align:center">①</td><td style="text-align:center">CLA</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0 ⟶ AC</td></tr><tr><td style="text-align:center">②</td><td style="text-align:center">COM</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">AC ⟶ AC</td></tr><tr><td style="text-align:center">③</td><td style="text-align:center">SHR</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">L(AC) ⟶ R(AC)<br>AC ⟶ AC</td></tr><tr><td style="text-align:center">④</td><td style="text-align:center">CSL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">R(AC) ⟶ L(AC)<br>AC ⟶ AC</td></tr><tr><td style="text-align:center">⑤</td><td style="text-align:center">STP</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0 ⟶ G</td></tr><tr><td style="text-align:center">⑥</td><td style="text-align:center">ADD X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ R</td><td style="text-align:center">M(MAR) ⟶ MDR</td><td style="text-align:center">(AC) + (MDR) ⟶ AC</td></tr><tr><td style="text-align:center">⑦</td><td style="text-align:center">STA X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ W</td><td style="text-align:center">AC ⟶ MDR</td><td style="text-align:center">MDR ⟶ M(MAR)</td></tr><tr><td style="text-align:center">⑧</td><td style="text-align:center">LDA X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ R</td><td style="text-align:center">M(MAR) ⟶ MDR</td><td style="text-align:center">MDR ⟶ AC</td></tr><tr><td style="text-align:center">⑨</td><td style="text-align:center">JMP X</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Ad(IR) ⟶ PC</td></tr><tr><td style="text-align:center">⑩</td><td style="text-align:center">BAN X</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">A₀·Ad(IR) + A₀·PC ⟶ PC</td></tr></tbody></table><p>CLA等这些简单指令不一定要放在T<sub>2</sub>中，T<sub>0</sub>~T<sub>2</sub>均可。</p><h5 id="中断周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#中断周期微操作的节拍安排"></a> 中断周期微操作的节拍安排</h5><p>我们来回忆一下中断周期的三个操作：</p><ol><li>保存断点</li><li>形成中断服务程序入口地址，假设用硬件向量法实现</li><li>关中断，即中断允许触发器置0</li></ol><p>基于以上步骤，我们来安排中断周期的微指令节拍。</p><ol><li><p>T<sub>0</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">0\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>硬件关中断</p></li><li><p>T<sub>2</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T<sub>3</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>向量地址</mtext><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">向量地址\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>中断隐指令完成</p></li></ol><h4 id="组合逻辑设计步骤"><a class="markdownIt-Anchor" href="#组合逻辑设计步骤"></a> 组合逻辑设计步骤</h4><p>“非常简单”，只要用逻辑表达式写出任何一个控制信号产生的条件，再进行硬件实现就可以了。</p><p>所以我们首先需要列出操作时间表，把所有可能的微操作列在微操作命令信号列表里。</p><h5 id="列出操作时间表"><a class="markdownIt-Anchor" href="#列出操作时间表"></a> 列出操作时间表</h5><p>列出组合程序逻辑表格如下</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E7%BB%84%E5%90%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%A1%A82.drawio.svg" alt="组合程序设计表2.drawio" /></p><h5 id="写出微操作命令的最简表达式"><a class="markdownIt-Anchor" href="#写出微操作命令的最简表达式"></a> 写出微操作命令的最简表达式</h5><p>根据表格，结合数字逻辑的知识，很容易写出并化简微操作指令对应的最简表达式。</p><p>比如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mrow><mi mathvariant="normal">F</mi><mi mathvariant="normal">E</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo>+</mo><mrow><mi mathvariant="normal">I</mi><mi mathvariant="normal">N</mi><mi mathvariant="normal">D</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">S</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">J</mi><mi mathvariant="normal">M</mi><mi mathvariant="normal">P</mi></mrow><mo>+</mo><mrow><mi mathvariant="bold">B</mi><mi mathvariant="bold">A</mi><mi mathvariant="bold">N</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><mrow><mi mathvariant="normal">E</mi><mi mathvariant="normal">X</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">{</mo><mrow><mi mathvariant="normal">F</mi><mi mathvariant="normal">E</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">I</mi><mi mathvariant="normal">N</mi><mi mathvariant="normal">D</mi></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">S</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">J</mi><mi mathvariant="normal">M</mi><mi mathvariant="normal">P</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">B</mi><mi mathvariant="normal">A</mi><mi mathvariant="normal">N</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><mrow><mi mathvariant="bold">E</mi><mi mathvariant="bold">X</mi></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="bold">L</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">A</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}=\mathrm{FE} \cdot T_{1}+\mathrm{IND} \cdot T_{1}(\mathbf{A D D}+\mathrm{STA}+\mathrm{LDA}+\mathrm{JMP}+\mathbf{B A N}) \\+\mathrm{EX} \cdot T_{1}(\mathbf{A D D}+\mathrm{LDA}) \\=T_{1}\{\mathrm{FE}+\mathrm{IND}(\mathbf{A D D}+\mathrm{STA}+\mathrm{LDA}+\mathrm{JMP}+\mathrm{BAN}) \\+\mathbf{E X}(\mathbf{A D D}+\mathbf{L D A})\} \\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathrm">F</span><span class="mord mathrm">E</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="mord mathrm">N</span><span class="mord mathrm">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">S</span><span class="mord mathrm">T</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">J</span><span class="mord mathrm">M</span><span class="mord mathrm">P</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathbf">B</span><span class="mord mathbf">A</span><span class="mord mathbf">N</span></span><span class="mclose">)</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathrm">E</span><span class="mord mathrm">X</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord"><span class="mord mathrm">F</span><span class="mord mathrm">E</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="mord mathrm">N</span><span class="mord mathrm">D</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">S</span><span class="mord mathrm">T</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">J</span><span class="mord mathrm">M</span><span class="mord mathrm">P</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">B</span><span class="mord mathrm">A</span><span class="mord mathrm">N</span></span><span class="mclose">)</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathbf">E</span><span class="mord mathbf">X</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathbf">L</span><span class="mord mathbf">D</span><span class="mord mathbf">A</span></span><span class="mclose">)</span><span class="mclose">}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><h5 id="画出逻辑图"><a class="markdownIt-Anchor" href="#画出逻辑图"></a> 画出逻辑图</h5><p>根据最简表达式，就可以做出对应的硬件连接图。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706160526603.png" alt="image-20240706160526603" /></p><h5 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h5><p>组合逻辑设计，这种方法即首先列出操作指令表，然后对指令对应的最简表达式，最后根据表达式作图。</p><p>这种方法有以下三个特点：</p><ul><li>思路清晰，简单明了，任何一个控制信号都可以写出逻辑表达式</li><li>庞杂，调试困难，修改困难（因为都是硬件电路）</li><li>速度快，RISV精简指令集即采用这种设计方法；CPU支持整型运算和浮点运算，其中整型运算也采用组合逻辑CU</li></ul><h3 id="微程序设计"><a class="markdownIt-Anchor" href="#微程序设计"></a> 微程序设计</h3><p>微程序设计的方法是由1951年英国剑桥大学教授Wilkes提出的，这种方法非常适合指令扩展。</p><p>我们知道，不同节拍下发出的控制命令是有先后顺序的，控制命令实际上就是一个或者几个电信号，由这些电信号去控制部件执行相应的操作。</p><p>微程序设计的思想就是把这些电信号储存起来，存储器存储的0或1数据，代表一个节拍下组成控制命令的高低电平信号，我们可以利用这些高低电平信号来表示一个节拍中我们要发出的控制命令。所以我们把微指令保存在ROM中，执行时一条一条读出，微指令的先后顺序就是微操作执行的先后顺序，根据每条微指令有效信号的个数和位数发出相应的微操作命令。</p><p>因此，微程序设计又称<strong>存储逻辑方式</strong>，即把逻辑信号存储在存储器中。</p><p>可以参照下图理解：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706163101937.png" alt="image-20240706163101937" style="zoom:50%;" /><p>一个指令周期包含多个机器周期，一条机器指令对应一个微程序，微程序对应的是一系列微指令，一条微指令又对应一系列的微操作命令。</p><h4 id="微程序控制单元基本框图"><a class="markdownIt-Anchor" href="#微程序控制单元基本框图"></a> 微程序控制单元基本框图</h4><p>以下是微程序控制单元设计的基本框图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706163801863.png" alt="image-20240706163801863" style="zoom:50%;" /><ul><li>核心是控制存储器，保存微指令。执行时要知道微指令的地址，地址保存在控制存储器地址寄存器（CMAR）中，读出的微指令放入CMDR。</li><li>每条指令执行阶段对应的微操作是不一样的，所以微程序首地址也是不一样的。</li><li>根据执行的指令，确定微程序在控制存储器中的首地址，所以还需要微地址形成部件。</li><li>顺序逻辑：CMAR中的地址有多个来源，用顺序逻辑选择一个正确的来源。</li><li>操作控制：一串0和1，其中1代表对应的微操作命令。</li><li>顺序控制：给出下一条微指令的地址</li></ul><p>整体操作类似于计算机访存，都有MAR（CMAR）和MDR（CMDR）寄存器。只不过控制存储器在CPU内部，所以访问速度会比一般的访存更快。</p><p>在控制存储器中，结构框图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706164304889.png" alt="image-20240706164304889" style="zoom:50%;" /><p>M+2的下地址不一定是M+3，如果直接进入执行周期，根据指令译码才能指导是什么指令，该执行哪里的微程序，需要依赖微地址形成部件得到下条微指令地址，所以M+2的下地址为XXX。</p><h4 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h4><p>我们通过执行以下指令来演示微程序设计的工作原理。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDA X</span><br><span class="line">ADD Y</span><br><span class="line">STA Y</span><br><span class="line">STP</span><br></pre></td></tr></table></figure><h5 id="取指阶段"><a class="markdownIt-Anchor" href="#取指阶段"></a> 取指阶段</h5><p>此阶段执行取指微程序</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">M+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">M+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>由于下地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi>X</mi><mi>X</mi></mrow><annotation encoding="application/x-tex">XXX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，表示下一条微指令的地址不能由下地址给出，而是要进入到间址阶段或执行阶段</p></li></ol><h5 id="执行阶段"><a class="markdownIt-Anchor" href="#执行阶段"></a> 执行阶段</h5><p>此阶段执行LDA微程序</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mtext>微地址形成部件</mtext><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mtext>（</mtext><mi>P</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mtext>）</mtext></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow 微地址形成部件\rightarrow CMAR  （P\rightarrow CMAR）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">微</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">件</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">（</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">）</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CMDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">P+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li></ol><h5 id="取指阶段-2"><a class="markdownIt-Anchor" href="#取指阶段-2"></a> 取指阶段</h5><p>继续执行取指微程序，得到下一条指令</p><p>……</p><h5 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h5><p>通过以上工作原理的实例，我们知道：全部的微指令都保存在CM中，程序执行过程中只需要读出指令。而这一系列操作关键在于：</p><ul><li>微指令的操作控制字段如何形成微操作命令</li><li>微指令的后续地址如何形成</li></ul><p>所以接下来我们来介绍微程序设计如何对微指令进行编码，以及如何形成后续地址。</p><h4 id="微指令的编码方式"><a class="markdownIt-Anchor" href="#微指令的编码方式"></a> 微指令的编码方式</h4><h5 id="直接编码方式"><a class="markdownIt-Anchor" href="#直接编码方式"></a> 直接编码方式</h5><p>即在微指令的操作控制字段中，每一位代表一个微操作命令，某位为“1”代表该控制信号有效。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706171522749.png" alt="image-20240706171522749" style="zoom:50%;" /><p>这种方式特点在于：</p><ul><li>速度最快，不需要译码，且设置多个位为“1”可以实现并行处理</li><li>由于每一位都要对应一条微指令，所以微指令需要有2<sup>n</sup>位（假设操作码有n位，对应的译码位数就有2<sup>n</sup>位）</li></ul><h5 id="字段直接编码方式"><a class="markdownIt-Anchor" href="#字段直接编码方式"></a> 字段直接编码方式</h5><p>将微指令的控制字段氛围若干个“段”，每段经过译码后发出控制信号。注意每个译码器一次只能有一个输出为1，因此分到一段中的微操作应当是互斥的。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706171918592.png" alt="image-20240706171918592" style="zoom:50%;" /><p>这种方式特点在于：</p><ul><li>显示编码</li><li>缩短了微指令字长，原来需要2<sup>n</sup>位，现在每段中仅需要n为即可，然后再通过译码解释为2<sup>n</sup>位</li><li>由于增加了译码时间，所以微程序执行速度较慢</li></ul><h5 id="字段间接编码方式"><a class="markdownIt-Anchor" href="#字段间接编码方式"></a> 字段间接编码方式</h5><p>即隐式编码，这种编码方式译码时还需要以来其他译码器的译码结果，所以是间接编码。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172325957.png" alt="image-20240706172325957" style="zoom:50%;" /><h5 id="混合编码"><a class="markdownIt-Anchor" href="#混合编码"></a> 混合编码</h5><p>即直接编码和字段编码（直接和间接）混合使用。对于常用的微指令，我们可以采取直接编码加快执行速度；对于不常用的微指令，我们可以用字段编码来减少微指令字长。</p><h4 id="微指令序列地址的形成"><a class="markdownIt-Anchor" href="#微指令序列地址的形成"></a> 微指令序列地址的形成</h4><p>有以下几种方法：</p><ol><li><p>微指令的下地址字段指出</p></li><li><p>根据机器指令的操作码形成</p></li><li><p>增量计数器</p><p>即通常情况下微指令的下地址指向的都是连续的下一条地址，此时只需要把CMDA中的地址+1，而无需将CMDR中的地址部分取回CMDA中</p></li><li><p>分支转移</p><p>即遇到跳转情况时</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172828439.png" alt="image-20240706172828439" style="zoom:50%;" /></li><li><p>通过测试网络</p><p>可以用于微程序在小范围内的跳转</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172904041.png" alt="image-20240706172904041" style="zoom:50%;" /></li><li><p>由硬件产生微程序入口地址</p><p>比如第一条微指令地址由专门硬件产生，告诉计算机去取指令</p><p>比如中断周期中由硬件产生的中断周期微程序的首地址</p></li></ol><p>经过以上介绍，我们可以把影响微程序序列地址形成的因素归纳如下图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706173047643.png" alt="image-20240706173047643" style="zoom:50%;" /><p>注意，分支逻辑产生的信号控制多路选择器，由于判断是否发生跳转，转移方式也要送入分支逻辑。</p><h4 id="微指令格式"><a class="markdownIt-Anchor" href="#微指令格式"></a> 微指令格式</h4><p>简答题来咯，注意辨析水平型微指令和垂直型微指令的异同。</p><ul><li><p>水平型微指令：即一次能定义并执行多个并行操作。</p><p>如直接编码、字段直接编码、字段间接编码、直接和字段混合编码</p></li><li><p>垂直型微指令：复杂的微操作，操作间有先后次序。</p><p>一次只能定义一个操作，类似机器指令操作码的方式，由微操作码字段规定微指令的功能</p></li></ul><p>两者的比较：</p><ul><li>水平型微指令比垂直型微指令并行操作能力强，灵活性强</li><li>水平型微指令执行一条机器指令所要的微指令数目少，速度快</li><li>水平型微指令用较短的微程序结构换取较长的微指令结构</li><li>水平型微指令与机器指令差别大</li></ul><table><thead><tr><th>特点</th><th>垂直型微指令 (Vertical Microinstruction)</th><th>水平型微指令 (Horizontal Microinstruction)</th></tr></thead><tbody><tr><td>指令长度</td><td>窄位指令，使用操作码编码控制信号</td><td>宽位指令，每位或每组位直接控制硬件信号</td></tr><tr><td>并行性</td><td>较低，通过解码器生成的控制信号较少</td><td>高，可以同时激活多个控制信号</td></tr><tr><td>灵活性</td><td>相对较低，通过解码器生成控制信号</td><td>高，可以更细粒度地控制硬件部件</td></tr><tr><td>实现复杂性</td><td>需要解码器来解释操作码，设计更为复杂</td><td>实现相对简单，直接控制信号</td></tr><tr><td>适用场景</td><td>适用于需要节省指令存储空间的场合</td><td>适用于需要高并行性的场合</td></tr></tbody></table><blockquote><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><h3 id="水平型微指令-horizontal-microinstruction"><a class="markdownIt-Anchor" href="#水平型微指令-horizontal-microinstruction"></a> 水平型微指令 (Horizontal Microinstruction)</h3><p>假设有以下控制信号：</p><ul><li>读取内存：Memory Read (MR)</li><li>写入内存：Memory Write (MW)</li><li>加载累加器：Load Accumulator (LA)</li><li>存储累加器：Store Accumulator (SA)</li></ul><p>示例微指令：</p><table><thead><tr><th>MR</th><th>MW</th><th>LA</th><th>SA</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>这条微指令表示同时进行“读取内存”和“加载累加器”的操作。</p><h3 id="垂直型微指令-vertical-microinstruction"><a class="markdownIt-Anchor" href="#垂直型微指令-vertical-microinstruction"></a> 垂直型微指令 (Vertical Microinstruction)</h3><p>假设有以下操作码和对应的控制信号：</p><ul><li>00: 读取内存 (MR)</li><li>01: 写入内存 (MW)</li><li>10: 加载累加器 (LA)</li><li>11: 存储累加器 (SA)</li></ul><p>示例微指令：10</p><p>这条微指令通过解码器生成控制信号“加载累加器”。</p></blockquote><h4 id="静态和动态微程序设计"><a class="markdownIt-Anchor" href="#静态和动态微程序设计"></a> 静态和动态微程序设计</h4><p>静态微程序设计，即微程序无须改变，直接存储在ROM中。</p><p>动态微程序设计，允许修改、扩展指令集，通过修改微程序的方式，在控制存储器中写入新的指令在执行阶段的微程序。一般为了保证兼容性，很少进行修改，而是直接扩展。</p><p>十分有利与指令仿真。增加或修改一条指令，看下改变之后的体系结构运行某类应用程序性能是否较大提升，生成下批处理器时，就可以改变指令集</p><p>一般采取EPROM。</p><h4 id="毫微程序设计"><a class="markdownIt-Anchor" href="#毫微程序设计"></a> 毫微程序设计</h4><p>毫微程序概念的理解可以参考微程序和机器指令的关系：</p><ul><li>微程序设计用微程序解释机器指令</li><li>毫微程序设计用毫微程序解释微程序</li></ul><p>当微指令比较复杂，并且这个操作内部的毫微操作也有一定的先后顺序时，就需要考虑毫微程序的设计。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706194837556.png" alt="image-20240706194837556" style="zoom:50%;" /><p>这里放出毫微程序的设计结构图进行参考，并不是重点，仅做了解。</p><p>可以看到，毫微程序设计和微程序设计之间类似套娃的关系，又是一层新的抽象。</p><h4 id="串行和并行微程序控制"><a class="markdownIt-Anchor" href="#串行和并行微程序控制"></a> 串行和并行微程序控制</h4><p>参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706195032652.png" alt="image-20240706195032652" style="zoom:50%;" /><p>可以通过流水的方式加快微指令执行效率。</p><h4 id="微程序设计举例"><a class="markdownIt-Anchor" href="#微程序设计举例"></a> 微程序设计举例</h4><p>最后的波纹了！</p><p>照例，我们需要先对指令的每个阶段进行微操作分析，然后再画出码点图。假设CPU结构和组合逻辑相同，且为非总线结构。</p><h5 id="写出对应机器指令的微操作及节拍安排"><a class="markdownIt-Anchor" href="#写出对应机器指令的微操作及节拍安排"></a> 写出对应机器指令的微操作及节拍安排</h5><p>这里只给出取值周期和执行周期中的节拍安排，整理列表如下：</p><p>取指周期：</p><table><thead><tr><th>时间周期</th><th>微操作</th></tr></thead><tbody><tr><td>T0</td><td>PC → MAR / 1 → R</td></tr><tr><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>T2</td><td>M(MAR) → MDR / (PC)+1 → PC</td></tr><tr><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>T4</td><td>MDR → IR / OP(IR) → 微地址形成部件</td></tr><tr><td>T5</td><td><font style="color:red">OP(IR) → 微地址形成部件 → CMAR</font></td></tr></tbody></table><p>执行周期：</p><p>执行阶段最后一条微指令的下地址应当是M，需要把下地址取出送入CMAR</p><table><thead><tr><th>指令</th><th>时间周期</th><th>微操作</th></tr></thead><tbody><tr><td>CLA</td><td>T0</td><td>0 → AC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>COM</td><td>T0</td><td>AC → AC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>SHR</td><td>T0</td><td>L(AC) → R(AC) / AC0 → AC0</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>CSL</td><td>T0</td><td>R(AC) → L(AC) / AC0 → ACn</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>STP</td><td>T0</td><td>0 → G</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>ADD</td><td>T0</td><td>Ad(IR) → MAR / 1 → R</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>M(MAR) → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>(AC) + (MDR) → AC</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>STA</td><td>T0</td><td>Ad(IR) → MAR / 1 → W</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>AC → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>MDR → M(MAR)</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>LDA</td><td>T0</td><td>Ad(IR) → MAR / 1 → R</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>M(MAR) → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>MDR → AC</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>JMP</td><td>T0</td><td>Ad(IR) → PC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>BAN</td><td>T0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">⋅</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>+</mo><mover accent="true"><msub><mi>A</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">A_0·Ad(IR)+\overline{A_0}·(PC)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr></tbody></table><p>上述共有20个微操作，38条微指令。</p><p>如果用水平型编码，直接编码，每一个微操作都需要操作控制字段中1位来表示。要在控制存储器内寻址，下地址字段长度和控制存储器大小相关，38条微指令需38个存储单元。</p><h5 id="确定微指令格式"><a class="markdownIt-Anchor" href="#确定微指令格式"></a> 确定微指令格式</h5><ul><li><p>假设微指令的编码方式：采取水平直接控制</p></li><li><p>后续微指令的地址形成方式：</p><p>由机器指令的操作码通过微地址形成部件形成</p><p>由微指令的下地址字段直接给出</p></li><li><p>微指令字长</p><p>由20个微操作，确定操作控制字段最少为20位</p><p>由38条微指令，确定微指令的下地址字段为6位</p><p>微指令字长可取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><mo>+</mo><mn>6</mn><mo>=</mo><mn>26</mn></mrow><annotation encoding="application/x-tex">20+6=26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>位</p></li><li><p>微指令字长的优化</p><p>38条微指令中有19条是关于后续微指令地址 → CMAR</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> 其中 </mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left right" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext> 条 </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> OP </mtext><mo stretchy="false">(</mo><mtext> IR </mtext><mo stretchy="false">)</mo><mo>⟶</mo><mtext> 微地址形成部件 </mtext><mo>⟶</mo><mtext> CMAR </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>18</mn><mtext> 条 </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> Ad ( CMDR </mtext><mo stretchy="false">)</mo><mo>⟶</mo><mtext> CMAR </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text { 其中 }\left\{\begin{array}{lr}1 \text { 条 } &amp; \text { OP }(\text { IR }) \longrightarrow \text { 微地址形成部件 } \longrightarrow \text { CMAR } \\18 \text { 条 } &amp; \text { Ad ( CMDR }) \longrightarrow \text { CMAR }\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">条</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">条</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> OP </span></span><span class="mopen">(</span><span class="mord text"><span class="mord"> IR </span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">微地址形成部件</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> CMAR </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> Ad ( CMDR </span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> CMAR </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>若用Ad(CMDR)直接送入控存地址线，即省略CMAR，则可以省略掉以上19条指令，2个微操作。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706203838160.png" alt="image-20240706203838160" style="zoom:50%;" /><p>此时微指令：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>38</mn><mo>−</mo><mn>19</mn><mo>=</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">38-19=19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span></span></span></span> 下地址字段最少5位</p><p>此时微操作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>18</mn></mrow><annotation encoding="application/x-tex">20-2=18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span></span></span></span> 操作控制字段最少18位</p><p>考虑留有一定的容量方便后续扩展，有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mtable rowspacing="0.15999999999999992em" columnalign="left right" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 取操作控制字段 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>18</mn><mtext> 位 </mtext><mo>→</mo><mn>24</mn><mtext> 位 </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 下地此字段 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mtext> 位一 </mtext><mn>6</mn><mtext> 位 </mtext></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><mtext> 共 </mtext><mn>30</mn><mtext> 位 </mtext></mrow><annotation encoding="application/x-tex">\left.\begin{array}{lr}\text { 取操作控制字段 } &amp; 18 \text { 位 } \rightarrow 24 \text { 位 } \\\text { 下地此字段 } &amp; 5 \text { 位一 } 6 \text { 位 }\end{array}\right\} \text { 共 } 30 \text { 位 }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">取操作控制字段</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">下地此字段</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位一</span><span class="mord"> </span></span><span class="mord">6</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">共</span><span class="mord"> </span></span><span class="mord">3</span><span class="mord">0</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span></span></p></li><li><p>定义微指令操作字段每一位的操作</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204036976.png" style="zoom:50%;" /></li></ul><h5 id="编写微指令码点"><a class="markdownIt-Anchor" href="#编写微指令码点"></a> 编写微指令码点</h5><p>规定每一位的操作如下（部分）：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204256674.png" alt="image-20240706204256674" /></p><p>画出码点图</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204429307.png" alt="image-20240706204429307" /></p><p>即根据划分的节拍和规定的操作标1，最后即可得到微指令对应的码点。</p><p>……</p><p>……</p><p>本博客的内容就到此结束了，希望能帮助你更深刻的理解计算机组成原理这门课程，该说不说还挺有意思的。</p><p>那么，完结撒花💮💮ヽ(°▽°)ノ💮</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/C10AD1752A521C3C297E7D81400952F1.jpg" alt="C10AD1752A521C3C297E7D81400952F1" /></p>]]></content>
    
    
    <summary type="html">计算机组成指北的第七部分&amp;完结篇！介绍了控制单元的设计原理与微指令编码方式，一般作为压轴题考察。</summary>
    
    
    
    <category term="计算机组成指北" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="控制单元设计" scheme="http://example.com/tags/%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="微指令编码方式" scheme="http://example.com/tags/%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成指北（六）</title>
    <link href="http://example.com/posts/4ddedbf342f8/"/>
    <id>http://example.com/posts/4ddedbf342f8/</id>
    <published>2024-09-27T03:43:17.000Z</published>
    <updated>2024-09-27T03:43:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第九章-控制单元的功能"><a class="markdownIt-Anchor" href="#第九章-控制单元的功能"></a> 第九章 控制单元的功能</h2><blockquote><p>掌握多级时序的概念，时钟周期，节拍</p><p>相对简单，要对CU的运行有一个基本的轮廓</p></blockquote><p>到现在为止，我们已经介绍完了CPU的ALU、寄存器（存储器）、中断系统，只差CU模块还没有介绍。这一章我们就来介绍CPU的最后一个组成部分：CU控制单元。</p><p>控制单位的主要功能之一就是完成指令的解释。我们以CU分析和执行指令的过程为例，说明控制单元要完成哪些功能。</p><h3 id="微操作命令的分析"><a class="markdownIt-Anchor" href="#微操作命令的分析"></a> 微操作命令的分析</h3><p>微操作，即在指令执行过程中，由CU发出的指令，比整条操作指令小的多。我们现在分别从指令执行的不同阶段，来学习CU在此期间的作用。</p><p>在介绍指令系统时我们知道，完成一条指令分4个工作周期<strong>取指周期、间址周期、执行周期和中断周期</strong>。我们就按照这四个周期，来一一分析CU的功能。</p><h4 id="取指周期"><a class="markdownIt-Anchor" href="#取指周期"></a> 取指周期</h4><p>取指周期的过程可以归纳为以下几个微操作：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo>→</mo><mtext>地址线</mtext></mrow><annotation encoding="application/x-tex">PC\rightarrow MAR\rightarrow 地址线</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">线</span></span></span></span></p><p>PC将指令地址送入地址寄存器MAR，通过地址总线发出</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>这里的R指的是控制寄存器，由控制寄存器传输信号给控制总线向主存发送读命令</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将MAR所指的主存单元中的内容经过数据总线读入MDR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>I</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow IR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>MDR将内容送至指令寄存器IR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow CU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></p><p>CU对指令的操作码进行译码</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>PC形成下一条指令的地址。注意，只有且必须在取指周期递增一次PC。如果学过8086汇编语言，你就会知道CPU执行指令的过程是先将指令读入指令寄存器，然后递增IP指向下一条指令。那么递增这个操作，实际上就是在取指周期内完成的。</p></li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620193217182.png" alt="image-20240620193217182" style="zoom:50%;" /><h4 id="间址周期"><a class="markdownIt-Anchor" href="#间址周期"></a> 间址周期</h4><p>间址周期完成取操作数有效地址的任务，具体操作如下：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将指令的形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>启动读操作</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将形式地址内的数据传回MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow Ad(IR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR内的有效地址送至指令寄存器的地址字段</p></li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620193603661.png" alt="image-20240620193603661" style="zoom:50%;" /><h4 id="执行周期"><a class="markdownIt-Anchor" href="#执行周期"></a> 执行周期</h4><p>执行周期的过程相对比较复杂。不同于取指周期和间址周期，执行周期会根据指令操作的差异而改变。我们将分别讨论非访存指令、访存指令和转移指令的微指令操作。</p><h5 id="非访存指令"><a class="markdownIt-Anchor" href="#非访存指令"></a> 非访存指令</h5><p>非访存指令比较简单，因为不涉及访存，所以不需要用到总线传输以及地址及数据寄存器。有以下指令是非访存的：</p><table><thead><tr><th>指令</th><th>功能</th><th>微指令操作</th></tr></thead><tbody><tr><td>CLA</td><td>清除ACC的值</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">0\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td>COM</td><td>将ACC内的值取反</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>C</mi><mi>C</mi></mrow><mo stretchy="true">‾</mo></mover><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">\overline{ACC}\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td>SHR</td><td>算术右移</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>R</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub><mo>→</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">L(ACC)\rightarrow R(ACC),ACC_0\rightarrow ACC_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>CSL</td><td>循环左移</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub><mo>→</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">R(ACC)\rightarrow L(ACC),ACC_0\rightarrow ACC_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>STP</td><td>停机指令</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">0\rightarrow G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>是停机标志</td></tr></tbody></table><h5 id="访存指令"><a class="markdownIt-Anchor" href="#访存指令"></a> 访存指令</h5><p>访存指令需要访问主存，所以一般都会涉及到总线传输，此时控制线输出的信号根据操作类型输出可读可写。</p><ul><li><p>加法指令 ADD X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将指令寄存器的形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>控制线输出读信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>主存读取MAR地址中的数据送回MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(ACC)+(MDR)\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>ACC中的值加上MDR中的数据，计算结果保存在ACC中</p></li></ol></li><li><p>存数指令 STA X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线输出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>C</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">ACC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将ACC内的值送入MDR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR中的数据写入主存中MAR的地址内</p></li></ol></li><li><p>取数指令 LDA X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>控制线输出读信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将主存中MAR地址内的数据取出存放在MDR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>将MDR中的数据送入ACC，而不是与ACC内的值相加</p></li></ol></li></ul><h5 id="转移指令"><a class="markdownIt-Anchor" href="#转移指令"></a> 转移指令</h5><p>转移指令分为无条件转移和有条件转移，对应汇编中的<code>jmp</code>和<code>jz</code>等指令。要实现转移指令，一般涉及到对PC的修改。</p><ul><li><p>无条件转移 JMP X</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，直接将指令中的形式地址送入PC，因为<code>JMP</code>后跟着的操作数往往就是需要跳转执行的指令地址</p></li><li><p>条件转移 BAN X</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">⋅</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>+</mo><mover accent="true"><msub><mi>A</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">A_0·Ad(IR)+\overline{A_0}(PC)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，条件转移实际上是看ACC的首位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是否为负数（对应高电平，因为符号位取1代表负数）。是负数则转移，否则不转移。</p></li></ul><h4 id="指令周期"><a class="markdownIt-Anchor" href="#指令周期"></a> 指令周期</h4><p>各类指令对应的指令周期总结如下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621105317997.png" alt="image-20240621105317997" style="zoom:50%;" /><p>只要查看有无间接过程，就能判断有无间址周期。否则，大部分指令只需要取指周期和执行周期。判断指令经过的具体周期后，就能根据细分的周期分析执行指令时需要的微指令。</p><h4 id="中断周期"><a class="markdownIt-Anchor" href="#中断周期"></a> 中断周期</h4><p>除了取指、间址、执行外，还有一类特殊的周期是中断周期。中断往往是由外部I/O设备对CPU发出的请求产生的，所以他们有特殊的微指令操作。</p><p>我们在第八章介绍中断系统时已经讨论过，在中断周期内执行的三个步骤：</p><ol><li>保存程序断点</li><li>形成中断服务程序入口地址</li><li>关中断</li></ol><p>以上三个步骤务必牢记。接下来我们就这三个步骤讨论CU在此过程中的作用。</p><h5 id="保存断点"><a class="markdownIt-Anchor" href="#保存断点"></a> 保存断点</h5><p>保存断点我们介绍了两种方法：将断点地址存于特殊的主存空间内（0号地址），入栈保存。相应的，他们的微指令操作也各不相同。</p><ul><li><p>存入“0”地址</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">0\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将0号地址送入MAR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线输出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将此时PC的内容，也即程序断点地址送入MDR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR的数据送入主存的0号地址</p></li></ol></li><li><p>断点入栈</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>P</mi><mo>−</mo><mn>1</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SP-1\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将栈顶指针（栈指针寄存器）的值减一，把此处的地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线发出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>程序断点地址送入MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>把MDR的数据送入对应的栈空间</p></li></ol></li></ul><h5 id="形成入口中断地址"><a class="markdownIt-Anchor" href="#形成入口中断地址"></a> 形成入口中断地址</h5><p>形成入口地址我们也介绍了两种方式：硬件向量法与软件查询法</p><p>硬件向量法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>向量地址</mtext><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">向量地址\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，即直接把形成的向量地址送入PC即可</p><p>软件查询法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>中断程序识别入口地址</mtext><mi>M</mi><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">中断程序识别入口地址M\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">口</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，此时PC跳转至软件查询法提供的中断识别程序M执行，程序M会再把入口的地址送入PC。注意这里并没有直接把中断的真正入口地址直接送给PC，而是分成了两步</p><h5 id="关中断"><a class="markdownIt-Anchor" href="#关中断"></a> 关中断</h5><p>关中断即把EINT置0即可。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>E</mi><mi>I</mi><mi>N</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">0\rightarrow EINT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></p><h4 id="微指令小结"><a class="markdownIt-Anchor" href="#微指令小结"></a> 微指令小结</h4><p>通过以上对各个指令周期中CU输出的微指令分析，我们可以总结出CU的一些规律：</p><ul><li>如果指令不访存，则不涉及总线传输、MDR和MAR。CU仅在CPU内输出简单的单步或双步信号。</li><li>如果指令访存，如取指、存数、断点保存等过程，一般要涉及到总线和主存寄存器的使用。首先要将需要取数/写数的地址送入MAR，再由控制寄存器设置相应的读写信号，接着就可以把要写的数据送入MDR或者把访存的数据存入MDR，最后再把MDR内的数据写入主存或者送入CPU的ACC内。</li><li>如果指令涉及转移，则一般还要用上PC寄存器。注意是有条件转移还是无条件转移。</li></ul><h3 id="控制单元的功能"><a class="markdownIt-Anchor" href="#控制单元的功能"></a> 控制单元的功能</h3><p>以上微指令的分析流程想必大家都已经有了个大概的轮廓，但我们都只是基于符号表示给出了形式上的说明，本节我们就来学习在硬件上CU是如何驱动完成这些功能的。</p><p>我们先给出CU的一幅结构图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621164920497.png" alt="image-20240621164920497" style="zoom:50%;" /><p>我们根据这幅图来介绍与CU有关的输入信号和输出信号。</p><h4 id="输入信号"><a class="markdownIt-Anchor" href="#输入信号"></a> 输入信号</h4><p>由图可知，CU接受以下四个输入信号：</p><ul><li><p>时钟</p><p>CU受时钟控制，一个时钟脉冲下，CU可以发送一个或者一组需要同时执行的操作命令。是驱动计算机运行的最基础信号，也是我们后续介绍多级时序系统的基础。</p></li><li><p>指令寄存器</p><p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow CU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>时，存储指令中操作码的信息。控制信号的发出依赖于操作码。</p></li><li><p>标志</p><p>CU还受标志控制，比如条件转移标志位</p></li><li><p>外来信号</p><p>比如INTR中断请求、HRQ总线请求等</p></li></ul><h4 id="输出信号"><a class="markdownIt-Anchor" href="#输出信号"></a> 输出信号</h4><p>由图可知，CU输出的信号可分为两类：CPU内的各种控制信号和送至控制总线的信号。</p><ul><li><p>CPU内的控制信号</p><p>如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>→</mo><msub><mi>R</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">R_i\rightarrow R_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>寄存器之间的赋值操作</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>指令计数器递增</p><p>ALU中的+、-、与、或等各种算数控制信号</p></li><li><p>送至控制总线的信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>M</mi><mi>E</mi><mi>R</mi><mi>Q</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{MERQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 访存控制信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">\overline{IO}/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>访问IO/存储器的控制信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>R</mi><mi>D</mi></mrow><mo stretchy="true">‾</mo></mover><mtext>、</mtext><mover accent="true"><mrow><mi>W</mi><mi>R</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{RD}、\overline{WR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>读命令与写命令</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">INTA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span></span></span></span>中断响应信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>L</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HLDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span>总线响应信号</p></li></ul><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><p>这里主要谈谈CPU中分散连接和采用CPU内总线通信的两种结构，简单的过一下。只要掌握了CU微指令流程其实就很简单。</p><p>下图是分散连接的一个示例：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621171409141.png" alt="image-20240621171409141" style="zoom:50%;" /><p>可以看到这么做需要比较繁多的线路，如果我们引入CPU内部总线，就可以大大简化电路。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621171506973.png" alt="image-20240621171506973" style="zoom:50%;" /><p>可以看到，引入内部总线后，CPU内各部件的通信只需要依赖于一根总线，而无须庞杂繁琐的各部件都连线。其中还有一点变化需要注意：ALU多了寄存器Y和Z，Y用来存放另一操作数，Z用来临时放计算结果，防止结果放入总线后又被ALU读入。</p><h3 id="多级时序系统"><a class="markdownIt-Anchor" href="#多级时序系统"></a> 多级时序系统</h3><p>终于来到了本章的重头戏——多级时序系统。别被这个高大上的名称吓到了，其实内容很简单，就是一个概念的套娃。指令周期&gt;机器周期&gt;时钟周期。</p><p>我们来学习一下机器周期和时钟周期的概念，就可以理解多级时序系统了。</p><h4 id="机器周期"><a class="markdownIt-Anchor" href="#机器周期"></a> 机器周期</h4><p>机器周期，即<strong>所有指令执行过程的一个基准时间</strong>。通常指的是完成一个特定功能所需的一系列时钟周期。例如，从内存中读取数据或写入数据可能需要多个时钟周期来完成。机器周期通常包括数据传输、地址访问、控制信号的建立等。</p><p>通常我们确定机器周期时，需要考虑<strong>每条指令的执行步骤</strong>和<strong>每一步骤所需的时间</strong>。一般来说，我们把完成最复杂指令功能的时间作为机器周期的基准时间。最复杂指令通常是访存操作，所以我们一般是以访问一次存储器的时间为基准。</p><p>如果指令字长＝存储字长，那么取指周期=机器周期。</p><p>每个机器周期内部也有很多微操作，有先后顺序。所以机器周期内部也需要有多个时钟周期，由时钟控制微操作先后顺序。</p><h4 id="时钟周期"><a class="markdownIt-Anchor" href="#时钟周期"></a> 时钟周期</h4><p>时钟周期，又称节拍或者状态，是计算机中最基本的时间单位，可以用时钟周期控制产生一个或几个微操作的命令。</p><p>如果微操作可并行，则一个机器周期内可完成若干个微操作。</p><p>时钟周期与机器周期的关系如下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621173315652.png" alt="image-20240621173315652" style="zoom:50%;" /><p>可以看到，时钟周期的每一个上升沿会给T<sub>0</sub>一个信号，微操作的下降沿又会激活下一个微操作。一组由时钟周期调控的微操作组成一个机器周期。</p><h4 id="多级时序系统-2"><a class="markdownIt-Anchor" href="#多级时序系统-2"></a> 多级时序系统</h4><p>机器周期、节拍（状态、时钟周期）组成多级时序系统，一个指令周期包含若干个机器周期，一个机器周期包含若干个时钟周期。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621174044179.png" alt="image-20240621174044179" style="zoom:50%;" /><h3 id="控制方式"><a class="markdownIt-Anchor" href="#控制方式"></a> 控制方式</h3><p>产生一个微指令操作后，下一个指令什么时候产生呢？我们有几种控制方式：同步控制方式、异步控制方式、联合控制方式和人工控制方式。</p><p>我们主要介绍同步控制方式，这也是大多数计算机目前所在采用的控制方式。</p><h4 id="同步控制方式"><a class="markdownIt-Anchor" href="#同步控制方式"></a> 同步控制方式</h4><p>同步控制方式，即任一微操作均由<strong>统一基准时标</strong>的时序信号控制。它的特征是，一定有一个定宽定距的时钟。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621180344264.png" alt="image-20240621180344264" style="zoom:50%;" /><p>同步控制方式有三种类别：</p><ul><li><p>采用定长的机器周期</p><p>这种方式强制规定了机器周期内的节拍数相同，此时的机器周期以最长的微操作序列和最繁的微操作作为标准。这就导致了在一些相对简单的机器周期内，会产生空闲的节拍，即浪费了部分时钟周期。</p></li><li><p>采用不定长的机器周期</p><p>即机器周期内的节拍数不等，执行指令过程较短的话可以含较少的节拍，如果执行指令过程较长则可以延长节拍。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621180828791.png" alt="image-20240621180828791" style="zoom:50%;" /></li><li><p>中央控制和局部控制相结合</p><p>还可以采用采用中央控制和局部控制相结合的方法，即执行较长的延长的周期由局部节拍进行控制。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621181011617.png" style="zoom:50%;" /></li></ul><h4 id="异步控制方式"><a class="markdownIt-Anchor" href="#异步控制方式"></a> 异步控制方式</h4><p>异步控制方式即一个微操作完成后，会给出一个应答信号。它没有基准时标信号和固定的周期节拍与严格的时钟同步，采用应答方式来控制。</p><h4 id="联合控制方式"><a class="markdownIt-Anchor" href="#联合控制方式"></a> 联合控制方式</h4><p>即同步和异步相结合的操作，常用与复杂的指令控制，如IO指令等。</p><h4 id="人工控制方式"><a class="markdownIt-Anchor" href="#人工控制方式"></a> 人工控制方式</h4><p>即人为参与程序运行调控，多用于程序调试，有以下三种方式：</p><ul><li>Reset，即重置程序。</li><li>(2) 连续和单条指令执行转换开关，如8086汇编中的单步断点调试。</li><li>符合停机开关，用于计算机的故障处理和容错率展示。</li></ul><p>……</p><p>……</p><p>第六部分到此结束！敬请阅读第七部分🌹</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/612FFB2DEDE35B9C77545DB9ADF1C8BF.jpg" alt="612FFB2DEDE35B9C77545DB9ADF1C8BF" /></p>]]></content>
    
    
    <summary type="html">计算机组成指北的第六部分！介绍了计算机中控制单元的功能。</summary>
    
    
    
    <category term="计算机组成指北" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="控制单元" scheme="http://example.com/tags/%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83/"/>
    
    <category term="多级时序系统" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%A7%E6%97%B6%E5%BA%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成指北（五）</title>
    <link href="http://example.com/posts/159e2ded72f9/"/>
    <id>http://example.com/posts/159e2ded72f9/</id>
    <published>2024-09-27T03:43:08.000Z</published>
    <updated>2024-09-27T03:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第八章-cpu的结构和功能"><a class="markdownIt-Anchor" href="#第八章-cpu的结构和功能"></a> 第八章 CPU的结构和功能</h2><blockquote><p>重难点注意！</p><p>周期流水和中断<br />指令流水非常非常重要<strong>绝对会考</strong>，怎么构成指令流水，几个周期构成流水，以及产生影响的主要因素，如何解决。要会计算流水效率。<br />中断请求标记 电路图不需要记住<br />中断隐指令概念要记住<br />屏蔽字<strong>一定会考</strong>，且占比高</p></blockquote><p>我们已经学习完了CPU的指令系统，但是指令是如何被CPU调用的呢？这就涉及到中断系统和CU部分了。本章从分析CPU的功能和内部结构入手，详细讨论计机器执行一条指令的全过程，以及为了提高数据处理能力、开发系统的并行性所采取的指令流水技术。</p><h3 id="cpu的结构"><a class="markdownIt-Anchor" href="#cpu的结构"></a> CPU的结构</h3><p>在第一章我们知道CPU主要由运算器和控制器组成。运算器已经在第六章学习完毕，这里主要讨论CPU的控制器的功能。</p><p>运算器的功能：</p><ul><li>实现算术运算和逻辑运算（数据加工）</li></ul><p>控制器的功能：</p><ul><li>取指令（指令控制）</li><li>分析指令（指令控制）</li><li>执行指令，发出各种操作命令（指令控制）</li><li>控制程序输入及结果的输出（操作控制）</li><li>总线管理（时间控制）</li><li>处理异常情况和特殊请求（处理中断）</li></ul><p>CPU必须具有指令控制、操作控制、时间控制、处理终端和数据加工的能力。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619175634266.png" alt="image-20240619175634266" style="zoom:50%;" /><p>其中指令控制与PC、IR有关；操作控制和时间控制则涉及到CU和时序电路；数据加工与ALU和寄存器有关；处理终端则和中断系统有关。</p><h4 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h4><p>CPU的寄存器分为用户可见寄存器和用户不可见寄存器。用户不可见寄存器很多，例如流水段之间的流水段寄存器。</p><p>用户可见的寄存器有：</p><ul><li>通用寄存器，存放操作数</li><li>数据寄存器，存放操作数</li><li>地址寄存器，存放地址</li><li>条件码寄存器，存放条件码</li></ul><p>不可见的寄存器有：</p><ul><li><p>控制寄存器</p><p>以取指令为例子：PC➡️MAR➡️M➡️MDR➡️IR</p><p>其中MAR、MDR、IR对用户不可见，而PC可见</p></li><li><p>状态寄存器</p><p>反映指令执行结果的情况或者计算机软件硬件的状态。比如状态寄存器，PSW寄存器（比如8086的flag寄存器）。</p></li></ul><h4 id="控制单元cu和中断系统"><a class="markdownIt-Anchor" href="#控制单元cu和中断系统"></a> 控制单元CU和中断系统</h4><p>其中，CU负责产生全部指令的微操作命令序列，包括：</p><ul><li>组合逻辑设计，即硬连线逻辑</li><li>微程序设计，即存储逻辑</li></ul><p>以上内容将在第十章介绍。</p><p>中断系统，将在本章节后续小节具体介绍。</p><h4 id="alu"><a class="markdownIt-Anchor" href="#alu"></a> ALU</h4><p>参见第六章</p><h3 id="指令周期"><a class="markdownIt-Anchor" href="#指令周期"></a> 指令周期</h3><p>指令周期，指的就是CPU取出并执行一条指令所需要的全部时间。</p><p>一般来说，完成一条指令，可以分为两个阶段：</p><ul><li>取指、分析；称取指周期</li><li>执行；称执行周期</li></ul><p>不过，具体来说，每条指令的指令周期一般不同，比如Nop就只有取指周期。指令周期一共可以细分为四个周期：取值周期、间址周期、执行周期、中断周期。</p><p>具体的流程可以参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619193003466.png" alt="image-20240619193003466" style="zoom:50%;" /><p>控制器在指令执行的不同阶段要发出不同命令。尽管都是内存读写操作，不同周期功能不同，读写位置不同：</p><ul><li>取指周期，取出指令，送入IR；</li><li>间址周期，取出地址，送入IR或MDR的地址码部分；</li><li>执行周期，读出来的数据放入CPU寄存器中；</li><li>中断周期，程序断点存入内存。</li></ul><p>CPU必须标注出当前处于指令的哪个阶段，以便于控制器发出相应的控制操作，这些标志就是<strong>CPU 工作周期的标志</strong>。为了区分它们，在CPU内可以设置四个标志触发器：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619193332739.png" style="zoom:50%;" /><p>FE、IND、EX、INT分别对应取指、间址、执行和中断四个周期，并以“1”状态表示有效。</p><h3 id="指令流水"><a class="markdownIt-Anchor" href="#指令流水"></a> 指令流水</h3><p>指令流水是一项极其重要的技术，需要重点掌握。无论是嵌入式，还是服务器，都使用流水技术。</p><p>我们先前提到过，要提高机器速度，可以从几个方面入手：</p><ol><li>提高访问速度：比如使用高速芯片、Cache、多提并行</li><li>提高I/O和主机之间的传送速度：比如使用中断、DMA、通道、I/O处理机等技术</li><li>提高运算器的速度：比如使用高速芯片，改进算法，使用快速进位链等</li></ol><p>现在，我们介绍第四种方法——提高整机的处理能力，即改进系统结构，开发系统的<strong>并行性</strong>。</p><p>所谓并行，包含并发性和同时性两个概念：</p><ul><li>并发，指两个或两个以上事件在<strong>同一时间段</strong>发生</li><li>同时，指两个或两个以上事件在<strong>同一时刻</strong>发生</li></ul><p>概括来说，只要<strong>时间上存在相互重叠</strong>，就具有并行性。</p><p>并行性的等级又分为作业级或程序级、任务级或进程级、指令之间级和指令内部级。前两者称为<strong>粗粒度</strong>，用软件实现；后两者称为<strong>细粒度</strong>，用硬件实现。</p><h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4><p>我们先来看指令的串行执行：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619195144814.png" style="zoom:50%;" /><p>可以看到，取指令时，只有取指令的部件在工作；执行指令时，只有执行指令的部件在工作。总会有一个部件空闲，没有充分的发挥出计算机的效率。</p><p>接着我们使用指令的二级流水：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619195335432.png" alt="image-20240619195335432" style="zoom:50%;" /><p>可以看到，如果取指和执行阶段的时间完全重叠，则指令周期减半，速度提高了一倍。但实际情况下，流水线很难满负荷运转，因为指令不会仅分成两个阶段，指令之间也有相关性，不同阶段的耗时也不同。</p><p>影响指令流水的因素如下：</p><ul><li>执行时间＞取指时间</li><li>条件转移指令对指令流水的影响：必须等上一条指令执行结束才能确定下一条指令的地址，这造成了很大的时间损失。</li></ul><p>尽管这些因素影响了流水线的效率，但还是可以获得加速。</p><p>为了进一步提高处理速度，我们把处理过程分为更细的几个阶段：</p><ul><li>FI：取指令</li><li>DI：指令译码</li><li>CO：形成操作数的地址</li><li>FO：取操作数</li><li>EI：执行</li><li>WO：结果写回</li></ul><p>于是，我们就能根据这里六个阶段，设计一个六级流水：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619200109839.png" alt="image-20240619200109839" style="zoom:50%;" /><p>完成一条指令需要6个时间单位：</p><ul><li>如果串行执行，则需要6×9=54个时间单位</li><li>如果六级流水，则需要14个时间单位</li></ul><p>可以看出流水线大大地提高了计算机的运行效率。</p><h4 id="影响流水的因素"><a class="markdownIt-Anchor" href="#影响流水的因素"></a> 影响流水的因素</h4><p>要保持高效率，我们就必须要保持流水充分流动，不发生断流。但由于在流水线中会出现<strong>三个相关</strong>，所以很难实现不断流动。三个相关即：</p><ul><li>结构相关，不同指令争用同一硬件部件</li><li>数据相关，后继指令需要用到前面指令的执行结果</li><li>控制相关，遇到分支指令和其他改变PC值引起的相关</li></ul><h5 id="结构相关"><a class="markdownIt-Anchor" href="#结构相关"></a> 结构相关</h5><p>要解决结构相关的问题，我们通常采用以下方法：</p><ul><li>停顿，让一个指令先执行</li><li>指令存储器与数据存储器分开，避免取指令和取操作数产生冲突</li><li>指令预取技术，适用于访存周期短的情况，利用空闲时间取出多条指令放入指令缓冲寄存器</li></ul><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619200736020.png" alt="image-20240619200736020" /></p><p>另外，除了存储器资源，其他资源也都会冲突，例如寄存器。</p><h5 id="数据相关"><a class="markdownIt-Anchor" href="#数据相关"></a> 数据相关</h5><p>数据相关指不同指令因重叠操作，可能改变操作数的 读/写 访问顺序。</p><p>数据相关又分为三种：写后读相关，读后写相关和写后写相关</p><ul><li><p>写后读相关·RAW</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201634128.png" alt="image-20240619201634128" /></p></li><li><p>读后写相关·WAR</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201641779.png" alt="image-20240619201641779" /></p></li><li><p>写后写相关·WAW</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201647894.png" alt="image-20240619201647894" /></p></li></ul><p>解决方法有二：后推法和旁路技术。</p><ul><li>后推法：等待第一条指令将结果写入寄存器后，第二条指令才开始读执行。这样做显然需要停顿流水线。</li><li>旁路技术：相关专用通路、前向通道：不需要等到结果送回寄存器，运算器结果产生后，直接作为输入，开始第二条指令执行。</li></ul><p>在按序流动的流水线中，只可能出现RAW相关；而在非按序流动的流水线中，则三种都可能出现。</p><h5 id="控制相关"><a class="markdownIt-Anchor" href="#控制相关"></a> 控制相关</h5><p>由转移指令引起，不得不停止等待判断的结果才知道接下来该执行哪里。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619202134351.png" alt="image-20240619202134351" style="zoom:50%;" /><p>假设指令3是转移指令，直到指令2结束才知道条件是否成立。指令4到指令7已经全部取出开始执行了，这些操作全部作废，在9到12时间单元没有结果输出，产生性能损失。</p><p>为了解决控制相关，我们一般使用猜测法尽早判断转移是否发生。这个方法很复杂，已经超出了教纲，可以自行查阅资料了解。</p><h4 id="流水线性能"><a class="markdownIt-Anchor" href="#流水线性能"></a> 流水线性能</h4><p>我们主要学习流水线性能的三个有关定义：吞吐量、加速比和效率。</p><h5 id="吞吐率"><a class="markdownIt-Anchor" href="#吞吐率"></a> 吞吐率</h5><p>吞吐率指单位时间内，流水线所完成指令或输出结果的数量。</p><p>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>段流水线的各段时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>。</p><ul><li><p>最大吞吐率为流水线连续流动达到稳定状态下的状态，即没有资源冲突，没有数据相关冲突，没有条转等，每经过一个t就有一个结果输出，有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>p</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">T_{pmax}=\frac{1}{\Delta t}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p></li><li><p>实际吞吐率：连续处理 n 条指令的吞吐率为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>p</mi></msub><mo>=</mo><mfrac><mi>n</mi><mrow><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">T_p=\frac{n}{m·\Delta t+(n-1)·\Delta t}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.215392em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p><p>第一条指令需要时间mt，如果流水线很理想，其后一条指令有（m-1）段都已经在执行完第一条指令后并发完成，故只需要额外t时间就可完成第二条指令。以此类推，除了第一条指令花费mt外，剩下的（n-1）条指令均只需要额外的一个t即可输出结果，总耗时为(n-1)·t</p></li></ul><p>仅当n&gt;&gt;m时，T<sub>p</sub>≈T<sub>pmax</sub></p><h5 id="加速比"><a class="markdownIt-Anchor" href="#加速比"></a> 加速比</h5><p>设加速比为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">S_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，定义加速比为 m 段的 <strong>流水线的速度</strong> 与等功能的 <strong>非流水线的速度</strong> 之比。</p><p>设流水线各段时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>完成n条指令在m段流水线上一共需要：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T=m·\Delta t+(n-1)·\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>完成n条指令在等效的非流水线上共需：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>=</mo><mi>n</mi><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T^{&#x27;} =nm·\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">m</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mi>m</mi></mrow><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">S_p=\frac{nm·\Delta t}{m·\Delta t+(n-1)·\Delta t}=\frac{nm}{m+n-1}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p><h5 id="效率"><a class="markdownIt-Anchor" href="#效率"></a> 效率</h5><p>效率即流水线中各功能段的利用率，由于流水线有建立时间和排空时间因此各功能段的设备不可能一直处于工作状态。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619204921547.png" alt="image-20240619204921547" style="zoom:50%;" /><p>定义效率：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mtext>流水线各段处于工作状态的时间区</mtext><mtext>流水线各段总的空时间区</mtext></mfrac><mo>=</mo><mfrac><mrow><mi>m</mi><mi>n</mi><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mi>n</mi><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><msub><mi>S</mi><mi>p</mi></msub><mi>m</mi></mfrac><mo>=</mo><msub><mi>T</mi><mi>p</mi></msub><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">E=\frac{流水线各段处于工作状态的时间区}{流水线各段总的空时间区}=\frac{mn\Delta t}{m(m+n-1)\Delta t}\\=\frac{n}{m+n-1}=\frac{S_p}{m}=T_p\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流</span><span class="mord cjk_fallback mtight">水</span><span class="mord cjk_fallback mtight">线</span><span class="mord cjk_fallback mtight">各</span><span class="mord cjk_fallback mtight">段</span><span class="mord cjk_fallback mtight">总</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">空</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span><span class="mord cjk_fallback mtight">区</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流</span><span class="mord cjk_fallback mtight">水</span><span class="mord cjk_fallback mtight">线</span><span class="mord cjk_fallback mtight">各</span><span class="mord cjk_fallback mtight">段</span><span class="mord cjk_fallback mtight">处</span><span class="mord cjk_fallback mtight">于</span><span class="mord cjk_fallback mtight">工</span><span class="mord cjk_fallback mtight">作</span><span class="mord cjk_fallback mtight">状</span><span class="mord cjk_fallback mtight">态</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span><span class="mord cjk_fallback mtight">区</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.330651em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.985651em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>其实就是<strong>实际吞吐率×各段用时</strong>。</p><h3 id="中断系统"><a class="markdownIt-Anchor" href="#中断系统"></a> 中断系统</h3><p>前面介绍过，采取中断的方式可以使CPU和I/O系统并行工作，提高效率。其实在实际运用中，除了I/O设备中断外，还有其他的中断。常见的中断类型如下：</p><ul><li>人为设置的中断，比如转管指令</li><li>程序性事故，比如溢出</li><li>硬件故障</li><li>I/O设备</li><li>外部事件，比如键盘中断</li></ul><p>中断系统为了处理这些中断，需要处理以下几个问题：</p><ol><li><p>各个中断源如何向CPU提出中断请求？</p><p>中断请求标记</p></li><li><p>多个中断源提出请求时，系统如何确定优先响应哪个中断源？</p><p>中断判优逻辑</p></li><li><p>CPU在什么条件、什么时候、以什么方式响应中断？</p><p>EINT、查询、中断向量表</p></li><li><p>CPU响应中断后如何保护现场？</p><p>中断隐指令</p></li><li><p>CPU响应中断后，如何停止原程序执行而转入中断服务程序的入口地址？</p><p>中断隐指令</p></li><li><p>中断处理结束后，CPU如何恢复现场，如何返回到原程序的中断处？</p><p>中断服务程序</p></li><li><p>中断处理过程中出现了新的中断，如何处理？</p><p>中断屏蔽技术</p></li></ol><p>接下来我们的内容将主要聚焦在解决这七个问题上。</p><p>（如果你学过8086汇编语言，你会发现这里的大多数问题在汇编语言的中断章节里都有介绍，如果你没有接触过汇编或者忘记了，可以参考这篇文章：<a href="https://adam8en.github.io/2024/06/12/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E6%B1%87%E7%BC%96%E5%91%B3%E5%B0%8F%E9%A5%BC%E5%B9%B2/#%E4%B8%AD%E6%96%AD">汇编味小饼干 | Adam8en の 8log</a>）</p><h4 id="中断请求标记"><a class="markdownIt-Anchor" href="#中断请求标记"></a> 中断请求标记</h4><p>中断系统通过设置中断请求标记触发器来判断是哪个中断源提出了中断要求，简称中断请求标记INTR。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212012390.png" alt="image-20240619212012390" style="zoom:50%;" /><p>一个中断源对应一个INTR触发器，多个INTR组成中断请求标记寄存器。当触发器被设为1时，表明有对应中断请求。中断系统的触发器越多，代表计算机对中断的处理能力越完善。</p><p>INTR既可以集中在CPU的中断系统内，也可以分布在各个中断源的接口电路中。</p><h4 id="中断判优逻辑"><a class="markdownIt-Anchor" href="#中断判优逻辑"></a> 中断判优逻辑</h4><p>判优实现有两种：硬件实现和软件实现。</p><p>硬件实现（排队器）又分两种：一种分散在各个中断源的接口电路中，使用链式排队器进行优先级划分；一种集中在CPU内，按照优先顺序1、2、3、4排列。当最高级的INTR=1时，可以封住比它级别的的中断源的请求。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212505410.png" alt="image-20240619212505410" style="zoom:50%;" /><p>软件实现即通过程序查询，从高到低逐级查询是否有中断请求，</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212605092.png" alt="image-20240619212605092" style="zoom:50%;" /><h4 id="中断服务程序入口地址的查找"><a class="markdownIt-Anchor" href="#中断服务程序入口地址的查找"></a> 中断服务程序入口地址的查找</h4><p>同样分为硬件向量法和软件查询法两种。</p><p>硬件向量法，即用向量地址形成部件，输入排队器输出，输出中断向量地址。速度快，但灵活性低。</p><p>硬件向量法又有两种方法：</p><ol><li>中断向量地址包含一条跳转指令，跳转到入口地址</li><li>在内存某一地方保持了入口地址，要把它取出来，送入PC</li></ol><p>第二种方法允许用户修改中断向量表的入口地址，即更新中断例程，灵活性相对较高。因为速度更快，计算机大多使用硬件向量法定位入口程序地址。</p><p>软件查询法即编写对应的程序，内容由程序员编制，可以灵活改变优先级，但是查询速度慢。目前计算机可以灵活使用两种方法找到入口地址。</p><h4 id="中断响应"><a class="markdownIt-Anchor" href="#中断响应"></a> 中断响应</h4><h5 id="响应中断的条件"><a class="markdownIt-Anchor" href="#响应中断的条件"></a> 响应中断的条件</h5><p>允许中断触发器EINT=1时。（类似8086汇编中的IF标志位，可以用<code>sti</code>和<code>cli</code>设置）</p><h5 id="响应中断的时间"><a class="markdownIt-Anchor" href="#响应中断的时间"></a> 响应中断的时间</h5><p>在指令执行周期结束时刻，由CPU 发查询信号</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619213414922.png" alt="image-20240619213414922" style="zoom:50%;" /><h5 id="中断隐指令"><a class="markdownIt-Anchor" href="#中断隐指令"></a> 中断隐指令</h5><p>中断隐指令，主要指的是三个步骤：</p><ol><li><p>保护程序断点</p><p>断点存于内存的特定地址（0号地址）或者断点进栈</p></li><li><p>寻找服务程序入口地址</p><p>硬件向量法或者软件查询法</p></li><li><p>硬件关中断</p><ul><li>单重中断：执行中断服务程序时不再允许发生中断</li><li>多重中断：保护程序软硬件状态的过程中，不允许发生中断</li></ul></li></ol><p>为什么叫这三个操作为“隐指令”，是因为它们都由计算机的硬件自动完成，而不是在某一条具体指令的驱动下完成。</p><h4 id="保护和恢复现场"><a class="markdownIt-Anchor" href="#保护和恢复现场"></a> 保护和恢复现场</h4><p>保护现场，指的是保存当前执行程序的断点地址以及寄存器中的内容。前者由中断隐指令完成，而后者交由中断服务程序完成。一般来说，是把当前过程中寄存器的值入栈来实现对现场的保护。</p><p>恢复现场，即跳转回原程序的断点地址并恢复其寄存器的内容，全部由中断服务程序完成。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620170454344.png" alt="image-20240620170454344" style="zoom:50%;" /><p>即把寄存器内容<code>POP</code>出栈，然后调用<code>IRET</code>指令返回。</p><h4 id="中断屏蔽技术"><a class="markdownIt-Anchor" href="#中断屏蔽技术"></a> 中断屏蔽技术</h4><h5 id="多重中断"><a class="markdownIt-Anchor" href="#多重中断"></a> 多重中断</h5><p>前面我们说过，对于单重中断而言，如果进入中断程序，是不允许响应其他中断的。但如果在执行中断服务程序的过程中，出现了更重要的，需要及时处理的新事件，怎么办呢？这时候我们引入了多重中断屏蔽技术。</p><p>多重中断，即CPU在响应某个中断服务程序时，出现了新的中断请求，CPU又响应了这个请求。此时，CPU就会暂时停止这个服务程序，转去执行新的中断服务程序，执行完毕后再返回执行原来的中断服务程序。即“中断的中断”，又称为中断嵌套。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620171033609.png" alt="image-20240620171033609" style="zoom:50%;" /><p>要实现多重中断，需要满足以下条件：</p><ol><li>提前设置开中断指令，否则CPU不会响应可屏蔽中断。</li><li>优先级别高的中断源有权中断优先级别低的中断源。</li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620171411538.png" alt="image-20240620171411538" style="zoom:50%;" /><p>如上图所示，中断源优先级为A&gt;B&gt;C&gt;D。可以看到D在返回的过程中，接收到了中断源A的信号。此时CPU转而去执行中断A，然后再转回执行中断D，最后返回。</p><p>在中断B执行完后，C的中断请求还在，此时CPU只要发出中断查询信号就可以继续执行中断。</p><h5 id="屏蔽技术"><a class="markdownIt-Anchor" href="#屏蔽技术"></a> 屏蔽技术</h5><p>我们通过硬件屏蔽触发器来设计中断屏蔽字，来改变中断优先级，提高系统的灵活性。</p><p>将排队器集中在CPU内，加上屏蔽条件，就可以组成具有屏蔽功能的排队器，如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620172902781.png" alt="image-20240620172902781" style="zoom:50%;" /><p>每个中断请求触发器都对应有一个屏蔽触发器，将所有的屏蔽触发器组合在一起，就可以构成一个屏蔽寄存器，屏蔽寄存器的内容称为屏蔽字。屏蔽字的内容和中断源的级别一一对应。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620173142882.png" alt="image-20240620173142882" style="zoom:50%;" /><p>直观来看，<strong>就是说屏蔽字的数值越大，它的优先级越高</strong>。</p><p>通过设置屏蔽字，我们就可以改变<strong>处理优先等级</strong>。注意区分处理优先等级和响应优先等级的概念。</p><ul><li>响应优先级：是CPU通过轮询中断触发器实现的，因为是通过硬件确定的，所以不可改变。</li><li>处理优先级：可以通过更改屏蔽字来改变CPU对中断触发器的处理优先级。</li></ul><p>也就是说，通过设置屏蔽字，CPU仍然会按照硬件设计的顺序优先响应排在前面的中断源，但是在这之后，中断服务程序可能会被优先级更高的屏蔽字打断，转而去处理其他中断服务程序。</p><p>比如有如下中断源：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620173902475.png" alt="image-20240620173902475" style="zoom:50%;" /><p>如果ABCD同时发出中断请求，就会有如下过程：</p><ol><li>首先，CPU优先响应请求A，此时A的处理优先级也是最高，没有中断程序打断，所以CPU会先执行完A的中断服务程序。</li><li>接着，CPU优先响应请求B，但是B的处理优先级低于D和C，所以将被打断。</li><li>C的响应优先级高于D，故CPU优先响应请求C，但是C的处理优先级低于D，故被D打断。</li><li>现在CPU开始处理请求D，没有被打断，于是处理完D的中断服务程序。</li><li>CPU处理完D转回处理中断C。</li><li>CPU处理C未遭打断，故成功执行完中断服务程序C。</li><li>最后，CPU转回处理并执行完中断服务程序B。</li></ol><p>以上过程绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620174630650.png" alt="image-20240620174630650" style="zoom:50%;" /><p>注意，所有中断只会被响应一次。在处理完一个中断请求后，不需要再次响应已经被响应过的中断，而是直接返回处理原先的中断。</p><p>在开启屏蔽字技术后，中断处理请求流程图增加了置屏蔽字和恢复屏蔽字部分，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620175626160.png" alt="image-20240620175626160" style="zoom:50%;" /><p>在恢复现场前关中断是为了防止恢复过程中被新的中断打断，在恢复现场和屏蔽字后，必须要重新打开中断。</p><p>……</p><p>……</p><p>第五部分到此结束！敬请阅读第六部分💸</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/105468887_p0.jpg" alt="11" /></p>]]></content>
    
    
    <summary type="html">计算机组成指北的第五部分！详细介绍了电脑中CPU的相关知识点。</summary>
    
    
    
    <category term="计算机组成指北" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="CPU的结构与功能" scheme="http://example.com/tags/CPU%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E5%8A%9F%E8%83%BD/"/>
    
    <category term="周期流水" scheme="http://example.com/tags/%E5%91%A8%E6%9C%9F%E6%B5%81%E6%B0%B4/"/>
    
    <category term="中断" scheme="http://example.com/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成指北（四）</title>
    <link href="http://example.com/posts/f96ae6cd0b44/"/>
    <id>http://example.com/posts/f96ae6cd0b44/</id>
    <published>2024-09-27T03:42:55.000Z</published>
    <updated>2024-09-27T03:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第七章-指令系统"><a class="markdownIt-Anchor" href="#第七章-指令系统"></a> 第七章 指令系统</h2><blockquote><p>难度相对不大</p><p>扩展操作码技术<br />寻址方式包括指令的寻址和操作数的寻址，了解概念<br />指令集 risc和cisc的区别表</p></blockquote><p>至此，我们算是介绍完了计算机底层的硬件部分，最基础的M0层学习完毕🍾🍾🍾！</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/Cache_577189bb64f13db1.jpg" alt="Cache_577189bb64f13db1" /></p><p>呃等等，后面还有更难的M1层还没开始学呢……褒姒了。（还记得记得M0和M1吗？如果记不得就去复习下前面的计算机层次结构）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/Cache_6818278e85975c59.jpg" alt="Cache_6818278e85975c59" /></p><p>不管怎么说，从这章开始，我们正式开始介绍计算机的指令系统，了解计算机是如何通过微指令的方式与硬件系统交互实现相应的功能。</p><h3 id="机器指令"><a class="markdownIt-Anchor" href="#机器指令"></a> 机器指令</h3><p>一般来说，指令的格式如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618212628477.png" alt="image-20240618212628477" /></p><p>顾名思义，操作码就是指示计算机应该做出什么样的控制行为，地址码则代表执行操作的内存地址（前提是该操作涉及到了与数据的交互）。</p><h4 id="操作码"><a class="markdownIt-Anchor" href="#操作码"></a> 操作码</h4><p>指令中的操作码反映了机器该做出什么样的操作。操作码的长度可以是固定的，也可以是可变的。前者比如RISC、IBM370等指令字较长时使用，后者则在字长较短的微型计算机被广泛采用，如Intel8086等。一般来说，可变长度的操作码会使控制器的设计变得复杂，所以我们采用<strong>扩展操作码技术</strong>对操作码进行扩充，从而减少指令字长。所谓扩展操作码技术，即通过减少地址码字段的长度来扩充操作码，从而保持指令字段整体长度不变。</p><p>以下是一种扩展操作码的安排示意图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619152949278.png" alt="image-20240619152949278" style="zoom:50%;" /><p>我们可以很容积总结出扩展操作码的规律：十六位指令码分为四组，每一个小组由2<sup>4</sup>种组合，除零地址指令外，需要抽出1111来标识进入下一组，故每种地址指令（除零地址指令外）均有2<sup>4</sup>-1=15条。</p><p>如果需要进一步扩展操作码，可以通过减少地址指令条数来实现。比如三地址指令操作码，每减少一种可多构成2<sup>4</sup> 种二地址指令；二地址指令操作码，每减少一种可多构成2<sup>4</sup> 种一地址指令。这是因为每减少一条高地址指令，就会增加低地址指令额外的组成种类。</p><blockquote><p>例题：设指令字长16位，操作数地址码6位，指令有零地址、一地址、二地址3种。</p><p>（1）若操作码长度固定，零地址指令P种，一地址指令Q种，则二地址指令最多几种？</p><p>地址码6位，支持二地址指令，则操作码位数为</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mtext>−</mtext><mn>6</mn><mtext>−</mtext><mn>6</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">16−6−6=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">−</span><span class="mord">6</span><span class="mord">−</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>则总共有2<sup>4</sup>=16种指令，由于操作码长度固定，则二地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mtext>−</mtext><mi>P</mi><mtext>−</mtext><mi>Q</mi></mrow><annotation encoding="application/x-tex">16−P−Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">−</span><span class="mord mathnormal">Q</span></span></span></span></p><p>（2）采用扩展操作码技术，若二地址指令X种，零地址指令Y种，则一地址指令最多几种？</p><p>二地址指令每减少一种，可构成2<sup>6</sup>种一地址指令，一地址指令每减少一种，可构成2<sup>6</sup>种零地址，二地址指令X种，则一地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">(2^4−X)×2^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>种</p><p>设一地址指令M种，则零地址指令最多<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">((2^4−X)×2^6 −M)×2^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>种，因零地址指令Y种，解方程：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">((2^4−X)×2^6 −M)×2^6=Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></p><p>可得一地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>Y</mi><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M=(2^4−X)×2^6−Y×2^{-6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><h4 id="地址码"><a class="markdownIt-Anchor" href="#地址码"></a> 地址码</h4><p>地址码用来指出该指令的源操作数的地址（一个或两个）、结果的地址以及下一条指令的地址，又分四地址操作码、三地址操作码、二地址操作码以及一地址操作码。</p><p>假设指令字长为32位，其中操作码固定8位，则有：</p><ul><li><p>四地址</p><p>寻址范围：2<sup>6</sup>=64</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619155842877.png" alt="image-20240619155842877" /></p></li><li><p>三地址</p><p>寻址范围：2<sup>8</sup>=256</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160231545.png" alt="image-20240619160231545" /></p></li><li><p>二地址</p><p>寻址范围：2<sup>12</sup>=4K</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160327394.png" alt="image-20240619160327394" /></p></li><li><p>一地址</p><p>寻址范围：2<sup>24</sup>=16M</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160340900.png" alt="image-20240619160340900" /></p></li><li><p>零地址</p><p>零地址指令在指令字中无地址码，要么是不需要操作数的指令（空操作NOP、HLT停机等），要么是其操作数地址隐藏在堆栈中（子程序返回RET、中断返回IRET等）</p></li></ul><h4 id="指令字长"><a class="markdownIt-Anchor" href="#指令字长"></a> 指令字长</h4><p>早期的计算机指令字长一般是固定的，所以只需要取出固定的字长就可以执行指令。但是现在的计算机，指令字长一般是可变的。为了提高运行速度和节省存储空间，一般把指令设计为按字节的倍数变化。</p><h3 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h3><p>寻址方式，即确定本条指令的操作数地址及下一条欲执行指令的指令地址。分为指令寻址和数据寻址。了解概念即可。</p><h4 id="指令寻址"><a class="markdownIt-Anchor" href="#指令寻址"></a> 指令寻址</h4><p>指令寻址的方式比较简单，即由程序计数器PC（Program Counter）按顺序指向下一条指令即可。如果遇到跳跃指令，则由跳跃指令指出下一条指令的地址。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619161533737.png" alt="image-20240619161533737" style="zoom:50%;" /><h4 id="数据寻址"><a class="markdownIt-Anchor" href="#数据寻址"></a> 数据寻址</h4><p>一般来说，数据寻址的格式如下图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619162256574.png" alt="image-20240619162256574" style="zoom:50%;" /><p>操作码代表对数据执行操作的类型；寻址特征代表执行什么样的寻址；形式地址A则储存数据的相关信息，它可能就是数据本身，也可能是数据所在的真实地址，也可能是数据所在地址的地址。一般来说，指令地址码中的字段通常不代表操作数的真实地址。</p><p>方便起见，我们约定指令字长=存储字长=机器字长；形式地址记为A，真实地址/有效地址记为EA。</p><blockquote><ol><li><strong>指令字长</strong>：指令字长是指CPU一次能够处理的指令的位数。在某些体系结构中，所有的指令都是固定长度的，例如16位、32位或64位。</li><li><strong>存储字长</strong>：存储字长是指存储器中每个存储单元能够存储的数据的位数。这通常与指令字长相同，意味着存储器中的每个单元可以存储相同数量的位。</li><li><strong>机器字长</strong>：机器字长是指CPU在执行算术和逻辑操作时能够一次性处理的数据位数。这通常与指令字长和存储字长相同，这样设计可以简化计算机的内部逻辑和提高效率。</li></ol></blockquote><p>数据寻址方式相对复杂，共有十种数据寻址方式，现一一介绍如下：</p><h5 id="立即寻址"><a class="markdownIt-Anchor" href="#立即寻址"></a> 立即寻址</h5><p>立即寻址时，此时形式地址A就是操作数，即输入立即数。</p><p>特点：</p><ul><li>指令执行阶段不访存</li><li>立即数是采用补码存放的，所以可正可负</li><li>A的位数限制了输入立即数的范围</li></ul><h5 id="直接寻址"><a class="markdownIt-Anchor" href="#直接寻址"></a> 直接寻址</h5><p>直接寻址时，有效地址由形式地址直接给出，EA=A。</p><p>特点：</p><ul><li>执行阶段访问一次寄存器</li><li>A的位数决定了该指令操作数的寻址范围</li><li>操作数的地址不易修改，此时必须要修改A</li></ul><h5 id="隐含寻址"><a class="markdownIt-Anchor" href="#隐含寻址"></a> 隐含寻址</h5><p>隐含寻址时，操作数地址隐含在操作码中。</p><p>比如8086的MUL指令，被乘数隐含在 AX（16位）或 AL（8位）中；MOVS 指令，源操作数的地址隐含在 SI 中，目的操作数的地址隐含在 DI 中。</p><p>特点：</p><ul><li>指令字中少了一个地址字段，可缩短指令字长</li></ul><h5 id="间接寻址"><a class="markdownIt-Anchor" href="#间接寻址"></a> 间接寻址</h5><p>间接寻址时，有效地址由形式地址间接提供，即形式地址指向真实地址的地址，类似指针的概念。间接寻址的次数视具体情况而定。EA=(A)。</p><p>特点：</p><ul><li>执行指令阶段会进行2次或多次访存</li><li>可以扩大寻址范围</li><li>便于编制程序，指针的运用十分方便</li></ul><h5 id="寄存器寻址"><a class="markdownIt-Anchor" href="#寄存器寻址"></a> 寄存器寻址</h5><p>寄存器寻址时，有效地址即为寄存器编号，数据储存在寄存器中，EA=R<sub>i</sub>。</p><p>特点：</p><ul><li>执行阶段不访存，只访问寄存器，执行速度快</li><li>寄存器个数有限，故指令字较短，可以缩短指令字长</li></ul><h5 id="寄存器间接寻址"><a class="markdownIt-Anchor" href="#寄存器间接寻址"></a> 寄存器间接寻址</h5><p>寄存器间接寻址时，有效地址在寄存器编号中，EA=(R<sub>i</sub>)。</p><p>特点：</p><ul><li>有效地址在寄存器中，操作数在存储器中，执行阶段访存。它比间接寻址少访存一次。</li><li>一般用于编制循环程序</li></ul><h5 id="基址寻址"><a class="markdownIt-Anchor" href="#基址寻址"></a> 基址寻址</h5><p>基址寻址又分为两种：隐式基址寻址和显示基址寻址。</p><h6 id="隐式基址寻址"><a class="markdownIt-Anchor" href="#隐式基址寻址"></a> 隐式基址寻址</h6><p>即采用专用寄存器作基址寄存器，此时EA=(BR)+A，BR为基址寄存器。</p><p>例如8086CPU中，默认DS为段地址寄存器，DI为段偏移地址寄存器。在访问数据时，真实的内存地址表现为：DS*16+DI，扩大了数据表示范围。</p><p>特点：</p><ul><li>可扩大寻址范围</li><li>有利于多道程序</li><li>BR的内容由操作系统或者管理程序确定</li><li>在程序执行过程中BR内容不变，形式地址可变</li></ul><h6 id="显示基址寻址"><a class="markdownIt-Anchor" href="#显示基址寻址"></a> 显示基址寻址</h6><p>即采用通用寄存器作基址寄存器，此时EA=(R<sub>0</sub>)+A，R<sub>0</sub>为用户自己指定的通用寄存器。</p><p>特点：</p><ul><li>由用户指定哪个通用寄存器作为基址寄存器</li><li>基址寄存器的内容由操作系统确定</li><li>在程序的执行过程中 R0  内容不变，形式地址 A 可变</li></ul><h5 id="变址寻址"><a class="markdownIt-Anchor" href="#变址寻址"></a> 变址寻址</h5><p>变址寻址与基址寻址极为相似，其有效地址EA等于指令字中的形式地址A与变址寄存器的内容相加之和，即EA=A+(IX)。</p><p>由于两者的应用场合不同，所以我们主要通过应用场景来区分变址寻址和基址寻址。基址寻址主要用于为程序或数据分配存储空间，由操作系统或管理程序决定，故程序执行过程中其值不可变；而变址寻址的内容是由用户设定的，在执行过程中内容可变，而指令字的A不可变，主要用来处理<strong>数组问题</strong>。</p><p>比如在数组处理过程中，设定A为数组的首地址，然后通过改变变址寄存器的值来访问数组的各个元素，特别适合编制循环程序。</p><p>特点如下：</p><ul><li>可以扩大寻址范围</li><li>IX的内容由用户给定</li><li>在程序的执行过程中 IX 内容可变，形式地址 A 不变</li><li>便于处理数组问题</li></ul><h5 id="相对寻址"><a class="markdownIt-Anchor" href="#相对寻址"></a> 相对寻址</h5><p>相对寻址的有效地址是将程序计数器PC的内容（即当前指令地址）与指令字中的形式地址相加而成，即EA=(PC)+A。A 是相对于当前指令的位移量（可正可负，补码）</p><p>特点：</p><ul><li>A的位数决定操作数的寻址范围</li><li>对于编写浮动程序特别有利，无论程序在主存的哪段区域都能正常运行</li><li>广泛应用于转移指令</li></ul><h5 id="堆栈寻址"><a class="markdownIt-Anchor" href="#堆栈寻址"></a> 堆栈寻址</h5><p>堆栈可以分为硬堆栈和软堆栈两种，前者由多个寄存器实现，后者由指定的存储空间实现。堆栈的运行方式可以分为先进后出和先进先出两种。先进后出型堆栈的操作数只能从一个出入口进行读写，栈顶地址由寄存器SP指出。因此堆栈寻址本质上也可以视为寄存器间接寻址。</p><p>整理表格如下：</p><table><thead><tr><th>寻址方式</th><th>说明</th><th>特点</th></tr></thead><tbody><tr><td>立即寻址</td><td>此时形式地址A就是操作数，即输入立即数。</td><td>- 指令执行阶段不访存<br> - 立即数是采用补码存放的，所以可正可负<br> - A的位数限制了输入立即数的范围</td></tr><tr><td>直接寻址</td><td>有效地址由形式地址直接给出，EA=A。</td><td>- 执行阶段访问一次寄存器<br> - A的位数决定了该指令操作数的寻址范围<br> - 操作数的地址不易修改，此时必须要修改A</td></tr><tr><td>隐含寻址</td><td>操作数地址隐含在操作码中。</td><td>- 指令字中少了一个地址字段，可缩短指令字长</td></tr><tr><td>间接寻址</td><td>有效地址由形式地址间接提供，即形式地址指向真实地址的地址，类似指针的概念。</td><td>- 执行指令阶段会进行2次或多次访存<br> - 可以扩大寻址范围<br> - 便于编制程序，指针的运用十分方便</td></tr><tr><td>寄存器寻址</td><td>有效地址即为寄存器编号，数据储存在寄存器中，EA=R<sub>i</sub>。</td><td>- 执行阶段不访存，只访问寄存器，执行速度快<br> - 寄存器个数有限，故指令字较短，可以缩短指令字长</td></tr><tr><td>寄存器间接寻址</td><td>有效地址在寄存器编号中，EA=(R<sub>i</sub>)。</td><td>- 有效地址在寄存器中，操作数在存储器中，执行阶段访存。它比间接寻址少访存一次。<br> - 一般用于编制循环程序</td></tr><tr><td>基址寻址</td><td>基址寻址分为隐式基址寻址和显示基址寻址。</td><td></td></tr><tr><td>隐式基址寻址</td><td>采用专用寄存器作基址寄存器，此时EA=(BR)+A，BR为基址寄存器。</td><td>- 可扩大寻址范围<br> - 有利于多道程序<br> - BR的内容由操作系统或者管理程序确定<br> - 在程序执行过程中BR内容不变，形式地址可变</td></tr><tr><td>显示基址寻址</td><td>采用通用寄存器作基址寄存器，此时EA=(R<sub>0</sub>)+A，R<sub>0</sub>为用户自己指定的通用寄存器。</td><td>- 由用户指定哪个通用寄存器作为基址寄存器<br> - 基址寄存器的内容由操作系统确定<br> - 在程序的执行过程中 R0 内容不变，形式地址 A 可变</td></tr><tr><td>变址寻址</td><td>有效地址EA等于指令字中的形式地址A与变址寄存器的内容相加之和，即EA=A+(IX)。</td><td>- 可以扩大寻址范围<br> - IX的内容由用户给定<br> - 在程序的执行过程中 IX 内容可变，形式地址 A 不变<br> - 便于处理数组问题</td></tr><tr><td>相对寻址</td><td>有效地址是将程序计数器PC的内容（即当前指令地址）与指令字中的形式地址相加而成，即EA=(PC)+A。</td><td>- A的位数决定操作数的寻址范围<br> - 对于编写浮动程序特别有利，无论程序在主存的哪段区域都能正常运行<br> - 广泛应用于转移指令</td></tr><tr><td>堆栈寻址</td><td>堆栈可以分为硬堆栈和软堆栈两种，前者由多个寄存器实现，后者由指定的存储空间实现。</td><td>- 堆栈的运行方式可以分为先进后出和先进先出两种。<br> - 堆栈寻址本质上也可以视为寄存器间接寻址。</td></tr></tbody></table><h3 id="指令集"><a class="markdownIt-Anchor" href="#指令集"></a> 指令集</h3><p>主要了解两种指令集：</p><ul><li>RISC（Reduced Instruction Set Computer）精简指令集计算机</li><li>CISC（Complex Instruction Set Computer）复杂指令集计算机</li></ul><p>下面的比较图需要牢固记忆：</p><table><thead><tr><th></th><th>RISC</th><th>CISC</th></tr></thead><tbody><tr><td>CPU</td><td>体积小、能耗低、性能功耗比高</td><td>体积大、能耗高、性能功耗比低</td></tr><tr><td>计算效率</td><td>低</td><td>高</td></tr><tr><td>软件</td><td>体积大、指令复杂度高</td><td>体积小、指令复杂度低</td></tr><tr><td>代表性产品</td><td>ARM</td><td>x86</td></tr></tbody></table><p>现在CISC与RISC正在逐步走向融合。</p><p>……</p><p>……</p><p>第四章到此结束！敬请阅读第五部分👍</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/B457C9EC79F0421BB773651E8FFE5F05.jpg" alt="B457C9EC79F0421BB773651E8FFE5F05" /></p>]]></content>
    
    
    <summary type="html">计算机组成指北的第四部分！介绍了计算机的指令系统，难度不大，如果有汇编基础将会很容易理解。</summary>
    
    
    
    <category term="计算机组成指北" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="指令系统" scheme="http://example.com/tags/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成指北（三）</title>
    <link href="http://example.com/posts/1da683a19632/"/>
    <id>http://example.com/posts/1da683a19632/</id>
    <published>2024-09-27T03:42:38.000Z</published>
    <updated>2024-09-27T03:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第五章-输入输出系统"><a class="markdownIt-Anchor" href="#第五章-输入输出系统"></a> 第五章 输入输出系统</h2><blockquote><p>相对来说不是那么重要的一章，只需理解概念就可</p><p>输入输出系统知道概念，I/O处理机知道干嘛就行。主要要知道三种控制方式：程序查询方式、中断方式、dma方式</p></blockquote><p>CPU除了要和存储器交换信息外，还需要和外部设备进行通信。这一章我们来介绍计算机的输入输出系统。</p><h3 id="io系统发展概况"><a class="markdownIt-Anchor" href="#io系统发展概况"></a> I/O系统发展概况</h3><p>I/O系统发展经历了四个阶段：</p><ol><li>分散连接。早期主机和I/O设备分散直连，I/O的控制由CPU来负责，因此整个I/O期间I/O和CPU需要一直保持联络，由于速率的不对等，因此一个I/O周期中CPU大部分时间处于是停等状态。</li><li>接口模块和DMA阶段。为了提高效率，出现了I/O接口和DMA控制器。I/O设备通过I/O接口连入I/O总线，DMA控制器专门负责I/O的控制，从而解放出CPU，使得CPU在I/O周期间不必停等。CPU和I/O之间是并行的。此方式中I/O的控制均交给DMA控制器来完成（指令交给控制器来负责），但是控制器不具备数据的处理功能（如读数、写数），因此数据的处理功能仍然要走CPU。</li><li>通道。一种简单的处理器，比起DMA多了数据处理功能，使得I/O的控制、数据处理完全从CPU中剥离出来，为CPU减负。一个通道可以连接多个I/O设备，即一条通道供多个I/O设备“行走”。</li><li>I/O处理机。通道技术的升级版，直接采用和主机CPU结构相同的小型CPU来完全负责I/O的控制和数据处理。</li></ol><h3 id="io设备与主机信息传送的控制方式"><a class="markdownIt-Anchor" href="#io设备与主机信息传送的控制方式"></a> I/O设备与主机信息传送的控制方式</h3><p>分为程序查询方式，中断方式，DMA方式三种。</p><h4 id="程序查询方式"><a class="markdownIt-Anchor" href="#程序查询方式"></a> 程序查询方式</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174213371.png" alt="image-20240617174213371" style="zoom:50%;" /><p>数据先到CPU寄存器，再转存到主存当中。这种方式CPU会一直反复查询I/O设备的状态，仿佛在原地踏步，将CPU和I/O设备处于串行的工作状态，因此工作效率不高。</p><h4 id="中断方式"><a class="markdownIt-Anchor" href="#中断方式"></a> 中断方式</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174302937.png" alt="image-20240617174302937" style="zoom:50%;" /><p>执行第K条指令时，如果外部设备准备好，将向CPU提出一个中断请求，此时再开始向CPU传送数据，而CPU无须终止原程序的执行，没有“踏步”现象，提高了工作效率。但是这需要额外增加相应的电路，并在软件中编制中断服务的程序。</p><h4 id="dma方式"><a class="markdownIt-Anchor" href="#dma方式"></a> DMA方式</h4><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174331688.png" alt="image-20240617174331688" style="zoom:50%;" /><p>虽然用程序中断方式消除了“踏步”现象，但是CPU接到响应请求后，必须停止现行程序而转入中断服务，这也是对CPU资源的消耗。因此，我们采用直接存储器存取/DMA的方式，让I/O设备通过总线直接与主存交换信息，这样就进一步节省了CPU的资源。</p><p>DMA要使用总线，所以有周期挪用。</p><p>DMA发出请求，占用总线存取周期，用于I/O和主存间数据传输。</p><h2 id="第六章-计算机的运算方法"><a class="markdownIt-Anchor" href="#第六章-计算机的运算方法"></a> 第六章 计算机的运算方法</h2><blockquote><p>全程高能，必考且重要且晦涩</p></blockquote><p>我们已经了解了计算机如何与外界进行通信，以及外部的运行原理。现在，让我们把目光看向计算机中最重要也是最精巧的组成部分：中央处理器CPU（Central Process Unit）。CPU主要由四个部分组成：</p><ul><li>ALU，算数逻辑单元。负责执行所有的算术运算和逻辑运算。</li><li>寄存器。一组快速的存储位置，用于临时存储指令、数据和地址等信息。寄存器直接与ALU交互，比主存储器快得多。</li><li>中断系统。允许外部设备或软件中断当前的程序执行流程，以响应紧急事件或需求。</li><li>CU，控制单元。负责解释指令并生成控制信号，以协调CPU内部各部件的操作和其他系统组件。</li></ul><p>本章中，我们着力学习计算机的ALU部分。</p><p>这里主要复习计算机的内部运算和算术逻辑单元的实现，至于基础的机器数表示方法则不过多介绍，可以参考我在数字逻辑是做的笔记：<a href="https://adam8en.github.io/2023/10/07/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E5%88%B6%E5%9F%BA%E7%A1%80/">数字逻辑小结（一）—— 数制基础 | Adam8en の 8log</a></p><p>这里只简单的介绍原码、反码、补码、移码的概念</p><ul><li>原码：一个二进制数，包括一个符号位和数值位。符号位等于0为正数，等于1为负数。</li><li>反码：正数的反码是它本身，负数的反码是除符号位外全部取反。</li><li>补码：正数的补码是它本身，负数的补码是它的反码末位+1。</li><li>移码：n为整数的位数，[x]<sub>移</sub>=2<sup>n</sup>+x；与补码的区别只有符号位相反。</li></ul><h3 id="数的定点表示"><a class="markdownIt-Anchor" href="#数的定点表示"></a> 数的定点表示</h3><p>在定点机中，定点表示有两种方式：小数定点机和整数定点机。</p><ul><li><p>在小数定点机中，小数点位于数符和数值部分之间，表示纯小数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617191648087.png" alt="image-20240617191648087" /></p></li><li><p>在整数定点机中，小数点位于数值部分末尾，表示纯整数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617191700990.png" alt="image-20240617191700990" /></p></li></ul><p>当机器处理的数不是一个纯小数或者纯整数时，必须要乘以一个“比例因子”，不然会产生溢出。</p><h3 id="数的浮点表示"><a class="markdownIt-Anchor" href="#数的浮点表示"></a> 数的浮点表示</h3><p>浮点数的一般表现形式为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mi>S</mi><mo>×</mo><msup><mi>r</mi><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">N=S\times r^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span>。</p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>为尾数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>为阶码，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>为基数；r可以取2、4、6、8、16等（一般取2）。</p><p>比如N=11.0101=1.10101×2<sup>1</sup>=0.110101×2<sup>10</sup>（二进制）。在计算机中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>是小数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>是整数，均可正可负。</p><h4 id="表示形式"><a class="markdownIt-Anchor" href="#表示形式"></a> 表示形式</h4><p>计算机中一般使用如下结构来表示一个浮点数：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617192423991.png" alt="image-20240617192423991" /></p><ul><li>S<sub>f</sub>代表浮点数的符号</li><li>n反映浮点数的精度</li><li>m反映浮点数的表示范围</li><li>j<sub>f</sub>和m共同表示小数点的实际位置</li></ul><h4 id="表示范围"><a class="markdownIt-Anchor" href="#表示范围"></a> 表示范围</h4><p>这个不强求记忆，看看图理解就好了</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617193019750.png" alt="image-20240617193019750" style="zoom:50%;" /><h4 id="规格化形式"><a class="markdownIt-Anchor" href="#规格化形式"></a> 规格化形式</h4><p>规格化数，即要求尾数的最高位为1。</p><p>故N=11.0101的规格化数的表现形式为0.110101×2<sup>10</sup>。</p><p>规格化数中，原码不论正负数第一数位都为1，而补码符号位和第一数位不同。</p><ul><li>左规：尾数左移一位，阶码减 1，直到数符和第一数位不同为止。</li><li>右规：当 尾数溢出（ &gt;1）时，需右规；尾数右移一位，阶码加 1。</li></ul><blockquote><p>例题：将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mfrac><mn>19</mn><mn>128</mn></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">+\frac{19}{128}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">+</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span>写成二进制定点数、浮点数及在定点机和浮点机中的机器数形式。其中数值部分均取 10 位，数符取 1 位，浮点数阶码取 5 位（含1位阶符）。</p><p>二进制形式：0.0010011</p><p>定点表示：0.0010011000</p><p>浮点化规格表示：0.1001100000×2<sup>-10</sup></p><p>定点机：[x]<sub>原</sub> = [x]<sub>补</sub> = [x]<sub>反</sub> = 0.0010011000</p><p>浮点机：[x]<sub>原</sub> = 1, 0010;  0. 1001100000</p><p>​[x]<sub>补</sub> = 1, 1110;  0. 1001100000</p><p>​[x]<sub>反</sub> = 1, 1101;  0. 1001100000</p></blockquote><h3 id="定点运算"><a class="markdownIt-Anchor" href="#定点运算"></a> 定点运算</h3><p>重要⚠️！复习提纲上没有涉及浮点数的四则运算，所以这就是Boss了。</p><h4 id="移位运算"><a class="markdownIt-Anchor" href="#移位运算"></a> 移位运算</h4><table border="2" >    <caption>算数移位规则·符号位不变</caption>    <tr ><td>真值</td>        <td>码制</td>        <td>添补代码</td></tr>    <tr ><td>正数</td>        <td>原码、补码、反码</td>        <td>0</td></tr><tr ><td rowspan="4">负数</td><td>原码</td>        <td>0</td></tr><tr ><td rowspan="2">补码</td>        <td>左移 添0</td></tr>    <tr ><td>右移 添1</td></tr>    <tr ><td>反码</td>        <td>1</td></tr></table><p>通过移位来进行加减法运算。</p><p>移位又分算术移位和逻辑移位，算术移位上述表格已经给出规则，适用于有符号数的运算。对于无符号数的运算，通常使用逻辑移位。</p><ul><li>逻辑左移：低位添0，高位移丢</li><li>逻辑右移：高位添0，低位移丢</li></ul><h4 id="加减法运算"><a class="markdownIt-Anchor" href="#加减法运算"></a> 加减法运算</h4><p>补码加减法运算公式有：</p><ol><li><p>加法：</p><ul><li>整数：[A]<sub>补</sub> + [B]<sub>补</sub>= [A+B]<sub>补</sub>（mod 2<sup>n+1</sup>）</li><li>小数：[A]<sub>补</sub> + [B]<sub>补</sub>= [A+B]<sub>补</sub>（mod <sup>2</sup>）</li></ul></li><li><p>减法：</p><p>即加上相反数的加法运算A-B=A+(-B)</p><ul><li>整数：[A – B]<sub>补</sub>= [A+(–B )]<sub>补</sub>= [A]<sub>补</sub> + [ – B]<sub>补</sub>(mod 2<sup>n+1</sup>)</li><li>小数：[A – B]<sub>补</sub>= [A+(–B )]<sub>补</sub>= [A]<sub>补</sub> + [ – B]<sub>补</sub>(mod 2)</li></ul></li></ol><p>即加上两数的补码，连同符号位一起相加，符号位产生的进位自然丢掉。</p><h4 id="溢出判断"><a class="markdownIt-Anchor" href="#溢出判断"></a> 溢出判断</h4><p>溢出有分两种情况：一位符号位的溢出与两位符号位的溢出</p><p>先讨论一位符号位的：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205017557.png" alt="image-20240617205017557" style="zoom: 80%;" /><p>参加操作的两个数（减法时即为被减数和“求补”以后的减数）符号相同，其结果的符号与原操作数的符号不同时，即为溢出。</p><p>再来看两位符号位的溢出：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205310191.png" alt="image-20240617205310191" style="zoom:80%;" /><p>即把符号位写两遍，然后进行运算。如果双符号位最终不同，就为溢出。</p><h4 id="乘法运算"><a class="markdownIt-Anchor" href="#乘法运算"></a> 乘法运算</h4><h5 id="原码一位乘"><a class="markdownIt-Anchor" href="#原码一位乘"></a> 原码一位乘</h5><p>观察下图，我们可以总结规律：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205811311.png" alt="image-20240617205811311" style="zoom:50%;" /><p>概括一下定点原码一位乘的步骤：先在0上加一个被乘数，右移一位；再在部分积上逆序乘数加，同时被乘数继续右移一位。</p><p>乘法运算可用加和移位实现。当n = 4时，加 4 次，移 4 次。由乘数的末位决定被乘数是否与原部分积相加，然后右移1位形成新的部分积，同时乘数右移1位（末位移丢），空出高位存放部分积的低位。然后再将被乘数只与部分积的高位相加。</p><p>如果对象是小数，那么数值部分按以上规则用绝对值相乘，符号位部分单独做异或处理。</p><p>归纳成次序步骤可以总结如下：</p><ol><li>列出竖式，写出被乘数和乘数的数值部分</li><li>首先，初态为0，加上一个被乘数</li><li>得到的和应该和被乘数相等，然后右移一位得到第一个部分积。同时乘数也要右移一位。</li><li>此时，引入乘数，根据乘数的末尾值是否1来判断是否加上一个被乘数。如果为1，则加上一个被乘数；如果为0，则加上0。（这里假设末位为1）</li><li>部分积加上一个乘数，得到一个和。</li><li>将和右移一位得到新的部分积，同时乘数右移一位：低位直接移丢，空出来的高位用来存储部分积右移移丢的低位值。</li><li>重复以上步骤n次，n为被乘数与乘数的长度，最后的积即为部分积拼接上乘数，此时存储乘数的寄存器内存储的应该是被乘数部分积在不断右移中移丢的低位积部分。</li><li>符号位单独异或处理，判断正负。</li></ol><p>需要硬件实现：3个具有移位功能的寄存器，1个全加器。</p><p>以下竖式笔算计算机乘法（13×11=143=10001111）步骤供参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617210127927.png" alt="image-20240617210127927" style="zoom:50%;" /><p>拼接被乘数和乘数寄存器内的数值，最后结果为0.10001111，经验证正确。</p><p>原码一位乘的特点是：</p><ul><li>绝对值运算</li><li>用移位的次数判断乘法是否结束</li><li>逻辑移位</li></ul><h5 id="原码两位乘"><a class="markdownIt-Anchor" href="#原码两位乘"></a> 原码两位乘</h5><ul><li>原码乘的含义是：符号位和数值位部分分开运算</li><li>两位乘的含义是：每次用乘数的2位判断原部分积是否加和如何加被乘数</li></ul><p>运算法则如下表所示：</p><table><thead><tr><th>乘数y<sub>n-1</sub>y<sub>n</sub></th><th>新的部分积</th></tr></thead><tbody><tr><td>0 0</td><td>加0，右移两位</td></tr><tr><td>0 1</td><td>加1倍的被乘数，右移两位</td></tr><tr><td>1 0</td><td>加2倍的被乘数，右移两位</td></tr><tr><td>1 1</td><td>加3倍的被乘数，右移两位</td></tr></tbody></table><p>我们知道加1倍的被乘数就是直接算加法，两倍的被乘数就是先把被乘数进行算数左移1位后再与原部分积相加，那么3倍的被乘数怎么算呢？</p><p>答案是通过先减去1倍的被乘数再加上4倍的被乘数，也就是减去一个被乘数后再加上被乘数算数左移2位的值，我们需要留到下次再加，用一个进位标志C，来记录这次没加上的4倍。至于减法，我们选择计算加上其相反数的补码，这样可以方便运算。</p><p>引入进位标志C后，运算规律可以参考下列的表格，更加逻辑化：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618144232292.png" alt="image-20240618144232292" /></p><p>这里给出一个例题，原码二位乘的运算过程可以参考如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618144436770.png" alt="image-20240618144436770" style="zoom:50%;" /><p>要加2x，和的绝对值可能大于2，因此小数点左边取3位，最高位才是真正的符号位。</p><p>注意：在乘数（偶数）前面加两个0/（奇数）前面加一个0，若仍有进位没处理时，可以处理掉，使C重新等于0。这些添加的0非乘数本身数值，因此最后一步不用移位</p><p>其中符号位仍然继续使用异或来判断。</p><p>原码二位乘加快了计算机的远算速度，有以下几个特点：</p><ol><li>绝对值的<strong>补码运算</strong></li><li>用移位的次数判断乘法是否结束</li><li>算术移位</li></ol><p>相比原码一位乘只是多了个补码运算，用于计算减法。</p><p>下表列出了原码一位乘和原码二位乘的比较：</p><table><thead><tr><th></th><th>原码一位乘</th><th>原码两位乘</th></tr></thead><tbody><tr><td>符号位</td><td>x<sub>0</sub>⊕y<sub>0</sub></td><td>x<sub>0</sub>⊕y<sub>0</sub></td></tr><tr><td>操作数</td><td>绝对值</td><td>绝对值的补码</td></tr><tr><td>移位</td><td>逻辑右移</td><td>算数右移</td></tr><tr><td>移位次数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">(</mo><mi>n</mi><mtext>为偶数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2(n为偶数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">偶</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mi>n</mi><mtext>为奇数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2+1(n为奇数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">奇</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>最多加法次数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mi>n</mi><mtext>为偶数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2+1(n为偶数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">偶</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h5 id="补码一位乘"><a class="markdownIt-Anchor" href="#补码一位乘"></a> 补码一位乘</h5><p>我先给出PPT上的运算方法</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618161452567.png" alt="image-20240618161452567" style="zoom:50%;" /><p>补码一位乘，又称<strong>校正法</strong>。我不知道多少人是和我一样根本看不懂这一页是在讲什么的，但是好歹只是个求补码，我决定还是采用自己的方法去计算，即：除符号位全部取反后末位加1。</p><p>所以这里我们抛开晦涩的教材，自己来总结一下补码一位乘的计算方法，其实大致和原码一位乘的方法相似，特点如下：</p><ol><li>当被乘数符号任意，乘数为正时：运算规则同原码乘，但加和移位的方法要按照补码运算的规则，此时乘积的符号会自然形成而无非单独进行异或运算。</li><li>当被乘数符号任意，乘数为负时：乘数为[y]<sub>补</sub>，去掉符号位当成正数与被乘数进行运算，步骤同1。最后要加上[–x]<sub>补</sub>，进行<strong>校正</strong>。</li><li>运算时可能会出现绝对值大于1的情况，但此时并不是溢出，所以采用双符号位的方式计算。</li></ol><p>这里给出一道例题供参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/IMG_20240618_164350.jpg" alt="IMG_20240618_164350" style="zoom: 25%;" /><p>注意，最后加上[–x]<sub>补</sub>进行修正时，不需要再进行移位。</p><h5 id="booth算法"><a class="markdownIt-Anchor" href="#booth算法"></a> Booth算法</h5><p>Booth算法，又称<strong>比较法</strong>。适用于符号任意的被乘数与乘数，具有普适性。由于比较法的补码乘法运算规则不受符号约束，因此控制线路比较简明，在计算机中普遍采用。</p><p>比较法的公式过于抽象，这里就不再赘述，不方便理解。其实本质上还是继续加上[–x]<sub>补</sub>，然后右移一位的迭代过程。每次要不要加[–x]<sub>补</sub>，由y<sub>i+1</sub>和y<sub>i</sub>决定。其运算规律如下表所示：</p><table><thead><tr><th>y<sub>i</sub>y<sub>i+1</sub></th><th>y<sub>i+1</sub> -  y<sub>i</sub></th><th>操作</th></tr></thead><tbody><tr><td>0    0</td><td>0</td><td>右移一位</td></tr><tr><td>0    1</td><td>1</td><td>+[x]<sub>补</sub>，右移一位</td></tr><tr><td>1    0</td><td>-1</td><td>+[–x]<sub>补</sub>，右移一位</td></tr><tr><td>1    1</td><td>0</td><td>右移一位</td></tr></tbody></table><p>记住，比较法的最后一步不移位。</p><p>与校正法相比，比较法的部分积仍然取双符号位。乘数因为符号位参与运算，所以多取一位。</p><p>给出例题参考如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618165410762.png" alt="image-20240618165410762" style="zoom:50%;" /><h5 id="乘法小结"><a class="markdownIt-Anchor" href="#乘法小结"></a> 乘法小结</h5><p>介绍了原码乘法和补码乘法后，总结如下：</p><ul><li>整数乘法与小数乘法完全相同，可用逗号代替小数点</li><li>原码乘符号位单独处理；补码乘符号位自然形成</li><li>原码乘去掉符号位运算，即为无符号数乘法</li><li>不同的乘法运算需有不同的硬件支持</li></ul><h4 id="除法运算"><a class="markdownIt-Anchor" href="#除法运算"></a> 除法运算</h4><p>除法运算分为恢复除数法和不恢复除数法。恢复除数法即使用加法器不断的作负数补码的加法来试探减法，一旦结果小于0则恢复除数，右移一位继续。这种做法降低了计算的效率，所以我们这里只介绍不恢复余数法。两种除法均为原码运算，故符号位需要单独处理。</p><p>不恢复余数法的步骤可以概括如下，大抵和前面介绍的乘法原码计算步骤类似：</p><p>（注意，y*表示y的绝对值）</p><ol><li>列出被除数（也即余数，比如0.1011）、商（当n=4的情况下，初始化为0.0000）</li><li>首先加上[-y*]<sub>原</sub>，即被除数减去除数，判断是否溢出</li><li>如果余数的符号位为1，小于0：<ul><li>上商0</li><li>商与余数均逻辑左移一位</li><li>+[y*]<sub>原</sub>，即加上除数</li></ul></li><li>如果余数的符号位为0，大于0：<ul><li>上商1</li><li>商与余数均逻辑左移一位</li><li>+[-y*]<sub>原</sub>，即继续减去除数</li></ul></li><li>这个步骤重复上商n+1次，总共需要逻辑左移n次，用移位的次数判断除法是否结束</li><li>符号位最后单独进行异或运算</li></ol><p>下面给出例题作为参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618171714654.png" alt="image-20240618171714654" style="zoom:50%;" /><p>补码的除法运算这里略过不讲，期末大概不会考它。</p><h3 id="快速进位链"><a class="markdownIt-Anchor" href="#快速进位链"></a> 快速进位链</h3><p>我们已经在数学层面上学习了如何实现计算机的运算，接下来我们来讨论如何在硬件层面上设计计算机的运算系统，这里主要以ALU加法器为例。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618193730404.png" alt="image-20240618193730404" style="zoom:50%;" /><p>其中，A和B是输入变量，可以通过设置k工作信号的值，来选择ALU的功能，最后把结果输出到F。ALU没有记忆，因此需要在A、B和F处连接寄存器储存变量的值。在ALU中，最核心的组成部分就是快速进位链，接下来我们来学习如何设计快速进位链。</p><h4 id="并行加法器"><a class="markdownIt-Anchor" href="#并行加法器"></a> 并行加法器</h4><p>并行加法器由若干个全加器构成：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618194314793.png" alt="image-20240618194314793" /></p><p>其中A和B是输入，C是进位信号，S是当前位数运算的值。可以看到，当操作的位数变多时，每一级的运算结果都要依赖于上一级的进位信号才能输出正确的结果，导致大部分时间前端的全加器都在等待，这是不可接受的。我们的任务就是优化计算进位的速度，也就是设计快速进位链。</p><p>根据全加器的逻辑表达式，我们可以很简单的构造出进位信号C的逻辑表达式：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><msub><mi>t</mi><mi>i</mi></msub><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C=d_i+t_iC_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>的含义图中均已给出。</p><p>根据C的表达式，我们就可以将逐级进位的结构转换为进位链的方式来实现快速进位。目前的进位链形式有<strong>串行</strong>和<strong>并行</strong>两种。</p><h4 id="串行进位链"><a class="markdownIt-Anchor" href="#串行进位链"></a> 串行进位链</h4><p>串行进位链就是指并行加法器中的进位信号通过串行传输，如图：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618195152707.png" alt="image-20240618195152707" /></p><p>进位表达式可写为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mover accent="true"><mrow><mover accent="true"><msub><mi>d</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo>⋅</mo><mover accent="true"><mrow><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>C</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>C</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{0}=d_{0}+t_{0} C_{-1}=\overline{\overline{d_{0}} \cdot \overline{t_{0} C_{-1}}} \\C_{1}=d_{1}+t_{1} C_{0} \\C_{2}=d_{2}+t_{2} C_{1} \\C_{3}=d_{3}+t_{3} C_{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.05444em;vertical-align:-2.27722em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7772200000000002em;"><span style="top:-4.777220000000001em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.09444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.89444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.81444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span style="top:-4.0144400000000005em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span style="top:-3.57722em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3772200000000003em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1772200000000004em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.27722em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>即我们先通过与非门计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">t_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，再和低电平<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">d_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>信号通过一次与非门就能得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">C_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，同理可求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">C_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，设计出进位链。</p><p>让我们假设与非门的延迟是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么n位全加器产生进位的全部时间就为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2nt_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，因为一个进位需要使用两个与非门。</p><h4 id="并行进位链"><a class="markdownIt-Anchor" href="#并行进位链"></a> 并行进位链</h4><p>并行进位链，又称先行进位或跳跃进位，是指并行加法器的进位信号理想情况下是同时产生的，但这么实现通常有困难。一般来说有两种实现方案：<strong>单重分组</strong>和<strong>双重分组</strong>。</p><p>我们之前得到了串行进位链的进位信号表达式，对该表达式进行变换，可以得到如下结果：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{0}=d_{0}+t_{0} C_{-1} \\C_{1}=d_{1}+t_{1} C_{0}=d_{1}+t_{1} d_{0}+t_{1} t_{0} C_{-1} \\C_{2}=d_{2}+t_{2} C_{1}=d_{2}+t_{2} d_{1}+t_{2} t_{1} d_{0}+t_{2} t_{1} t_{0} C_{-1} \\C_{3}=d_{3}+t_{3} C_{2}=d_{3}+t_{3} d_{2}+t_{3} t_{2} d_{1}+t_{3} t_{2} t_{1} d_{0}+t_{3} t_{2} t_{1} t_{0} C_{-1}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>仔细分析表达式，均为与操作和或操作，所以我们可以设计出如下电路图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618200308979.png" alt="image-20240618200308979" style="zoom:50%;" /><p>放心，这个图很复杂，看看就好，重点不在这里。</p><p>假设或非门的延迟时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">1.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>形成后，只需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>就可以产生全部的进位。</p><p>可以看到这个速度比串行进位链已经提升了很多，但是当位数比较大时（比如32位），这个电路的设计会肉眼可见的变得非常复杂。为了简化电路设计，我们给出了以下两种折中方案，也就是我们先前提到过的单重分组跳跃与双重分组跳跃。</p><h5 id="单重分组跳跃进位链"><a class="markdownIt-Anchor" href="#单重分组跳跃进位链"></a> 单重分组跳跃进位链</h5><p>我们将n位全加器分若干小组，小组中的进位同时产生，小组与小组之间采用串行进位。以n=16为例，我们将全加器分为四组，可以设计出如下的电路图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618200932273.png" alt="image-20240618200932273" style="zoom:50%;" /><p>此时完成一个小组的用时为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub><mo>=</mo><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">4\times2.5t_y=10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>即可完成四组的进位信号生成，而如果采用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">32t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><h5 id="双重分组跳跃进位链"><a class="markdownIt-Anchor" href="#双重分组跳跃进位链"></a> 双重分组跳跃进位链</h5><p>双重分组即n位全加器分若干大组，大组中又包含若干小组。每个大组中小组的最高位进位同时产生。大组与大组之间采用串行进位。以n=32为例，我们把32分为两个16的大组，再把16按照单重跳跃的方式进行分组，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618201932503.png" alt="image-20240618201932503" style="zoom:50%;" /><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>产生的进位信号作为串行进位输入到第一大组和第4小组中。此时特点可总结为：<font style="color:red">组内并行，组间串行。</font></p><p>本质上，双重分组跳跃链就是对单重分组跳跃链的一层抽象，我们还可以根据这种抽象思维设计出更多重的跳跃链。这就是<font style="color:blue;font-size:24px">A new level of abstraction</font>。</p><h6 id="大组进位分析"><a class="markdownIt-Anchor" href="#大组进位分析"></a> 大组进位分析</h6><p>上述的双重分组跳跃链只是一个简图，我们还没有讨论大组之间的电路是怎么设计的。</p><p>我们从第8小组为例，分析它的表达式。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><munder><munder><mrow><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub></mrow><mo stretchy="true">⏟</mo></munder><msub><mi>D</mi><mn>8</mn></msub></munder><mo>+</mo><munder><munder><mrow><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">⏟</mo></munder><msub><mi>T</mi><mn>8</mn></msub></munder></mrow><annotation encoding="application/x-tex">C_{3}=d_{3}+t_{3} C_{2}=\underbrace{d_{3}+t_{3} d_{2}+t_{3} t_{2} d_{1}+t_{3} t_{2} t_{1} d_{0}}_{D_{8}}+\underbrace{t_{3} t_{2} t_{1} t_{0} C_{-1}}_{T_{8}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.2708709999999996em;vertical-align:-1.5764310000000001em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944399999999997em;"><span style="top:-1.523669em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span class="svg-align" style="top:-2.202em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.798em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5764310000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.318092em;vertical-align:-1.634762em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-1.465338em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span class="svg-align" style="top:-2.143669em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8563310000000001em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.634762em;"><span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">D_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第8小组的本地进位，和外来进位无关；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第8小组的传送条件，与外来进位无关，只是负责传递外来进位。</p><p>同理我们有：</p><ul><li>第7小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><mo>+</mo><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_7=D_7+T_7+C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>第6小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><mo>+</mo><msub><mi>C</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">C_{11}=D_6+T_6+C_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>第5小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><mo>+</mo><msub><mi>C</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}=D_5+T_5+C_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>依次代入展开可以得到如下表达式：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>15</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{3}=D_{8}+T_{8} C_{-1} \\C_{7}=D_{7}+T_{7} C_{3}=D_{7}+T_{7} D_{8}+T_{7} T_{8} C_{-1} \\C_{11}=D_{6}+T_{6} C_{7}=D_{6}+T_{6} D_{7}+T_{6} T_{7} D_{8}+T_{6} T_{7} T_{8} C_{-1} \\C_{15}=D_{5}+T_{5} C_{11}=D_{5}+T_{5} D_{6}+T_{5} T_{6} D_{7}+T_{5} T_{6} T_{7} D_{8}+T_{5} T_{6} T_{7} T_{8} C_{-1}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>这又化成了只有与门和或门的形式，参照单重分组跳跃的方式，我们可以设计出大组间的跳跃电路：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618204246545.png" alt="image-20240618204246545" style="zoom:50%;" /><h6 id="小组进位分析"><a class="markdownIt-Anchor" href="#小组进位分析"></a> 小组进位分析</h6><p>讨论完双重进位链中的大组，我们再来研究小组间的电路该如何设计。</p><p>小组间的电路其实就是一个单重进位链，但是我们需要它提供<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>给大组的跳跃链，所以我们还是给出了小组间的电路设计图，以第8小组为例，它只产生低3位的进位和本小组的D8、T8：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205146754.png" alt="image-20240618205146754" style="zoom:50%;" /><p>是否觉得很眼熟呢？我放出了原来的单重跳跃进位链作为对比</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205122829.png" alt="image-20240618205122829" style="zoom:50%;" /><p>此时，我们就可以分析当n=16时的双重分组跳跃进位链的用时了，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205623246.png" alt="image-20240618205623246" style="zoom:50%;" /><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>形成后：</p><ul><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>0</mn></msub><mtext>、</mtext><msub><mi>D</mi><mn>5</mn></msub><mo>∼</mo><msub><mi>D</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>T</mi><mn>5</mn></msub><mo>∼</mo><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">C_2、C_1、C_0、D_5\sim D_8、T_5\sim T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>11</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>7</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}、C_{11}、C_7、C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">7.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>14</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>12</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>10</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>6</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C_{14}\sim C_{12}、C_{10}\sim C_8、C_6\sim C_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>而如果使用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">32t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><p>如果使用单重分组跳跃进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>当n=32时，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618210425045.png" alt="image-20240618210425045" style="zoom:50%;" /><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>形成后：</p><ul><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>0</mn></msub><mtext>、</mtext><msub><mi>D</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>D</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>T</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">C_2、C_1、C_0、D_1\sim D_8、T_1\sim T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>11</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>7</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}、C_{11}、C_7、C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">7.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>18</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>16</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>14</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>12</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>10</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>6</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C_{18}\sim C_{16}、C_{14}\sim C_{12}、C_{10}\sim C_8、C_6\sim C_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>​<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>31</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>27</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>23</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>19</mn></msub></mrow><annotation encoding="application/x-tex">C_{31}、C_{27}、C_{23}、C_{19}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>30</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>28</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>26</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>24</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>22</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>20</mn></msub></mrow><annotation encoding="application/x-tex">C_{30}\sim C_{28}、C_{26}\sim C_{24}、C_{22}\sim C_{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li></ul><p>如果使用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">64t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><p>如果使用单重分组跳跃进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">20t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>……</p><p>……</p><p>第三部分到此结束！敬请阅读第四部分🎆</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/118769966_p0.jpg" alt="118769966_p0" /></p>]]></content>
    
    
    <summary type="html">计算机指北的第三部分！介绍了计算机的输入输出系统与其内部的运算机制。</summary>
    
    
    
    <category term="计算机组成指北" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    <category term="输入输出系统" scheme="http://example.com/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="计算机运算方法" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
